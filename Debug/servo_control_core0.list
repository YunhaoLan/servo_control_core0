
servo_control_core0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800ca78  0800ca78  0001ca78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce74  0800ce74  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce74  0800ce74  0001ce74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce7c  0800ce7c  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce7c  0800ce7c  0001ce7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce80  0800ce80  0001ce80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800ce84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f7c  200002c4  0800d148  000202c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002240  0800d148  00022240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000163c3  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a9b  00000000  00000000  000366fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0003a198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f6f  00000000  00000000  0003b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a3e0  00000000  00000000  0003c547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f8f  00000000  00000000  00056927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093a48  00000000  00000000  0006f8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006430  00000000  00000000  00103300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00109730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c4 	.word	0x200002c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ca60 	.word	0x0800ca60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002c8 	.word	0x200002c8
 80001dc:	0800ca60 	.word	0x0800ca60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <main>:
//	uint16_t pw_desired = pw_resolution * duty_cycle;
//	__HAL_TIM_SET_COMPARE(htim, channel, pw_desired);
//}

int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb8:	f000 ff7e 	bl	8001db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebc:	f000 f88a 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec0:	f000 fb76 	bl	80015b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec4:	f000 fb54 	bl	8001570 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ec8:	f000 f8ec 	bl	80010a4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ecc:	f000 f91e 	bl	800110c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ed0:	f000 f9b2 	bl	8001238 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ed4:	f000 fa52 	bl	800137c <MX_TIM4_Init>
  MX_TIM9_Init();
 8000ed8:	f000 fae8 	bl	80014ac <MX_TIM9_Init>
  MX_USB_DEVICE_Init();
 8000edc:	f008 fbf2 	bl	80096c4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4832      	ldr	r0, [pc, #200]	; (8000fac <main+0xf8>)
 8000ee4:	f004 f9dc 	bl	80052a0 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  uint8_t temp;
  while (1)
   {
	  // spi
	  HAL_SPI_Receive(&hspi1, &pData, sizeof(pData), HAL_MAX_DELAY);
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	2201      	movs	r2, #1
 8000eee:	4930      	ldr	r1, [pc, #192]	; (8000fb0 <main+0xfc>)
 8000ef0:	4830      	ldr	r0, [pc, #192]	; (8000fb4 <main+0x100>)
 8000ef2:	f003 fc66 	bl	80047c2 <HAL_SPI_Receive>

	  // usb debugging
	  if(pData == 180) //180
 8000ef6:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <main+0xfc>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2bb4      	cmp	r3, #180	; 0xb4
 8000efc:	d104      	bne.n	8000f08 <main+0x54>
	  {
		  CDC_Transmit_FS("180\n\r", 5);
 8000efe:	2105      	movs	r1, #5
 8000f00:	482d      	ldr	r0, [pc, #180]	; (8000fb8 <main+0x104>)
 8000f02:	f008 fc9d 	bl	8009840 <CDC_Transmit_FS>
 8000f06:	e01e      	b.n	8000f46 <main+0x92>
	  }
	  else if(pData == 90) //90
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <main+0xfc>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b5a      	cmp	r3, #90	; 0x5a
 8000f0e:	d104      	bne.n	8000f1a <main+0x66>
	  {
		  CDC_Transmit_FS("90\n\r", 4);
 8000f10:	2104      	movs	r1, #4
 8000f12:	482a      	ldr	r0, [pc, #168]	; (8000fbc <main+0x108>)
 8000f14:	f008 fc94 	bl	8009840 <CDC_Transmit_FS>
 8000f18:	e015      	b.n	8000f46 <main+0x92>
	  }
	  else if(pData == 45) //45
 8000f1a:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <main+0xfc>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b2d      	cmp	r3, #45	; 0x2d
 8000f20:	d104      	bne.n	8000f2c <main+0x78>
	  {
		  CDC_Transmit_FS("45\n\r", 4);
 8000f22:	2104      	movs	r1, #4
 8000f24:	4826      	ldr	r0, [pc, #152]	; (8000fc0 <main+0x10c>)
 8000f26:	f008 fc8b 	bl	8009840 <CDC_Transmit_FS>
 8000f2a:	e00c      	b.n	8000f46 <main+0x92>
	  }
	  else if(pData == 0) //0
 8000f2c:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <main+0xfc>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d104      	bne.n	8000f3e <main+0x8a>
	  {
		  CDC_Transmit_FS("0\n\r", 3);
 8000f34:	2103      	movs	r1, #3
 8000f36:	4823      	ldr	r0, [pc, #140]	; (8000fc4 <main+0x110>)
 8000f38:	f008 fc82 	bl	8009840 <CDC_Transmit_FS>
 8000f3c:	e003      	b.n	8000f46 <main+0x92>
	  }
	  else
	  {
		  CDC_Transmit_FS("Err\n\r", 5);
 8000f3e:	2105      	movs	r1, #5
 8000f40:	4821      	ldr	r0, [pc, #132]	; (8000fc8 <main+0x114>)
 8000f42:	f008 fc7d 	bl	8009840 <CDC_Transmit_FS>
	  }

	  //servo control
	  if (pData == 180 || pData == 90 || pData == 45 || pData == 0){
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <main+0xfc>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2bb4      	cmp	r3, #180	; 0xb4
 8000f4c:	d00b      	beq.n	8000f66 <main+0xb2>
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <main+0xfc>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b5a      	cmp	r3, #90	; 0x5a
 8000f54:	d007      	beq.n	8000f66 <main+0xb2>
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <main+0xfc>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f5c:	d003      	beq.n	8000f66 <main+0xb2>
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <main+0xfc>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1c0      	bne.n	8000ee8 <main+0x34>
		  SERVO_PULSE_1 = pData * 2000/270 + 500;
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <main+0xfc>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <main+0x118>)
 8000f76:	fb82 1203 	smull	r1, r2, r2, r3
 8000f7a:	441a      	add	r2, r3
 8000f7c:	1212      	asrs	r2, r2, #8
 8000f7e:	17db      	asrs	r3, r3, #31
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <main+0x11c>)
 8000f90:	edc3 7a00 	vstr	s15, [r3]
		  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, SERVO_PULSE_1);
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <main+0x11c>)
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <main+0xf8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa2:	ee17 2a90 	vmov	r2, s15
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_SPI_Receive(&hspi1, &pData, sizeof(pData), HAL_MAX_DELAY);
 8000fa8:	e79e      	b.n	8000ee8 <main+0x34>
 8000faa:	bf00      	nop
 8000fac:	20000470 	.word	0x20000470
 8000fb0:	200004bc 	.word	0x200004bc
 8000fb4:	200002e0 	.word	0x200002e0
 8000fb8:	0800ca78 	.word	0x0800ca78
 8000fbc:	0800ca80 	.word	0x0800ca80
 8000fc0:	0800ca88 	.word	0x0800ca88
 8000fc4:	0800ca90 	.word	0x0800ca90
 8000fc8:	0800ca94 	.word	0x0800ca94
 8000fcc:	f2b9d649 	.word	0xf2b9d649
 8000fd0:	200004b8 	.word	0x200004b8

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	; 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f009 fde9 	bl	800abba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <SystemClock_Config+0xc8>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <SystemClock_Config+0xc8>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <SystemClock_Config+0xc8>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <SystemClock_Config+0xcc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <SystemClock_Config+0xcc>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <SystemClock_Config+0xcc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001044:	230f      	movs	r3, #15
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001048:	2390      	movs	r3, #144	; 0x90
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800104c:	2304      	movs	r3, #4
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001050:	2305      	movs	r3, #5
 8001052:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	4618      	mov	r0, r3
 800105a:	f002 feb3 	bl	8003dc4 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001064:	f000 fafa 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2101      	movs	r1, #1
 8001084:	4618      	mov	r0, r3
 8001086:	f003 f915 	bl	80042b4 <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001090:	f000 fae4 	bl	800165c <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3750      	adds	r7, #80	; 0x50
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_SPI1_Init+0x60>)
 80010aa:	2230      	movs	r2, #48	; 0x30
 80010ac:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_SPI1_Init+0x60>)
 80010b0:	4a15      	ldr	r2, [pc, #84]	; (8001108 <MX_SPI1_Init+0x64>)
 80010b2:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MX_SPI1_Init+0x60>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_SPI1_Init+0x60>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_SPI1_Init+0x60>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_SPI1_Init+0x60>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <MX_SPI1_Init+0x60>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_SPI1_Init+0x60>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <MX_SPI1_Init+0x60>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_SPI1_Init+0x60>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <MX_SPI1_Init+0x60>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_SPI1_Init+0x60>)
 80010ec:	220a      	movs	r2, #10
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	; (8001104 <MX_SPI1_Init+0x60>)
 80010f2:	f003 fadd 	bl	80046b0 <HAL_SPI_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 80010fc:	f000 faae 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200002e0 	.word	0x200002e0
 8001108:	40013000 	.word	0x40013000

0800110c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08e      	sub	sp, #56	; 0x38
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800113c:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <MX_TIM2_Init+0x128>)
 800113e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001144:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <MX_TIM2_Init+0x128>)
 8001146:	2247      	movs	r2, #71	; 0x47
 8001148:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <MX_TIM2_Init+0x128>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001150:	4b38      	ldr	r3, [pc, #224]	; (8001234 <MX_TIM2_Init+0x128>)
 8001152:	f04f 32ff 	mov.w	r2, #4294967295
 8001156:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001158:	4b36      	ldr	r3, [pc, #216]	; (8001234 <MX_TIM2_Init+0x128>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <MX_TIM2_Init+0x128>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001164:	4833      	ldr	r0, [pc, #204]	; (8001234 <MX_TIM2_Init+0x128>)
 8001166:	f003 ff37 	bl	8004fd8 <HAL_TIM_Base_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001170:	f000 fa74 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800117a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117e:	4619      	mov	r1, r3
 8001180:	482c      	ldr	r0, [pc, #176]	; (8001234 <MX_TIM2_Init+0x128>)
 8001182:	f004 fb4b 	bl	800581c <HAL_TIM_ConfigClockSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800118c:	f000 fa66 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001190:	4828      	ldr	r0, [pc, #160]	; (8001234 <MX_TIM2_Init+0x128>)
 8001192:	f003 ffd3 	bl	800513c <HAL_TIM_OC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800119c:	f000 fa5e 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011a0:	4824      	ldr	r0, [pc, #144]	; (8001234 <MX_TIM2_Init+0x128>)
 80011a2:	f004 f824 	bl	80051ee <HAL_TIM_PWM_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80011ac:	f000 fa56 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	4619      	mov	r1, r3
 80011be:	481d      	ldr	r0, [pc, #116]	; (8001234 <MX_TIM2_Init+0x128>)
 80011c0:	f004 fef4 	bl	8005fac <HAL_TIMEx_MasterConfigSynchronization>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80011ca:	f000 fa47 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2204      	movs	r2, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4813      	ldr	r0, [pc, #76]	; (8001234 <MX_TIM2_Init+0x128>)
 80011e6:	f004 f9fb 	bl	80055e0 <HAL_TIM_OC_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80011f0:	f000 fa34 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f4:	2360      	movs	r3, #96	; 0x60
 80011f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2208      	movs	r2, #8
 80011fc:	4619      	mov	r1, r3
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_TIM2_Init+0x128>)
 8001200:	f004 fa4a 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800120a:	f000 fa27 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	220c      	movs	r2, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_TIM2_Init+0x128>)
 8001216:	f004 fa3f 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001220:	f000 fa1c 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <MX_TIM2_Init+0x128>)
 8001226:	f000 fb33 	bl	8001890 <HAL_TIM_MspPostInit>

}
 800122a:	bf00      	nop
 800122c:	3738      	adds	r7, #56	; 0x38
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000398 	.word	0x20000398

08001238 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	f107 0320 	add.w	r3, r7, #32
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
 8001266:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <MX_TIM3_Init+0x13c>)
 800126a:	4a43      	ldr	r2, [pc, #268]	; (8001378 <MX_TIM3_Init+0x140>)
 800126c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800126e:	4b41      	ldr	r3, [pc, #260]	; (8001374 <MX_TIM3_Init+0x13c>)
 8001270:	2247      	movs	r2, #71	; 0x47
 8001272:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <MX_TIM3_Init+0x13c>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800127a:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <MX_TIM3_Init+0x13c>)
 800127c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001280:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <MX_TIM3_Init+0x13c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <MX_TIM3_Init+0x13c>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800128e:	4839      	ldr	r0, [pc, #228]	; (8001374 <MX_TIM3_Init+0x13c>)
 8001290:	f003 fea2 	bl	8004fd8 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800129a:	f000 f9df 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4832      	ldr	r0, [pc, #200]	; (8001374 <MX_TIM3_Init+0x13c>)
 80012ac:	f004 fab6 	bl	800581c <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012b6:	f000 f9d1 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012ba:	482e      	ldr	r0, [pc, #184]	; (8001374 <MX_TIM3_Init+0x13c>)
 80012bc:	f003 ff97 	bl	80051ee <HAL_TIM_PWM_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012c6:	f000 f9c9 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80012ca:	482a      	ldr	r0, [pc, #168]	; (8001374 <MX_TIM3_Init+0x13c>)
 80012cc:	f003 ff36 	bl	800513c <HAL_TIM_OC_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80012d6:	f000 f9c1 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	4619      	mov	r1, r3
 80012e8:	4822      	ldr	r0, [pc, #136]	; (8001374 <MX_TIM3_Init+0x13c>)
 80012ea:	f004 fe5f 	bl	8005fac <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80012f4:	f000 f9b2 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f8:	2360      	movs	r3, #96	; 0x60
 80012fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	4819      	ldr	r0, [pc, #100]	; (8001374 <MX_TIM3_Init+0x13c>)
 8001310:	f004 f9c2 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 800131a:	f000 f99f 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2204      	movs	r2, #4
 8001322:	4619      	mov	r1, r3
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <MX_TIM3_Init+0x13c>)
 8001326:	f004 f9b7 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8001330:	f000 f994 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2208      	movs	r2, #8
 8001338:	4619      	mov	r1, r3
 800133a:	480e      	ldr	r0, [pc, #56]	; (8001374 <MX_TIM3_Init+0x13c>)
 800133c:	f004 f9ac 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8001346:	f000 f989 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	220c      	movs	r2, #12
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM3_Init+0x13c>)
 8001356:	f004 f943 	bl	80055e0 <HAL_TIM_OC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8001360:	f000 f97c 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM3_Init+0x13c>)
 8001366:	f000 fa93 	bl	8001890 <HAL_TIM_MspPostInit>

}
 800136a:	bf00      	nop
 800136c:	3738      	adds	r7, #56	; 0x38
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200003e0 	.word	0x200003e0
 8001378:	40000400 	.word	0x40000400

0800137c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	f107 0320 	add.w	r3, r7, #32
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ac:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <MX_TIM4_Init+0x128>)
 80013ae:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <MX_TIM4_Init+0x12c>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <MX_TIM4_Init+0x128>)
 80013b4:	2247      	movs	r2, #71	; 0x47
 80013b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <MX_TIM4_Init+0x128>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80013be:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <MX_TIM4_Init+0x128>)
 80013c0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <MX_TIM4_Init+0x128>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <MX_TIM4_Init+0x128>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013d2:	4834      	ldr	r0, [pc, #208]	; (80014a4 <MX_TIM4_Init+0x128>)
 80013d4:	f003 fe00 	bl	8004fd8 <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80013de:	f000 f93d 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ec:	4619      	mov	r1, r3
 80013ee:	482d      	ldr	r0, [pc, #180]	; (80014a4 <MX_TIM4_Init+0x128>)
 80013f0:	f004 fa14 	bl	800581c <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80013fa:	f000 f92f 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013fe:	4829      	ldr	r0, [pc, #164]	; (80014a4 <MX_TIM4_Init+0x128>)
 8001400:	f003 fef5 	bl	80051ee <HAL_TIM_PWM_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800140a:	f000 f927 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	4619      	mov	r1, r3
 800141c:	4821      	ldr	r0, [pc, #132]	; (80014a4 <MX_TIM4_Init+0x128>)
 800141e:	f004 fdc5 	bl	8005fac <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001428:	f000 f918 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142c:	2360      	movs	r3, #96	; 0x60
 800142e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	4619      	mov	r1, r3
 8001442:	4818      	ldr	r0, [pc, #96]	; (80014a4 <MX_TIM4_Init+0x128>)
 8001444:	f004 f928 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800144e:	f000 f905 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2204      	movs	r2, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <MX_TIM4_Init+0x128>)
 800145a:	f004 f91d 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001464:	f000 f8fa 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2208      	movs	r2, #8
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_TIM4_Init+0x128>)
 8001470:	f004 f912 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800147a:	f000 f8ef 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	220c      	movs	r2, #12
 8001482:	4619      	mov	r1, r3
 8001484:	4807      	ldr	r0, [pc, #28]	; (80014a4 <MX_TIM4_Init+0x128>)
 8001486:	f004 f907 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001490:	f000 f8e4 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MX_TIM4_Init+0x128>)
 8001496:	f000 f9fb 	bl	8001890 <HAL_TIM_MspPostInit>

}
 800149a:	bf00      	nop
 800149c:	3738      	adds	r7, #56	; 0x38
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000428 	.word	0x20000428
 80014a8:	40000800 	.word	0x40000800

080014ac <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <MX_TIM9_Init+0xbc>)
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <MX_TIM9_Init+0xc0>)
 80014d6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 59;
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <MX_TIM9_Init+0xbc>)
 80014da:	223b      	movs	r2, #59	; 0x3b
 80014dc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <MX_TIM9_Init+0xbc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <MX_TIM9_Init+0xbc>)
 80014e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80014ea:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_TIM9_Init+0xbc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_TIM9_Init+0xbc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80014f8:	481b      	ldr	r0, [pc, #108]	; (8001568 <MX_TIM9_Init+0xbc>)
 80014fa:	f003 fd6d 	bl	8004fd8 <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001504:	f000 f8aa 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	4619      	mov	r1, r3
 8001514:	4814      	ldr	r0, [pc, #80]	; (8001568 <MX_TIM9_Init+0xbc>)
 8001516:	f004 f981 	bl	800581c <HAL_TIM_ConfigClockSource>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001520:	f000 f89c 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001524:	4810      	ldr	r0, [pc, #64]	; (8001568 <MX_TIM9_Init+0xbc>)
 8001526:	f003 fe62 	bl	80051ee <HAL_TIM_PWM_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001530:	f000 f894 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001534:	2360      	movs	r3, #96	; 0x60
 8001536:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	4807      	ldr	r0, [pc, #28]	; (8001568 <MX_TIM9_Init+0xbc>)
 800154c:	f004 f8a4 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001556:	f000 f881 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800155a:	4803      	ldr	r0, [pc, #12]	; (8001568 <MX_TIM9_Init+0xbc>)
 800155c:	f000 f998 	bl	8001890 <HAL_TIM_MspPostInit>

}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000470 	.word	0x20000470
 800156c:	40014000 	.word	0x40014000

08001570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_DMA_Init+0x3c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <MX_DMA_Init+0x3c>)
 8001580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_DMA_Init+0x3c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2038      	movs	r0, #56	; 0x38
 8001598:	f000 fd2c 	bl	8001ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800159c:	2038      	movs	r0, #56	; 0x38
 800159e:	f000 fd45 	bl	800202c <HAL_NVIC_EnableIRQ>

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <MX_GPIO_Init+0x84>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <MX_GPIO_Init+0x84>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_GPIO_Init+0x84>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_GPIO_Init+0x84>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <MX_GPIO_Init+0x84>)
 80015dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_GPIO_Init+0x84>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_GPIO_Init+0x84>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <MX_GPIO_Init+0x84>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <MX_GPIO_Init+0x84>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_GPIO_Init+0x84>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <MX_GPIO_Init+0x84>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_GPIO_Init+0x84>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800164a:	f000 fbd7 	bl	8001dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40000c00 	.word	0x40000c00

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	e7fe      	b.n	8001664 <Error_Handler+0x8>
	...

08001668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_MspInit+0x4c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a38      	ldr	r2, [pc, #224]	; (80017b8 <HAL_SPI_MspInit+0x100>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d169      	bne.n	80017ae <HAL_SPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_SPI_MspInit+0x104>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a36      	ldr	r2, [pc, #216]	; (80017bc <HAL_SPI_MspInit+0x104>)
 80016e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_SPI_MspInit+0x104>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_SPI_MspInit+0x104>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a2f      	ldr	r2, [pc, #188]	; (80017bc <HAL_SPI_MspInit+0x104>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <HAL_SPI_MspInit+0x104>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001712:	2310      	movs	r3, #16
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171a:	2301      	movs	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001722:	2305      	movs	r3, #5
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4824      	ldr	r0, [pc, #144]	; (80017c0 <HAL_SPI_MspInit+0x108>)
 800172e:	f000 ff75 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001732:	23e0      	movs	r3, #224	; 0xe0
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001742:	2305      	movs	r3, #5
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	481c      	ldr	r0, [pc, #112]	; (80017c0 <HAL_SPI_MspInit+0x108>)
 800174e:	f000 ff65 	bl	800261c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 8001754:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <HAL_SPI_MspInit+0x110>)
 8001756:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 800175a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800175e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 800176e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001772:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001792:	480c      	ldr	r0, [pc, #48]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 8001794:	f000 fc58 	bl	8002048 <HAL_DMA_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 800179e:	f7ff ff5d 	bl	800165c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 80017a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_SPI_MspInit+0x10c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	; 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40013000 	.word	0x40013000
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	20000338 	.word	0x20000338
 80017c8:	40026410 	.word	0x40026410

080017cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017dc:	d10e      	bne.n	80017fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	4b27      	ldr	r3, [pc, #156]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a26      	ldr	r2, [pc, #152]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b24      	ldr	r3, [pc, #144]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80017fa:	e03a      	b.n	8001872 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a20      	ldr	r2, [pc, #128]	; (8001884 <HAL_TIM_Base_MspInit+0xb8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10e      	bne.n	8001824 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
}
 8001822:	e026      	b.n	8001872 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_TIM_Base_MspInit+0xbc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10e      	bne.n	800184c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
}
 800184a:	e012      	b.n	8001872 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0e      	ldr	r2, [pc, #56]	; (800188c <HAL_TIM_Base_MspInit+0xc0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10d      	bne.n	8001872 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_TIM_Base_MspInit+0xb4>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
}
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40000400 	.word	0x40000400
 8001888:	40000800 	.word	0x40000800
 800188c:	40014000 	.word	0x40014000

08001890 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b0:	d13d      	bne.n	800192e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a55      	ldr	r2, [pc, #340]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	4b4f      	ldr	r3, [pc, #316]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a4e      	ldr	r2, [pc, #312]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Leg2_Rev2_Pin|Leg2_Rev4_Pin;
 80018ea:	230a      	movs	r3, #10
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018fa:	2301      	movs	r3, #1
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	4843      	ldr	r0, [pc, #268]	; (8001a14 <HAL_TIM_MspPostInit+0x184>)
 8001906:	f000 fe89 	bl	800261c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Leg2_Rev3_Pin;
 800190a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800191c:	2301      	movs	r3, #1
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Leg2_Rev3_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	483c      	ldr	r0, [pc, #240]	; (8001a18 <HAL_TIM_MspPostInit+0x188>)
 8001928:	f000 fe78 	bl	800261c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800192c:	e06b      	b.n	8001a06 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM3)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a3a      	ldr	r2, [pc, #232]	; (8001a1c <HAL_TIM_MspPostInit+0x18c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d11e      	bne.n	8001976 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4a33      	ldr	r2, [pc, #204]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	6313      	str	r3, [r2, #48]	; 0x30
 8001948:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Leg3_Rev2_Pin|Leg3_Rev3_Pin|Leg3_Rev1_Pin|Leg3_Rev4_Pin;
 8001954:	2333      	movs	r3, #51	; 0x33
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001964:	2302      	movs	r3, #2
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	482a      	ldr	r0, [pc, #168]	; (8001a18 <HAL_TIM_MspPostInit+0x188>)
 8001970:	f000 fe54 	bl	800261c <HAL_GPIO_Init>
}
 8001974:	e047      	b.n	8001a06 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a29      	ldr	r2, [pc, #164]	; (8001a20 <HAL_TIM_MspPostInit+0x190>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d11f      	bne.n	80019c0 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4a21      	ldr	r2, [pc, #132]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	6313      	str	r3, [r2, #48]	; 0x30
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Leg1_Rev1_Pin|Leg1_Rev2_Pin|Leg1_Rev3_Pin|Leg1_Rev4_Pin;
 800199c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019ae:	2302      	movs	r3, #2
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	4817      	ldr	r0, [pc, #92]	; (8001a18 <HAL_TIM_MspPostInit+0x188>)
 80019ba:	f000 fe2f 	bl	800261c <HAL_GPIO_Init>
}
 80019be:	e022      	b.n	8001a06 <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM9)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_TIM_MspPostInit+0x194>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d11d      	bne.n	8001a06 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_TIM_MspPostInit+0x180>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Leg2_Rev1_Pin;
 80019e6:	2304      	movs	r3, #4
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80019f6:	2303      	movs	r3, #3
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Leg2_Rev1_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <HAL_TIM_MspPostInit+0x184>)
 8001a02:	f000 fe0b 	bl	800261c <HAL_GPIO_Init>
}
 8001a06:	bf00      	nop
 8001a08:	3730      	adds	r7, #48	; 0x30
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40000800 	.word	0x40000800
 8001a24:	40014000 	.word	0x40014000

08001a28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08e      	sub	sp, #56	; 0x38
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <HAL_InitTick+0xe4>)
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	4a32      	ldr	r2, [pc, #200]	; (8001b0c <HAL_InitTick+0xe4>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	6413      	str	r3, [r2, #64]	; 0x40
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_InitTick+0xe4>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a54:	f107 0210 	add.w	r2, r7, #16
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 fdf4 	bl	800464c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d103      	bne.n	8001a76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a6e:	f002 fdd9 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8001a72:	6378      	str	r0, [r7, #52]	; 0x34
 8001a74:	e004      	b.n	8001a80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a76:	f002 fdd5 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a82:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <HAL_InitTick+0xe8>)
 8001a84:	fba2 2303 	umull	r2, r3, r2, r3
 8001a88:	0c9b      	lsrs	r3, r3, #18
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_InitTick+0xec>)
 8001a90:	4a21      	ldr	r2, [pc, #132]	; (8001b18 <HAL_InitTick+0xf0>)
 8001a92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_InitTick+0xec>)
 8001a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_InitTick+0xec>)
 8001a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <HAL_InitTick+0xec>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <HAL_InitTick+0xec>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_InitTick+0xec>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001ab4:	4817      	ldr	r0, [pc, #92]	; (8001b14 <HAL_InitTick+0xec>)
 8001ab6:	f003 fa8f 	bl	8004fd8 <HAL_TIM_Base_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ac0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11b      	bne.n	8001b00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001ac8:	4812      	ldr	r0, [pc, #72]	; (8001b14 <HAL_InitTick+0xec>)
 8001aca:	f003 fad5 	bl	8005078 <HAL_TIM_Base_Start_IT>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d111      	bne.n	8001b00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001adc:	2032      	movs	r0, #50	; 0x32
 8001ade:	f000 faa5 	bl	800202c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b0f      	cmp	r3, #15
 8001ae6:	d808      	bhi.n	8001afa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	2032      	movs	r0, #50	; 0x32
 8001aee:	f000 fa81 	bl	8001ff4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_InitTick+0xf4>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e002      	b.n	8001b00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3738      	adds	r7, #56	; 0x38
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	431bde83 	.word	0x431bde83
 8001b14:	200004c0 	.word	0x200004c0
 8001b18:	40000c00 	.word	0x40000c00
 8001b1c:	20000004 	.word	0x20000004

08001b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b24:	e7fe      	b.n	8001b24 <NMI_Handler+0x4>

08001b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <HardFault_Handler+0x4>

08001b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <MemManage_Handler+0x4>

08001b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <TIM5_IRQHandler+0x10>)
 8001b7e:	f003 fc3f 	bl	8005400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200004c0 	.word	0x200004c0

08001b8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <DMA2_Stream0_IRQHandler+0x10>)
 8001b92:	f000 fb07 	bl	80021a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000338 	.word	0x20000338

08001ba0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <OTG_FS_IRQHandler+0x10>)
 8001ba6:	f001 f801 	bl	8002bac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200019f0 	.word	0x200019f0

08001bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return 1;
 8001bb8:	2301      	movs	r3, #1
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <_kill>:

int _kill(int pid, int sig)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bce:	f009 f847 	bl	800ac60 <__errno>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2216      	movs	r2, #22
 8001bd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_exit>:

void _exit (int status)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ffe7 	bl	8001bc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf6:	e7fe      	b.n	8001bf6 <_exit+0x12>

08001bf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e00a      	b.n	8001c20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0a:	f3af 8000 	nop.w
 8001c0e:	4601      	mov	r1, r0
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	60ba      	str	r2, [r7, #8]
 8001c16:	b2ca      	uxtb	r2, r1
 8001c18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dbf0      	blt.n	8001c0a <_read+0x12>
  }

  return len;
 8001c28:	687b      	ldr	r3, [r7, #4]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e009      	b.n	8001c58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf1      	blt.n	8001c44 <_write+0x12>
  }
  return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_close>:

int _close(int file)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c92:	605a      	str	r2, [r3, #4]
  return 0;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_isatty>:

int _isatty(int file)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f008 ffac 	bl	800ac60 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20020000 	.word	0x20020000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	20000508 	.word	0x20000508
 8001d3c:	20002240 	.word	0x20002240

08001d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d68:	f7ff ffea 	bl	8001d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	; (8001da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	; (8001db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d92:	f008 ff6b 	bl	800ac6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d96:	f7ff f88d 	bl	8000eb4 <main>
  bx  lr    
 8001d9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001da8:	0800ce84 	.word	0x0800ce84
  ldr r2, =_sbss
 8001dac:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001db0:	20002240 	.word	0x20002240

08001db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <HAL_Init+0x40>)
 8001dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_Init+0x40>)
 8001dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <HAL_Init+0x40>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 f8fc 	bl	8001fde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de6:	200f      	movs	r0, #15
 8001de8:	f7ff fe1e 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dec:	f7ff fc3c 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	2000050c 	.word	0x2000050c

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	2000050c 	.word	0x2000050c

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db0b      	blt.n	8001f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	4907      	ldr	r1, [pc, #28]	; (8001f20 <__NVIC_EnableIRQ+0x38>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000e100 	.word	0xe000e100

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ff4c 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002006:	f7ff ff61 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 800200a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	6978      	ldr	r0, [r7, #20]
 8002012:	f7ff ffb1 	bl	8001f78 <NVIC_EncodePriority>
 8002016:	4602      	mov	r2, r0
 8002018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff80 	bl	8001f24 <__NVIC_SetPriority>
}
 8002024:	bf00      	nop
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff54 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fee6 	bl	8001e24 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e099      	b.n	8002198 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002084:	e00f      	b.n	80020a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002086:	f7ff fecd 	bl	8001e24 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b05      	cmp	r3, #5
 8002092:	d908      	bls.n	80020a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2220      	movs	r2, #32
 8002098:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2203      	movs	r2, #3
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e078      	b.n	8002198 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1e8      	bne.n	8002086 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_DMA_Init+0x158>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d107      	bne.n	8002110 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	4313      	orrs	r3, r2
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f023 0307 	bic.w	r3, r3, #7
 8002126:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	2b04      	cmp	r3, #4
 8002138:	d117      	bne.n	800216a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00e      	beq.n	800216a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f9e9 	bl	8002524 <DMA_CheckFifoParam>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002166:	2301      	movs	r3, #1
 8002168:	e016      	b.n	8002198 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f9a0 	bl	80024b8 <DMA_CalcBaseAndBitshift>
 8002178:	4603      	mov	r3, r0
 800217a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	223f      	movs	r2, #63	; 0x3f
 8002182:	409a      	lsls	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	f010803f 	.word	0xf010803f

080021a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021b0:	4b8e      	ldr	r3, [pc, #568]	; (80023ec <HAL_DMA_IRQHandler+0x248>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a8e      	ldr	r2, [pc, #568]	; (80023f0 <HAL_DMA_IRQHandler+0x24c>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0a9b      	lsrs	r3, r3, #10
 80021bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	2208      	movs	r2, #8
 80021d0:	409a      	lsls	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01a      	beq.n	8002210 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fc:	2208      	movs	r2, #8
 80021fe:	409a      	lsls	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	2201      	movs	r2, #1
 8002216:	409a      	lsls	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d012      	beq.n	8002246 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2201      	movs	r2, #1
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	f043 0202 	orr.w	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2204      	movs	r2, #4
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d012      	beq.n	800227c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	2204      	movs	r2, #4
 800226a:	409a      	lsls	r2, r3
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	f043 0204 	orr.w	r2, r3, #4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	2210      	movs	r2, #16
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4013      	ands	r3, r2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d043      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d03c      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	2210      	movs	r2, #16
 80022a0:	409a      	lsls	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d018      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d024      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
 80022d2:	e01f      	b.n	8002314 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01b      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
 80022e4:	e016      	b.n	8002314 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0208 	bic.w	r2, r2, #8
 8002302:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	2220      	movs	r2, #32
 800231a:	409a      	lsls	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 808f 	beq.w	8002444 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8087 	beq.w	8002444 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	2220      	movs	r2, #32
 800233c:	409a      	lsls	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b05      	cmp	r3, #5
 800234c:	d136      	bne.n	80023bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0216 	bic.w	r2, r2, #22
 800235c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800236c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_DMA_IRQHandler+0x1da>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0208 	bic.w	r2, r2, #8
 800238c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	223f      	movs	r2, #63	; 0x3f
 8002394:	409a      	lsls	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d07e      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	4798      	blx	r3
        }
        return;
 80023ba:	e079      	b.n	80024b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d01d      	beq.n	8002406 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d031      	beq.n	8002444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e02c      	b.n	8002444 <HAL_DMA_IRQHandler+0x2a0>
 80023ea:	bf00      	nop
 80023ec:	20000000 	.word	0x20000000
 80023f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d023      	beq.n	8002444 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
 8002404:	e01e      	b.n	8002444 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10f      	bne.n	8002434 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0210 	bic.w	r2, r2, #16
 8002422:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002448:	2b00      	cmp	r3, #0
 800244a:	d032      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d022      	beq.n	800249e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2205      	movs	r2, #5
 800245c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	3301      	adds	r3, #1
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	d307      	bcc.n	800248c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f2      	bne.n	8002470 <HAL_DMA_IRQHandler+0x2cc>
 800248a:	e000      	b.n	800248e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800248c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	4798      	blx	r3
 80024ae:	e000      	b.n	80024b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024b0:	bf00      	nop
    }
  }
}
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	3b10      	subs	r3, #16
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <DMA_CalcBaseAndBitshift+0x64>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024d2:	4a13      	ldr	r2, [pc, #76]	; (8002520 <DMA_CalcBaseAndBitshift+0x68>)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d909      	bls.n	80024fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	1d1a      	adds	r2, r3, #4
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	659a      	str	r2, [r3, #88]	; 0x58
 80024f8:	e007      	b.n	800250a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002502:	f023 0303 	bic.w	r3, r3, #3
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	aaaaaaab 	.word	0xaaaaaaab
 8002520:	0800cafc 	.word	0x0800cafc

08002524 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11f      	bne.n	800257e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d856      	bhi.n	80025f2 <DMA_CheckFifoParam+0xce>
 8002544:	a201      	add	r2, pc, #4	; (adr r2, 800254c <DMA_CheckFifoParam+0x28>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	0800255d 	.word	0x0800255d
 8002550:	0800256f 	.word	0x0800256f
 8002554:	0800255d 	.word	0x0800255d
 8002558:	080025f3 	.word	0x080025f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d046      	beq.n	80025f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800256c:	e043      	b.n	80025f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002576:	d140      	bne.n	80025fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257c:	e03d      	b.n	80025fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002586:	d121      	bne.n	80025cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d837      	bhi.n	80025fe <DMA_CheckFifoParam+0xda>
 800258e:	a201      	add	r2, pc, #4	; (adr r2, 8002594 <DMA_CheckFifoParam+0x70>)
 8002590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002594:	080025a5 	.word	0x080025a5
 8002598:	080025ab 	.word	0x080025ab
 800259c:	080025a5 	.word	0x080025a5
 80025a0:	080025bd 	.word	0x080025bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      break;
 80025a8:	e030      	b.n	800260c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d025      	beq.n	8002602 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ba:	e022      	b.n	8002602 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c4:	d11f      	bne.n	8002606 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ca:	e01c      	b.n	8002606 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d903      	bls.n	80025da <DMA_CheckFifoParam+0xb6>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d003      	beq.n	80025e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025d8:	e018      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      break;
 80025de:	e015      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00e      	beq.n	800260a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
      break;
 80025f0:	e00b      	b.n	800260a <DMA_CheckFifoParam+0xe6>
      break;
 80025f2:	bf00      	nop
 80025f4:	e00a      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
 80025f8:	e008      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e006      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
 8002600:	e004      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 8002602:	bf00      	nop
 8002604:	e002      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;   
 8002606:	bf00      	nop
 8002608:	e000      	b.n	800260c <DMA_CheckFifoParam+0xe8>
      break;
 800260a:	bf00      	nop
    }
  } 
  
  return status; 
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop

0800261c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e159      	b.n	80028ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002638:	2201      	movs	r2, #1
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 8148 	bne.w	80028e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d005      	beq.n	800266e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266a:	2b02      	cmp	r3, #2
 800266c:	d130      	bne.n	80026d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a4:	2201      	movs	r2, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 0201 	and.w	r2, r3, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d017      	beq.n	800270c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d123      	bne.n	8002760 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	08da      	lsrs	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3208      	adds	r2, #8
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0203 	and.w	r2, r3, #3
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80a2 	beq.w	80028e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	4b57      	ldr	r3, [pc, #348]	; (8002904 <HAL_GPIO_Init+0x2e8>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a56      	ldr	r2, [pc, #344]	; (8002904 <HAL_GPIO_Init+0x2e8>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b54      	ldr	r3, [pc, #336]	; (8002904 <HAL_GPIO_Init+0x2e8>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027be:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_GPIO_Init+0x2ec>)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3302      	adds	r3, #2
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	220f      	movs	r2, #15
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a49      	ldr	r2, [pc, #292]	; (800290c <HAL_GPIO_Init+0x2f0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d019      	beq.n	800281e <HAL_GPIO_Init+0x202>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a48      	ldr	r2, [pc, #288]	; (8002910 <HAL_GPIO_Init+0x2f4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_GPIO_Init+0x1fe>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a47      	ldr	r2, [pc, #284]	; (8002914 <HAL_GPIO_Init+0x2f8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00d      	beq.n	8002816 <HAL_GPIO_Init+0x1fa>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a46      	ldr	r2, [pc, #280]	; (8002918 <HAL_GPIO_Init+0x2fc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <HAL_GPIO_Init+0x1f6>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a45      	ldr	r2, [pc, #276]	; (800291c <HAL_GPIO_Init+0x300>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_GPIO_Init+0x1f2>
 800280a:	2304      	movs	r3, #4
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x204>
 800280e:	2307      	movs	r3, #7
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x204>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x204>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x204>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x204>
 800281e:	2300      	movs	r3, #0
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	; (8002908 <HAL_GPIO_Init+0x2ec>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b38      	ldr	r3, [pc, #224]	; (8002920 <HAL_GPIO_Init+0x304>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a2f      	ldr	r2, [pc, #188]	; (8002920 <HAL_GPIO_Init+0x304>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_GPIO_Init+0x304>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a24      	ldr	r2, [pc, #144]	; (8002920 <HAL_GPIO_Init+0x304>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <HAL_GPIO_Init+0x304>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_GPIO_Init+0x304>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_GPIO_Init+0x304>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e0:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_GPIO_Init+0x304>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f67f aea2 	bls.w	8002638 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af02      	add	r7, sp, #8
 800292a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e101      	b.n	8002b3a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d106      	bne.n	8002956 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f007 f8bd 	bl	8009ad0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2203      	movs	r2, #3
 800295a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002964:	d102      	bne.n	800296c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f003 fcb4 	bl	80062de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7c1a      	ldrb	r2, [r3, #16]
 800297e:	f88d 2000 	strb.w	r2, [sp]
 8002982:	3304      	adds	r3, #4
 8002984:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002986:	f003 fb93 	bl	80060b0 <USB_CoreInit>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0ce      	b.n	8002b3a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fcac 	bl	8006300 <USB_SetCurrentMode>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0bf      	b.n	8002b3a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e04a      	b.n	8002a56 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3315      	adds	r3, #21
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3314      	adds	r3, #20
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	b298      	uxth	r0, r3
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	332e      	adds	r3, #46	; 0x2e
 80029fc:	4602      	mov	r2, r0
 80029fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3318      	adds	r3, #24
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	331c      	adds	r3, #28
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3320      	adds	r3, #32
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	3324      	adds	r3, #36	; 0x24
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	3301      	adds	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	791b      	ldrb	r3, [r3, #4]
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d3af      	bcc.n	80029c0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	e044      	b.n	8002af0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	3301      	adds	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	791b      	ldrb	r3, [r3, #4]
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3b5      	bcc.n	8002a66 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7c1a      	ldrb	r2, [r3, #16]
 8002b02:	f88d 2000 	strb.w	r2, [sp]
 8002b06:	3304      	adds	r3, #4
 8002b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b0a:	f003 fc45 	bl	8006398 <USB_DevInit>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e00c      	b.n	8002b3a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 fc89 	bl	800744a <USB_DevDisconnect>

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_PCD_Start+0x1c>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e022      	b.n	8002ba4 <HAL_PCD_Start+0x62>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d105      	bne.n	8002b86 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f003 fb96 	bl	80062bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f004 fc37 	bl	8007408 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b08d      	sub	sp, #52	; 0x34
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f004 fcf5 	bl	80075b2 <USB_GetMode>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f040 848c 	bne.w	80034e8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 fc59 	bl	800748c <USB_ReadInterrupts>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8482 	beq.w	80034e6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f004 fc46 	bl	800748c <USB_ReadInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d107      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 0202 	and.w	r2, r2, #2
 8002c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 fc34 	bl	800748c <USB_ReadInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b10      	cmp	r3, #16
 8002c2c:	d161      	bne.n	8002cf2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0210 	bic.w	r2, r2, #16
 8002c3c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f003 020f 	and.w	r2, r3, #15
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	0c5b      	lsrs	r3, r3, #17
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d124      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d035      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	6a38      	ldr	r0, [r7, #32]
 8002c8a:	f004 fa6b 	bl	8007164 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c9a:	441a      	add	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cac:	441a      	add	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	615a      	str	r2, [r3, #20]
 8002cb2:	e016      	b.n	8002ce2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	0c5b      	lsrs	r3, r3, #17
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	2b06      	cmp	r3, #6
 8002cbe:	d110      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6a38      	ldr	r0, [r7, #32]
 8002ccc:	f004 fa4a 	bl	8007164 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cdc:	441a      	add	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0210 	orr.w	r2, r2, #16
 8002cf0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 fbc8 	bl	800748c <USB_ReadInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d06:	f040 80a7 	bne.w	8002e58 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f004 fbcd 	bl	80074b2 <USB_ReadDevAllOutEpInterrupt>
 8002d18:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d1a:	e099      	b.n	8002e50 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 808e 	beq.w	8002e44 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 fbf1 	bl	800751a <USB_ReadDevOutEPInterrupt>
 8002d38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00c      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d50:	461a      	mov	r2, r3
 8002d52:	2301      	movs	r3, #1
 8002d54:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fea1 	bl	8003aa0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00c      	beq.n	8002d82 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d74:	461a      	mov	r2, r3
 8002d76:	2308      	movs	r3, #8
 8002d78:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 ff77 	bl	8003c70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d030      	beq.n	8002e0a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d109      	bne.n	8002dc8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	3304      	adds	r3, #4
 8002ddc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	78db      	ldrb	r3, [r3, #3]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d108      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f006 ff68 	bl	8009cc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e04:	461a      	mov	r2, r3
 8002e06:	2302      	movs	r3, #2
 8002e08:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e20:	461a      	mov	r2, r3
 8002e22:	2320      	movs	r3, #32
 8002e24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e42:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	3301      	adds	r3, #1
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	085b      	lsrs	r3, r3, #1
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f47f af62 	bne.w	8002d1c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 fb15 	bl	800748c <USB_ReadInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e6c:	f040 80db 	bne.w	8003026 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 fb36 	bl	80074e6 <USB_ReadDevAllInEpInterrupt>
 8002e7a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e80:	e0cd      	b.n	800301e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80c2 	beq.w	8003012 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 fb5c 	bl	8007556 <USB_ReadDevInEPInterrupt>
 8002e9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d057      	beq.n	8002f5a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69f9      	ldr	r1, [r7, #28]
 8002ec6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002eca:	4013      	ands	r3, r2
 8002ecc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eda:	461a      	mov	r2, r3
 8002edc:	2301      	movs	r3, #1
 8002ede:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	799b      	ldrb	r3, [r3, #6]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d132      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	3320      	adds	r3, #32
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4403      	add	r3, r0
 8002f08:	331c      	adds	r3, #28
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4419      	add	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4403      	add	r3, r0
 8002f1c:	3320      	adds	r3, #32
 8002f1e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d113      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x3a2>
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3324      	adds	r3, #36	; 0x24
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d108      	bne.n	8002f4e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002f46:	461a      	mov	r2, r3
 8002f48:	2101      	movs	r1, #1
 8002f4a:	f004 fb63 	bl	8007614 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4619      	mov	r1, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f006 fe3c 	bl	8009bd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f70:	461a      	mov	r2, r3
 8002f72:	2308      	movs	r3, #8
 8002f74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	015a      	lsls	r2, r3, #5
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4413      	add	r3, r2
 8002f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2310      	movs	r3, #16
 8002f90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa8:	461a      	mov	r2, r3
 8002faa:	2340      	movs	r3, #64	; 0x40
 8002fac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d023      	beq.n	8003000 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fba:	6a38      	ldr	r0, [r7, #32]
 8002fbc:	f003 fb50 	bl	8006660 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3310      	adds	r3, #16
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	78db      	ldrb	r3, [r3, #3]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d108      	bne.n	8002fee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f006 fe7f 	bl	8009cec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800300a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fcbb 	bl	8003988 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	3301      	adds	r3, #1
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	f47f af2e 	bne.w	8002e82 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fa2e 	bl	800748c <USB_ReadInterrupts>
 8003030:	4603      	mov	r3, r0
 8003032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800303a:	d122      	bne.n	8003082 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003056:	2b01      	cmp	r3, #1
 8003058:	d108      	bne.n	800306c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003062:	2100      	movs	r1, #0
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fea1 	bl	8003dac <HAL_PCDEx_LPM_Callback>
 800306a:	e002      	b.n	8003072 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f006 fe1d 	bl	8009cac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f004 fa00 	bl	800748c <USB_ReadInterrupts>
 800308c:	4603      	mov	r3, r0
 800308e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003096:	d112      	bne.n	80030be <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d102      	bne.n	80030ae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f006 fdd9 	bl	8009c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030bc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f004 f9e2 	bl	800748c <USB_ReadInterrupts>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d2:	f040 80b7 	bne.w	8003244 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2110      	movs	r1, #16
 80030f0:	4618      	mov	r0, r3
 80030f2:	f003 fab5 	bl	8006660 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030fa:	e046      	b.n	800318a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003108:	461a      	mov	r2, r3
 800310a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800310e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003120:	0151      	lsls	r1, r2, #5
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	440a      	add	r2, r1
 8003126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800312a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800312e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313c:	461a      	mov	r2, r3
 800313e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003142:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003154:	0151      	lsls	r1, r2, #5
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	440a      	add	r2, r1
 800315a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800315e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003162:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003174:	0151      	lsls	r1, r2, #5
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	440a      	add	r2, r1
 800317a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800317e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003182:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	3301      	adds	r3, #1
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	791b      	ldrb	r3, [r3, #4]
 800318e:	461a      	mov	r2, r3
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	4293      	cmp	r3, r2
 8003194:	d3b2      	bcc.n	80030fc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80031a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7bdb      	ldrb	r3, [r3, #15]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c2:	f043 030b 	orr.w	r3, r3, #11
 80031c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d8:	f043 030b 	orr.w	r3, r3, #11
 80031dc:	6453      	str	r3, [r2, #68]	; 0x44
 80031de:	e015      	b.n	800320c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003206:	f043 030b 	orr.w	r3, r3, #11
 800320a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800321a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800321e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800322e:	461a      	mov	r2, r3
 8003230:	f004 f9f0 	bl	8007614 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003242:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f004 f91f 	bl	800748c <USB_ReadInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003258:	d123      	bne.n	80032a2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f004 f9b5 	bl	80075ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f003 fa72 	bl	8006752 <USB_GetDevSpeed>
 800326e:	4603      	mov	r3, r0
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681c      	ldr	r4, [r3, #0]
 800327a:	f001 f9c7 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800327e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003284:	461a      	mov	r2, r3
 8003286:	4620      	mov	r0, r4
 8003288:	f002 ff76 	bl	8006178 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f006 fcc8 	bl	8009c22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 f8f0 	bl	800748c <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d10a      	bne.n	80032cc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f006 fca5 	bl	8009c06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f002 0208 	and.w	r2, r2, #8
 80032ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f004 f8db 	bl	800748c <USB_ReadInterrupts>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032dc:	2b80      	cmp	r3, #128	; 0x80
 80032de:	d123      	bne.n	8003328 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032ec:	2301      	movs	r3, #1
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
 80032f0:	e014      	b.n	800331c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d105      	bne.n	8003316 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	b2db      	uxtb	r3, r3
 800330e:	4619      	mov	r1, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fb08 	bl	8003926 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	3301      	adds	r3, #1
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	791b      	ldrb	r3, [r3, #4]
 8003320:	461a      	mov	r2, r3
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	4293      	cmp	r3, r2
 8003326:	d3e4      	bcc.n	80032f2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f004 f8ad 	bl	800748c <USB_ReadInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333c:	d13c      	bne.n	80033b8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800333e:	2301      	movs	r3, #1
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	e02b      	b.n	800339c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	3318      	adds	r3, #24
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d115      	bne.n	8003396 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800336a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800336c:	2b00      	cmp	r3, #0
 800336e:	da12      	bge.n	8003396 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003374:	4613      	mov	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	3317      	adds	r3, #23
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800338c:	b2db      	uxtb	r3, r3
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fac8 	bl	8003926 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	3301      	adds	r3, #1
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	791b      	ldrb	r3, [r3, #4]
 80033a0:	461a      	mov	r2, r3
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d3cd      	bcc.n	8003344 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4618      	mov	r0, r3
 80033be:	f004 f865 	bl	800748c <USB_ReadInterrupts>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033cc:	d156      	bne.n	800347c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ce:	2301      	movs	r3, #1
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	e045      	b.n	8003460 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d12e      	bne.n	800345a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da2b      	bge.n	800345a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800340e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003412:	429a      	cmp	r2, r3
 8003414:	d121      	bne.n	800345a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003456:	6053      	str	r3, [r2, #4]
            break;
 8003458:	e008      	b.n	800346c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	3301      	adds	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	791b      	ldrb	r3, [r3, #4]
 8003464:	461a      	mov	r2, r3
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	4293      	cmp	r3, r2
 800346a:	d3b3      	bcc.n	80033d4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800347a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f004 f803 	bl	800748c <USB_ReadInterrupts>
 8003486:	4603      	mov	r3, r0
 8003488:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003490:	d10a      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f006 fc3c 	bl	8009d10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f003 ffed 	bl	800748c <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d115      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f006 fc2c 	bl	8009d2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	e000      	b.n	80034e8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80034e6:	bf00      	nop
    }
  }
}
 80034e8:	3734      	adds	r7, #52	; 0x34
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd90      	pop	{r4, r7, pc}

080034ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_PCD_SetAddress+0x1a>
 8003504:	2302      	movs	r3, #2
 8003506:	e012      	b.n	800352e <HAL_PCD_SetAddress+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f003 ff4c 	bl	80073bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	4608      	mov	r0, r1
 8003540:	4611      	mov	r1, r2
 8003542:	461a      	mov	r2, r3
 8003544:	4603      	mov	r3, r0
 8003546:	70fb      	strb	r3, [r7, #3]
 8003548:	460b      	mov	r3, r1
 800354a:	803b      	strh	r3, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003558:	2b00      	cmp	r3, #0
 800355a:	da0f      	bge.n	800357c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	3310      	adds	r3, #16
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	705a      	strb	r2, [r3, #1]
 800357a:	e00f      	b.n	800359c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f003 020f 	and.w	r2, r3, #15
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80035a8:	883a      	ldrh	r2, [r7, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	78ba      	ldrb	r2, [r7, #2]
 80035b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d004      	beq.n	80035c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035c6:	78bb      	ldrb	r3, [r7, #2]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d102      	bne.n	80035d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_PCD_EP_Open+0xaa>
 80035dc:	2302      	movs	r3, #2
 80035de:	e00e      	b.n	80035fe <HAL_PCD_EP_Open+0xc8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68f9      	ldr	r1, [r7, #12]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f003 f8d4 	bl	800679c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80035fc:	7afb      	ldrb	r3, [r7, #11]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	da0f      	bge.n	800363a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3310      	adds	r3, #16
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	3304      	adds	r3, #4
 8003630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	705a      	strb	r2, [r3, #1]
 8003638:	e00f      	b.n	800365a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	f003 020f 	and.w	r2, r3, #15
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	4413      	add	r3, r2
 8003650:	3304      	adds	r3, #4
 8003652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	b2da      	uxtb	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_PCD_EP_Close+0x6e>
 8003670:	2302      	movs	r3, #2
 8003672:	e00e      	b.n	8003692 <HAL_PCD_EP_Close+0x8c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68f9      	ldr	r1, [r7, #12]
 8003682:	4618      	mov	r0, r3
 8003684:	f003 f912 	bl	80068ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	460b      	mov	r3, r1
 80036a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036aa:	7afb      	ldrb	r3, [r7, #11]
 80036ac:	f003 020f 	and.w	r2, r3, #15
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	3304      	adds	r3, #4
 80036c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2200      	movs	r2, #0
 80036d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036dc:	7afb      	ldrb	r3, [r7, #11]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	799b      	ldrb	r3, [r3, #6]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d102      	bne.n	80036f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	799b      	ldrb	r3, [r3, #6]
 80036fe:	461a      	mov	r2, r3
 8003700:	6979      	ldr	r1, [r7, #20]
 8003702:	f003 f9af 	bl	8006a64 <USB_EPStartXfer>

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	f003 020f 	and.w	r2, r3, #15
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003732:	681b      	ldr	r3, [r3, #0]
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	460b      	mov	r3, r1
 800374e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003750:	7afb      	ldrb	r3, [r7, #11]
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3310      	adds	r3, #16
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2200      	movs	r2, #0
 8003778:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2201      	movs	r2, #1
 800377e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003780:	7afb      	ldrb	r3, [r7, #11]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	b2da      	uxtb	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	799b      	ldrb	r3, [r3, #6]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d102      	bne.n	800379a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	799b      	ldrb	r3, [r3, #6]
 80037a2:	461a      	mov	r2, r3
 80037a4:	6979      	ldr	r1, [r7, #20]
 80037a6:	f003 f95d 	bl	8006a64 <USB_EPStartXfer>

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	7912      	ldrb	r2, [r2, #4]
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e04f      	b.n	8003872 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	da0f      	bge.n	80037fa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	3310      	adds	r3, #16
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	3304      	adds	r3, #4
 80037f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	705a      	strb	r2, [r3, #1]
 80037f8:	e00d      	b.n	8003816 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	3304      	adds	r3, #4
 800380e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800381c:	78fb      	ldrb	r3, [r7, #3]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	b2da      	uxtb	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_PCD_EP_SetStall+0x82>
 8003832:	2302      	movs	r3, #2
 8003834:	e01d      	b.n	8003872 <HAL_PCD_EP_SetStall+0xbe>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68f9      	ldr	r1, [r7, #12]
 8003844:	4618      	mov	r0, r3
 8003846:	f003 fce5 	bl	8007214 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7999      	ldrb	r1, [r3, #6]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003862:	461a      	mov	r2, r3
 8003864:	f003 fed6 	bl	8007614 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	7912      	ldrb	r2, [r2, #4]
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e042      	b.n	800391e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800389c:	2b00      	cmp	r3, #0
 800389e:	da0f      	bge.n	80038c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 020f 	and.w	r2, r3, #15
 80038a6:	4613      	mov	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3310      	adds	r3, #16
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4413      	add	r3, r2
 80038b4:	3304      	adds	r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2201      	movs	r2, #1
 80038bc:	705a      	strb	r2, [r3, #1]
 80038be:	e00f      	b.n	80038e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	3304      	adds	r3, #4
 80038d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_PCD_EP_ClrStall+0x86>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e00e      	b.n	800391e <HAL_PCD_EP_ClrStall+0xa4>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68f9      	ldr	r1, [r7, #12]
 800390e:	4618      	mov	r0, r3
 8003910:	f003 fcee 	bl	80072f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	460b      	mov	r3, r1
 8003930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	da0c      	bge.n	8003954 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 020f 	and.w	r2, r3, #15
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	3310      	adds	r3, #16
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	3304      	adds	r3, #4
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e00c      	b.n	800396e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	f003 020f 	and.w	r2, r3, #15
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	3304      	adds	r3, #4
 800396c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	4618      	mov	r0, r3
 8003976:	f003 fb0d 	bl	8006f94 <USB_EPStopXfer>
 800397a:	4603      	mov	r3, r0
 800397c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800397e:	7afb      	ldrb	r3, [r7, #11]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af02      	add	r7, sp, #8
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	3310      	adds	r3, #16
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	3304      	adds	r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d901      	bls.n	80039c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e06b      	b.n	8003a98 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d902      	bls.n	80039dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3303      	adds	r3, #3
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039e4:	e02a      	b.n	8003a3c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d902      	bls.n	8003a02 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3303      	adds	r3, #3
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68d9      	ldr	r1, [r3, #12]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	6978      	ldr	r0, [r7, #20]
 8003a20:	f003 fb62 	bl	80070e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	441a      	add	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	441a      	add	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d809      	bhi.n	8003a66 <PCD_WriteEmptyTxFifo+0xde>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d203      	bcs.n	8003a66 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1bf      	bne.n	80039e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d811      	bhi.n	8003a96 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	2201      	movs	r2, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	6939      	ldr	r1, [r7, #16]
 8003a8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a92:	4013      	ands	r3, r2
 8003a94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	333c      	adds	r3, #60	; 0x3c
 8003ab8:	3304      	adds	r3, #4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	799b      	ldrb	r3, [r3, #6]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d17b      	bne.n	8003bce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d015      	beq.n	8003b0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	4a61      	ldr	r2, [pc, #388]	; (8003c68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	f240 80b9 	bls.w	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80b3 	beq.w	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	461a      	mov	r2, r3
 8003b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b08:	6093      	str	r3, [r2, #8]
 8003b0a:	e0a7      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	461a      	mov	r2, r3
 8003b24:	2320      	movs	r3, #32
 8003b26:	6093      	str	r3, [r2, #8]
 8003b28:	e098      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 8093 	bne.w	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	4a4b      	ldr	r2, [pc, #300]	; (8003c68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d90f      	bls.n	8003b5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	461a      	mov	r2, r3
 8003b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5a:	6093      	str	r3, [r2, #8]
 8003b5c:	e07e      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3304      	adds	r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	0159      	lsls	r1, r3, #5
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	440b      	add	r3, r1
 8003b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d114      	bne.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2101      	movs	r1, #1
 8003bac:	f003 fd32 	bl	8007614 <USB_EP0_OutStart>
 8003bb0:	e006      	b.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f005 ffe8 	bl	8009b9c <HAL_PCD_DataOutStageCallback>
 8003bcc:	e046      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4a26      	ldr	r2, [pc, #152]	; (8003c6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d124      	bne.n	8003c20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf2:	6093      	str	r3, [r2, #8]
 8003bf4:	e032      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2320      	movs	r3, #32
 8003c10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f005 ffbf 	bl	8009b9c <HAL_PCD_DataOutStageCallback>
 8003c1e:	e01d      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d114      	bne.n	8003c50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f003 fce2 	bl	8007614 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f005 ffa0 	bl	8009b9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	4f54300a 	.word	0x4f54300a
 8003c6c:	4f54310a 	.word	0x4f54310a

08003c70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	333c      	adds	r3, #60	; 0x3c
 8003c88:	3304      	adds	r3, #4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d90e      	bls.n	8003cc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f005 ff57 	bl	8009b78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d90c      	bls.n	8003cec <PCD_EP_OutSetupPacket_int+0x7c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	799b      	ldrb	r3, [r3, #6]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d108      	bne.n	8003cec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	f003 fc94 	bl	8007614 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	4f54300a 	.word	0x4f54300a

08003cfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d107      	bne.n	8003d2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d1a:	883b      	ldrh	r3, [r7, #0]
 8003d1c:	0419      	lsls	r1, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
 8003d28:	e028      	b.n	8003d7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	4413      	add	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	e00d      	b.n	8003d5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	3340      	adds	r3, #64	; 0x40
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4413      	add	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	3301      	adds	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3ec      	bcc.n	8003d3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d64:	883b      	ldrh	r3, [r7, #0]
 8003d66:	0418      	lsls	r0, r3, #16
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6819      	ldr	r1, [r3, #0]
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	4302      	orrs	r2, r0
 8003d74:	3340      	adds	r3, #64	; 0x40
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e267      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d075      	beq.n	8003ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de2:	4b88      	ldr	r3, [pc, #544]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d00c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b85      	ldr	r3, [pc, #532]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d112      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4b82      	ldr	r3, [pc, #520]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e06:	d10b      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e08:	4b7e      	ldr	r3, [pc, #504]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05b      	beq.n	8003ecc <HAL_RCC_OscConfig+0x108>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d157      	bne.n	8003ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e242      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e28:	d106      	bne.n	8003e38 <HAL_RCC_OscConfig+0x74>
 8003e2a:	4b76      	ldr	r3, [pc, #472]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a75      	ldr	r2, [pc, #468]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e01d      	b.n	8003e74 <HAL_RCC_OscConfig+0xb0>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x98>
 8003e42:	4b70      	ldr	r3, [pc, #448]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a6f      	ldr	r2, [pc, #444]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b6d      	ldr	r3, [pc, #436]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a6c      	ldr	r2, [pc, #432]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0xb0>
 8003e5c:	4b69      	ldr	r3, [pc, #420]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a68      	ldr	r2, [pc, #416]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a65      	ldr	r2, [pc, #404]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd ffd2 	bl	8001e24 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd ffce 	bl	8001e24 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e207      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b5b      	ldr	r3, [pc, #364]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0xc0>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fd ffbe 	bl	8001e24 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fd ffba 	bl	8001e24 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e1f3      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	4b51      	ldr	r3, [pc, #324]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0xe8>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d063      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eda:	4b4a      	ldr	r3, [pc, #296]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee6:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d11c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b44      	ldr	r3, [pc, #272]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d116      	bne.n	8003f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efe:	4b41      	ldr	r3, [pc, #260]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_RCC_OscConfig+0x152>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e1c7      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f16:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4937      	ldr	r1, [pc, #220]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2a:	e03a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f34:	4b34      	ldr	r3, [pc, #208]	; (8004008 <HAL_RCC_OscConfig+0x244>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3a:	f7fd ff73 	bl	8001e24 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f42:	f7fd ff6f 	bl	8001e24 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e1a8      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4925      	ldr	r1, [pc, #148]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
 8003f74:	e015      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_RCC_OscConfig+0x244>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fd ff52 	bl	8001e24 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f84:	f7fd ff4e 	bl	8001e24 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e187      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d036      	beq.n	800401c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_RCC_OscConfig+0x248>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fd ff32 	bl	8001e24 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc4:	f7fd ff2e 	bl	8001e24 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e167      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x200>
 8003fe2:	e01b      	b.n	800401c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCC_OscConfig+0x248>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fea:	f7fd ff1b 	bl	8001e24 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	e00e      	b.n	8004010 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff2:	f7fd ff17 	bl	8001e24 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d907      	bls.n	8004010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e150      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
 8004004:	40023800 	.word	0x40023800
 8004008:	42470000 	.word	0x42470000
 800400c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	4b88      	ldr	r3, [pc, #544]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1ea      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8097 	beq.w	8004158 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402e:	4b81      	ldr	r3, [pc, #516]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	4b7d      	ldr	r3, [pc, #500]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4a7c      	ldr	r2, [pc, #496]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b7a      	ldr	r3, [pc, #488]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b77      	ldr	r3, [pc, #476]	; (8004238 <HAL_RCC_OscConfig+0x474>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d118      	bne.n	8004098 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004066:	4b74      	ldr	r3, [pc, #464]	; (8004238 <HAL_RCC_OscConfig+0x474>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a73      	ldr	r2, [pc, #460]	; (8004238 <HAL_RCC_OscConfig+0x474>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004072:	f7fd fed7 	bl	8001e24 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407a:	f7fd fed3 	bl	8001e24 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e10c      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	4b6a      	ldr	r3, [pc, #424]	; (8004238 <HAL_RCC_OscConfig+0x474>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x2ea>
 80040a0:	4b64      	ldr	r3, [pc, #400]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a63      	ldr	r2, [pc, #396]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	e01c      	b.n	80040e8 <HAL_RCC_OscConfig+0x324>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x30c>
 80040b6:	4b5f      	ldr	r3, [pc, #380]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a5e      	ldr	r2, [pc, #376]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040bc:	f043 0304 	orr.w	r3, r3, #4
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	4b5c      	ldr	r3, [pc, #368]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a5b      	ldr	r2, [pc, #364]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	e00b      	b.n	80040e8 <HAL_RCC_OscConfig+0x324>
 80040d0:	4b58      	ldr	r3, [pc, #352]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	4a57      	ldr	r2, [pc, #348]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	6713      	str	r3, [r2, #112]	; 0x70
 80040dc:	4b55      	ldr	r3, [pc, #340]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	4a54      	ldr	r2, [pc, #336]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040e2:	f023 0304 	bic.w	r3, r3, #4
 80040e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d015      	beq.n	800411c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fd fe98 	bl	8001e24 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f6:	e00a      	b.n	800410e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f8:	f7fd fe94 	bl	8001e24 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e0cb      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	4b49      	ldr	r3, [pc, #292]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0ee      	beq.n	80040f8 <HAL_RCC_OscConfig+0x334>
 800411a:	e014      	b.n	8004146 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411c:	f7fd fe82 	bl	8001e24 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004122:	e00a      	b.n	800413a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004124:	f7fd fe7e 	bl	8001e24 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e0b5      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413a:	4b3e      	ldr	r3, [pc, #248]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1ee      	bne.n	8004124 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004146:	7dfb      	ldrb	r3, [r7, #23]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d105      	bne.n	8004158 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414c:	4b39      	ldr	r3, [pc, #228]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	4a38      	ldr	r2, [pc, #224]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004156:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80a1 	beq.w	80042a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004162:	4b34      	ldr	r3, [pc, #208]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b08      	cmp	r3, #8
 800416c:	d05c      	beq.n	8004228 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d141      	bne.n	80041fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004176:	4b31      	ldr	r3, [pc, #196]	; (800423c <HAL_RCC_OscConfig+0x478>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fd fe52 	bl	8001e24 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004184:	f7fd fe4e 	bl	8001e24 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e087      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004196:	4b27      	ldr	r3, [pc, #156]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	3b01      	subs	r3, #1
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	491b      	ldr	r1, [pc, #108]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <HAL_RCC_OscConfig+0x478>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7fd fe27 	bl	8001e24 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041da:	f7fd fe23 	bl	8001e24 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e05c      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x416>
 80041f8:	e054      	b.n	80042a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_RCC_OscConfig+0x478>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fd fe10 	bl	8001e24 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004208:	f7fd fe0c 	bl	8001e24 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e045      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x444>
 8004226:	e03d      	b.n	80042a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d107      	bne.n	8004240 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e038      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
 8004234:	40023800 	.word	0x40023800
 8004238:	40007000 	.word	0x40007000
 800423c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_RCC_OscConfig+0x4ec>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d028      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d121      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d11a      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004270:	4013      	ands	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004278:	4293      	cmp	r3, r2
 800427a:	d111      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	3b01      	subs	r3, #1
 800428a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800

080042b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0cc      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c8:	4b68      	ldr	r3, [pc, #416]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d90c      	bls.n	80042f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d6:	4b65      	ldr	r3, [pc, #404]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	4b63      	ldr	r3, [pc, #396]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0b8      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d020      	beq.n	800433e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004308:	4b59      	ldr	r3, [pc, #356]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	4a58      	ldr	r2, [pc, #352]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004320:	4b53      	ldr	r3, [pc, #332]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a52      	ldr	r2, [pc, #328]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800432a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800432c:	4b50      	ldr	r3, [pc, #320]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	494d      	ldr	r1, [pc, #308]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d044      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d107      	bne.n	8004362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d119      	bne.n	8004392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e07f      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d003      	beq.n	8004372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436e:	2b03      	cmp	r3, #3
 8004370:	d107      	bne.n	8004382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004372:	4b3f      	ldr	r3, [pc, #252]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e06f      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004382:	4b3b      	ldr	r3, [pc, #236]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e067      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004392:	4b37      	ldr	r3, [pc, #220]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f023 0203 	bic.w	r2, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4934      	ldr	r1, [pc, #208]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a4:	f7fd fd3e 	bl	8001e24 <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043aa:	e00a      	b.n	80043c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ac:	f7fd fd3a 	bl	8001e24 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e04f      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c2:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 020c 	and.w	r2, r3, #12
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d1eb      	bne.n	80043ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d4:	4b25      	ldr	r3, [pc, #148]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d20c      	bcs.n	80043fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	4b22      	ldr	r3, [pc, #136]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b20      	ldr	r3, [pc, #128]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e032      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4916      	ldr	r1, [pc, #88]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	490e      	ldr	r1, [pc, #56]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800443a:	f000 f821 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 800443e:	4602      	mov	r2, r0
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	091b      	lsrs	r3, r3, #4
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	490a      	ldr	r1, [pc, #40]	; (8004474 <HAL_RCC_ClockConfig+0x1c0>)
 800444c:	5ccb      	ldrb	r3, [r1, r3]
 800444e:	fa22 f303 	lsr.w	r3, r2, r3
 8004452:	4a09      	ldr	r2, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 8004454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd fae4 	bl	8001a28 <HAL_InitTick>

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40023c00 	.word	0x40023c00
 8004470:	40023800 	.word	0x40023800
 8004474:	0800cae4 	.word	0x0800cae4
 8004478:	20000000 	.word	0x20000000
 800447c:	20000004 	.word	0x20000004

08004480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004484:	b090      	sub	sp, #64	; 0x40
 8004486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
 800448c:	2300      	movs	r3, #0
 800448e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004490:	2300      	movs	r3, #0
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004498:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d00d      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x40>
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	f200 80a1 	bhi.w	80045ec <HAL_RCC_GetSysClockFreq+0x16c>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x34>
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d003      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0x3a>
 80044b2:	e09b      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b4:	4b53      	ldr	r3, [pc, #332]	; (8004604 <HAL_RCC_GetSysClockFreq+0x184>)
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80044b8:	e09b      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ba:	4b53      	ldr	r3, [pc, #332]	; (8004608 <HAL_RCC_GetSysClockFreq+0x188>)
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044be:	e098      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c0:	4b4f      	ldr	r3, [pc, #316]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ca:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d028      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	099b      	lsrs	r3, r3, #6
 80044dc:	2200      	movs	r2, #0
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	627a      	str	r2, [r7, #36]	; 0x24
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044e8:	2100      	movs	r1, #0
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_GetSysClockFreq+0x188>)
 80044ec:	fb03 f201 	mul.w	r2, r3, r1
 80044f0:	2300      	movs	r3, #0
 80044f2:	fb00 f303 	mul.w	r3, r0, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	4a43      	ldr	r2, [pc, #268]	; (8004608 <HAL_RCC_GetSysClockFreq+0x188>)
 80044fa:	fba0 1202 	umull	r1, r2, r0, r2
 80044fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004500:	460a      	mov	r2, r1
 8004502:	62ba      	str	r2, [r7, #40]	; 0x28
 8004504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004506:	4413      	add	r3, r2
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800450a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450c:	2200      	movs	r2, #0
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	61fa      	str	r2, [r7, #28]
 8004512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004516:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800451a:	f7fc fb4d 	bl	8000bb8 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4613      	mov	r3, r2
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004526:	e053      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	099b      	lsrs	r3, r3, #6
 800452e:	2200      	movs	r2, #0
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	617a      	str	r2, [r7, #20]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800453a:	f04f 0b00 	mov.w	fp, #0
 800453e:	4652      	mov	r2, sl
 8004540:	465b      	mov	r3, fp
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	0159      	lsls	r1, r3, #5
 800454c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004550:	0150      	lsls	r0, r2, #5
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	ebb2 080a 	subs.w	r8, r2, sl
 800455a:	eb63 090b 	sbc.w	r9, r3, fp
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800456a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800456e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004572:	ebb2 0408 	subs.w	r4, r2, r8
 8004576:	eb63 0509 	sbc.w	r5, r3, r9
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	00eb      	lsls	r3, r5, #3
 8004584:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004588:	00e2      	lsls	r2, r4, #3
 800458a:	4614      	mov	r4, r2
 800458c:	461d      	mov	r5, r3
 800458e:	eb14 030a 	adds.w	r3, r4, sl
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	eb45 030b 	adc.w	r3, r5, fp
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045a6:	4629      	mov	r1, r5
 80045a8:	028b      	lsls	r3, r1, #10
 80045aa:	4621      	mov	r1, r4
 80045ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b0:	4621      	mov	r1, r4
 80045b2:	028a      	lsls	r2, r1, #10
 80045b4:	4610      	mov	r0, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	2200      	movs	r2, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	60fa      	str	r2, [r7, #12]
 80045c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c4:	f7fc faf8 	bl	8000bb8 <__aeabi_uldivmod>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4613      	mov	r3, r2
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	3301      	adds	r3, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80045e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045ea:	e002      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3740      	adds	r7, #64	; 0x40
 80045f8:	46bd      	mov	sp, r7
 80045fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	00f42400 	.word	0x00f42400
 8004608:	017d7840 	.word	0x017d7840

0800460c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000000 	.word	0x20000000

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4903      	ldr	r1, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	0800caf4 	.word	0x0800caf4

0800464c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	220f      	movs	r2, #15
 800465a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800465c:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <HAL_RCC_GetClockConfig+0x5c>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0203 	and.w	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004668:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <HAL_RCC_GetClockConfig+0x5c>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <HAL_RCC_GetClockConfig+0x5c>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004680:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <HAL_RCC_GetClockConfig+0x5c>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	08db      	lsrs	r3, r3, #3
 8004686:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <HAL_RCC_GetClockConfig+0x60>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0207 	and.w	r2, r3, #7
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	601a      	str	r2, [r3, #0]
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
 80046ac:	40023c00 	.word	0x40023c00

080046b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e07b      	b.n	80047ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d108      	bne.n	80046dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d2:	d009      	beq.n	80046e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	61da      	str	r2, [r3, #28]
 80046da:	e005      	b.n	80046e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc ffd8 	bl	80016b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800471e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	ea42 0103 	orr.w	r1, r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	f003 0104 	and.w	r1, r3, #4
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f003 0210 	and.w	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b088      	sub	sp, #32
 80047c6:	af02      	add	r7, sp, #8
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d002      	beq.n	80047e8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047e6:	e0fb      	b.n	80049e0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f0:	d112      	bne.n	8004818 <HAL_SPI_Receive+0x56>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10e      	bne.n	8004818 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2204      	movs	r2, #4
 80047fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f8ef 	bl	80049f2 <HAL_SPI_TransmitReceive>
 8004814:	4603      	mov	r3, r0
 8004816:	e0e8      	b.n	80049ea <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_SPI_Receive+0x64>
 8004822:	2302      	movs	r3, #2
 8004824:	e0e1      	b.n	80049ea <HAL_SPI_Receive+0x228>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800482e:	f7fd faf9 	bl	8001e24 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <HAL_SPI_Receive+0x7e>
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004844:	e0cc      	b.n	80049e0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2204      	movs	r2, #4
 800484a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	88fa      	ldrh	r2, [r7, #6]
 800485e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800488c:	d10f      	bne.n	80048ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b40      	cmp	r3, #64	; 0x40
 80048ba:	d007      	beq.n	80048cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d16a      	bne.n	80049aa <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048d4:	e032      	b.n	800493c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d115      	bne.n	8004910 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f103 020c 	add.w	r2, r3, #12
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	7812      	ldrb	r2, [r2, #0]
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800490e:	e015      	b.n	800493c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004910:	f7fd fa88 	bl	8001e24 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d803      	bhi.n	8004928 <HAL_SPI_Receive+0x166>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d102      	bne.n	800492e <HAL_SPI_Receive+0x16c>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800493a:	e051      	b.n	80049e0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1c7      	bne.n	80048d6 <HAL_SPI_Receive+0x114>
 8004946:	e035      	b.n	80049b4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d113      	bne.n	800497e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	b292      	uxth	r2, r2
 8004962:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	1c9a      	adds	r2, r3, #2
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800497c:	e015      	b.n	80049aa <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800497e:	f7fd fa51 	bl	8001e24 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d803      	bhi.n	8004996 <HAL_SPI_Receive+0x1d4>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d102      	bne.n	800499c <HAL_SPI_Receive+0x1da>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049a8:	e01a      	b.n	80049e0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1c9      	bne.n	8004948 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 fa53 	bl	8004e64 <SPI_EndRxTransaction>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
 80049d6:	e003      	b.n	80049e0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b08c      	sub	sp, #48	; 0x30
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a00:	2301      	movs	r3, #1
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_SPI_TransmitReceive+0x26>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e198      	b.n	8004d4a <HAL_SPI_TransmitReceive+0x358>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a20:	f7fd fa00 	bl	8001e24 <HAL_GetTick>
 8004a24:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a36:	887b      	ldrh	r3, [r7, #2]
 8004a38:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d00f      	beq.n	8004a62 <HAL_SPI_TransmitReceive+0x70>
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a48:	d107      	bne.n	8004a5a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <HAL_SPI_TransmitReceive+0x68>
 8004a52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d003      	beq.n	8004a62 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a60:	e16d      	b.n	8004d3e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x82>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0x82>
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d103      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a7a:	e160      	b.n	8004d3e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d003      	beq.n	8004a90 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2205      	movs	r2, #5
 8004a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	887a      	ldrh	r2, [r7, #2]
 8004aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	887a      	ldrh	r2, [r7, #2]
 8004aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	887a      	ldrh	r2, [r7, #2]
 8004ab8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d007      	beq.n	8004ae4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aec:	d17c      	bne.n	8004be8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <HAL_SPI_TransmitReceive+0x10a>
 8004af6:	8b7b      	ldrh	r3, [r7, #26]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d16a      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	881a      	ldrh	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	1c9a      	adds	r2, r3, #2
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b20:	e057      	b.n	8004bd2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d11b      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x176>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <HAL_SPI_TransmitReceive+0x176>
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d113      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	881a      	ldrh	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	1c9a      	adds	r2, r3, #2
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d119      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x1b8>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d014      	beq.n	8004baa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	b292      	uxth	r2, r2
 8004b8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b92:	1c9a      	adds	r2, r3, #2
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004baa:	f7fd f93b 	bl	8001e24 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d80b      	bhi.n	8004bd2 <HAL_SPI_TransmitReceive+0x1e0>
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d007      	beq.n	8004bd2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004bd0:	e0b5      	b.n	8004d3e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1a2      	bne.n	8004b22 <HAL_SPI_TransmitReceive+0x130>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d19d      	bne.n	8004b22 <HAL_SPI_TransmitReceive+0x130>
 8004be6:	e080      	b.n	8004cea <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x204>
 8004bf0:	8b7b      	ldrh	r3, [r7, #26]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d16f      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c1c:	e05b      	b.n	8004cd6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d11c      	bne.n	8004c66 <HAL_SPI_TransmitReceive+0x274>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d017      	beq.n	8004c66 <HAL_SPI_TransmitReceive+0x274>
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d114      	bne.n	8004c66 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	7812      	ldrb	r2, [r2, #0]
 8004c48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d119      	bne.n	8004ca8 <HAL_SPI_TransmitReceive+0x2b6>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d014      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ca8:	f7fd f8bc 	bl	8001e24 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d803      	bhi.n	8004cc0 <HAL_SPI_TransmitReceive+0x2ce>
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x2d4>
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d107      	bne.n	8004cd6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004cd4:	e033      	b.n	8004d3e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d19e      	bne.n	8004c1e <HAL_SPI_TransmitReceive+0x22c>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d199      	bne.n	8004c1e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f91e 	bl	8004f30 <SPI_EndRxTxTransaction>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d006      	beq.n	8004d08 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d06:	e01a      	b.n	8004d3e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d34:	e003      	b.n	8004d3e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3730      	adds	r7, #48	; 0x30
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d64:	f7fd f85e 	bl	8001e24 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	4413      	add	r3, r2
 8004d72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d74:	f7fd f856 	bl	8001e24 <HAL_GetTick>
 8004d78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d7a:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	015b      	lsls	r3, r3, #5
 8004d80:	0d1b      	lsrs	r3, r3, #20
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	fb02 f303 	mul.w	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d8a:	e054      	b.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d050      	beq.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d94:	f7fd f846 	bl	8001e24 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d902      	bls.n	8004daa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d13d      	bne.n	8004e26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc2:	d111      	bne.n	8004de8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dcc:	d004      	beq.n	8004dd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd6:	d107      	bne.n	8004de8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df0:	d10f      	bne.n	8004e12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e017      	b.n	8004e56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d19b      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20000000 	.word	0x20000000

08004e64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e78:	d111      	bne.n	8004e9e <SPI_EndRxTransaction+0x3a>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e82:	d004      	beq.n	8004e8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d107      	bne.n	8004e9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e9c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea6:	d12a      	bne.n	8004efe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb0:	d012      	beq.n	8004ed8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2180      	movs	r1, #128	; 0x80
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff ff49 	bl	8004d54 <SPI_WaitFlagStateUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d02d      	beq.n	8004f24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e026      	b.n	8004f26 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f7ff ff36 	bl	8004d54 <SPI_WaitFlagStateUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01a      	beq.n	8004f24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	f043 0220 	orr.w	r2, r3, #32
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e013      	b.n	8004f26 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2200      	movs	r2, #0
 8004f06:	2101      	movs	r1, #1
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7ff ff23 	bl	8004d54 <SPI_WaitFlagStateUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	f043 0220 	orr.w	r2, r3, #32
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e000      	b.n	8004f26 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2201      	movs	r2, #1
 8004f44:	2102      	movs	r1, #2
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7ff ff04 	bl	8004d54 <SPI_WaitFlagStateUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	f043 0220 	orr.w	r2, r3, #32
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e032      	b.n	8004fc8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f62:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <SPI_EndRxTxTransaction+0xa0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <SPI_EndRxTxTransaction+0xa4>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	0d5b      	lsrs	r3, r3, #21
 8004f6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f80:	d112      	bne.n	8004fa8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f7ff fee1 	bl	8004d54 <SPI_WaitFlagStateUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d016      	beq.n	8004fc6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	f043 0220 	orr.w	r2, r3, #32
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e00f      	b.n	8004fc8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b80      	cmp	r3, #128	; 0x80
 8004fc0:	d0f2      	beq.n	8004fa8 <SPI_EndRxTxTransaction+0x78>
 8004fc2:	e000      	b.n	8004fc6 <SPI_EndRxTxTransaction+0x96>
        break;
 8004fc4:	bf00      	nop
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000000 	.word	0x20000000
 8004fd4:	165e9f81 	.word	0x165e9f81

08004fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e041      	b.n	800506e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fc fbe4 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f000 fcf0 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d001      	beq.n	8005090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e044      	b.n	800511a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <HAL_TIM_Base_Start_IT+0xb0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x6c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d013      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x6c>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1a      	ldr	r2, [pc, #104]	; (800512c <HAL_TIM_Base_Start_IT+0xb4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x6c>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a19      	ldr	r2, [pc, #100]	; (8005130 <HAL_TIM_Base_Start_IT+0xb8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x6c>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a17      	ldr	r2, [pc, #92]	; (8005134 <HAL_TIM_Base_Start_IT+0xbc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x6c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a16      	ldr	r2, [pc, #88]	; (8005138 <HAL_TIM_Base_Start_IT+0xc0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d111      	bne.n	8005108 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	d010      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005106:	e007      	b.n	8005118 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40010000 	.word	0x40010000
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40014000 	.word	0x40014000

0800513c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e041      	b.n	80051d2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f839 	bl	80051da <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3304      	adds	r3, #4
 8005178:	4619      	mov	r1, r3
 800517a:	4610      	mov	r0, r2
 800517c:	f000 fc3e 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e041      	b.n	8005284 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f839 	bl	800528c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f000 fbe5 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <HAL_TIM_PWM_Start+0x24>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	e022      	b.n	800530a <HAL_TIM_PWM_Start+0x6a>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d109      	bne.n	80052de <HAL_TIM_PWM_Start+0x3e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	bf14      	ite	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	2300      	moveq	r3, #0
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	e015      	b.n	800530a <HAL_TIM_PWM_Start+0x6a>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d109      	bne.n	80052f8 <HAL_TIM_PWM_Start+0x58>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	e008      	b.n	800530a <HAL_TIM_PWM_Start+0x6a>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e068      	b.n	80053e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <HAL_TIM_PWM_Start+0x82>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005320:	e013      	b.n	800534a <HAL_TIM_PWM_Start+0xaa>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b04      	cmp	r3, #4
 8005326:	d104      	bne.n	8005332 <HAL_TIM_PWM_Start+0x92>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005330:	e00b      	b.n	800534a <HAL_TIM_PWM_Start+0xaa>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Start+0xa2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005340:	e003      	b.n	800534a <HAL_TIM_PWM_Start+0xaa>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fe04 	bl	8005f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a23      	ldr	r2, [pc, #140]	; (80053ec <HAL_TIM_PWM_Start+0x14c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d107      	bne.n	8005372 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005370:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1d      	ldr	r2, [pc, #116]	; (80053ec <HAL_TIM_PWM_Start+0x14c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d018      	beq.n	80053ae <HAL_TIM_PWM_Start+0x10e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005384:	d013      	beq.n	80053ae <HAL_TIM_PWM_Start+0x10e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a19      	ldr	r2, [pc, #100]	; (80053f0 <HAL_TIM_PWM_Start+0x150>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00e      	beq.n	80053ae <HAL_TIM_PWM_Start+0x10e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a17      	ldr	r2, [pc, #92]	; (80053f4 <HAL_TIM_PWM_Start+0x154>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d009      	beq.n	80053ae <HAL_TIM_PWM_Start+0x10e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a16      	ldr	r2, [pc, #88]	; (80053f8 <HAL_TIM_PWM_Start+0x158>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d004      	beq.n	80053ae <HAL_TIM_PWM_Start+0x10e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <HAL_TIM_PWM_Start+0x15c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d111      	bne.n	80053d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b06      	cmp	r3, #6
 80053be:	d010      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d0:	e007      	b.n	80053e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0201 	orr.w	r2, r2, #1
 80053e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40014000 	.word	0x40014000

08005400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d020      	beq.n	8005464 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01b      	beq.n	8005464 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0202 	mvn.w	r2, #2
 8005434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fab7 	bl	80059be <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 faa9 	bl	80059aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 faba 	bl	80059d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d020      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01b      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0204 	mvn.w	r2, #4
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa91 	bl	80059be <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa83 	bl	80059aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa94 	bl	80059d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d020      	beq.n	80054fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01b      	beq.n	80054fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0208 	mvn.w	r2, #8
 80054cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2204      	movs	r2, #4
 80054d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa6b 	bl	80059be <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa5d 	bl	80059aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fa6e 	bl	80059d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d020      	beq.n	8005548 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0310 	and.w	r3, r3, #16
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01b      	beq.n	8005548 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0210 	mvn.w	r2, #16
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2208      	movs	r2, #8
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	69db      	ldr	r3, [r3, #28]
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa45 	bl	80059be <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fa37 	bl	80059aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa48 	bl	80059d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0201 	mvn.w	r2, #1
 8005564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc f866 	bl	8001638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00c      	beq.n	8005590 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fd86 	bl	800609c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00c      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fa19 	bl	80059e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0220 	mvn.w	r2, #32
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fd58 	bl	8006088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e048      	b.n	8005690 <HAL_TIM_OC_ConfigChannel+0xb0>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b0c      	cmp	r3, #12
 800560a:	d839      	bhi.n	8005680 <HAL_TIM_OC_ConfigChannel+0xa0>
 800560c:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <HAL_TIM_OC_ConfigChannel+0x34>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005649 	.word	0x08005649
 8005618:	08005681 	.word	0x08005681
 800561c:	08005681 	.word	0x08005681
 8005620:	08005681 	.word	0x08005681
 8005624:	08005657 	.word	0x08005657
 8005628:	08005681 	.word	0x08005681
 800562c:	08005681 	.word	0x08005681
 8005630:	08005681 	.word	0x08005681
 8005634:	08005665 	.word	0x08005665
 8005638:	08005681 	.word	0x08005681
 800563c:	08005681 	.word	0x08005681
 8005640:	08005681 	.word	0x08005681
 8005644:	08005673 	.word	0x08005673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fa60 	bl	8005b14 <TIM_OC1_SetConfig>
      break;
 8005654:	e017      	b.n	8005686 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fabf 	bl	8005be0 <TIM_OC2_SetConfig>
      break;
 8005662:	e010      	b.n	8005686 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fb24 	bl	8005cb8 <TIM_OC3_SetConfig>
      break;
 8005670:	e009      	b.n	8005686 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fb87 	bl	8005d8c <TIM_OC4_SetConfig>
      break;
 800567e:	e002      	b.n	8005686 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
      break;
 8005684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800568e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e0ae      	b.n	8005814 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b0c      	cmp	r3, #12
 80056c2:	f200 809f 	bhi.w	8005804 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	08005701 	.word	0x08005701
 80056d0:	08005805 	.word	0x08005805
 80056d4:	08005805 	.word	0x08005805
 80056d8:	08005805 	.word	0x08005805
 80056dc:	08005741 	.word	0x08005741
 80056e0:	08005805 	.word	0x08005805
 80056e4:	08005805 	.word	0x08005805
 80056e8:	08005805 	.word	0x08005805
 80056ec:	08005783 	.word	0x08005783
 80056f0:	08005805 	.word	0x08005805
 80056f4:	08005805 	.word	0x08005805
 80056f8:	08005805 	.word	0x08005805
 80056fc:	080057c3 	.word	0x080057c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fa04 	bl	8005b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0208 	orr.w	r2, r2, #8
 800571a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0204 	bic.w	r2, r2, #4
 800572a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6999      	ldr	r1, [r3, #24]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	619a      	str	r2, [r3, #24]
      break;
 800573e:	e064      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fa4a 	bl	8005be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800575a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800576a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6999      	ldr	r1, [r3, #24]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	619a      	str	r2, [r3, #24]
      break;
 8005780:	e043      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68b9      	ldr	r1, [r7, #8]
 8005788:	4618      	mov	r0, r3
 800578a:	f000 fa95 	bl	8005cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0208 	orr.w	r2, r2, #8
 800579c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0204 	bic.w	r2, r2, #4
 80057ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69d9      	ldr	r1, [r3, #28]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	61da      	str	r2, [r3, #28]
      break;
 80057c0:	e023      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fadf 	bl	8005d8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69d9      	ldr	r1, [r3, #28]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	021a      	lsls	r2, r3, #8
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	61da      	str	r2, [r3, #28]
      break;
 8005802:	e002      	b.n	800580a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
      break;
 8005808:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_TIM_ConfigClockSource+0x1c>
 8005834:	2302      	movs	r3, #2
 8005836:	e0b4      	b.n	80059a2 <HAL_TIM_ConfigClockSource+0x186>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800585e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005870:	d03e      	beq.n	80058f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005876:	f200 8087 	bhi.w	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 800587a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587e:	f000 8086 	beq.w	800598e <HAL_TIM_ConfigClockSource+0x172>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005886:	d87f      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 8005888:	2b70      	cmp	r3, #112	; 0x70
 800588a:	d01a      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0xa6>
 800588c:	2b70      	cmp	r3, #112	; 0x70
 800588e:	d87b      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 8005890:	2b60      	cmp	r3, #96	; 0x60
 8005892:	d050      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0x11a>
 8005894:	2b60      	cmp	r3, #96	; 0x60
 8005896:	d877      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b50      	cmp	r3, #80	; 0x50
 800589a:	d03c      	beq.n	8005916 <HAL_TIM_ConfigClockSource+0xfa>
 800589c:	2b50      	cmp	r3, #80	; 0x50
 800589e:	d873      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b40      	cmp	r3, #64	; 0x40
 80058a2:	d058      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x13a>
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d86f      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b30      	cmp	r3, #48	; 0x30
 80058aa:	d064      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x15a>
 80058ac:	2b30      	cmp	r3, #48	; 0x30
 80058ae:	d86b      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d060      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x15a>
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d867      	bhi.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d05c      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x15a>
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d05a      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x15a>
 80058c0:	e062      	b.n	8005988 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058d2:	f000 fb25 	bl	8005f20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	609a      	str	r2, [r3, #8]
      break;
 80058ee:	e04f      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005900:	f000 fb0e 	bl	8005f20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005912:	609a      	str	r2, [r3, #8]
      break;
 8005914:	e03c      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005922:	461a      	mov	r2, r3
 8005924:	f000 fa82 	bl	8005e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2150      	movs	r1, #80	; 0x50
 800592e:	4618      	mov	r0, r3
 8005930:	f000 fadb 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 8005934:	e02c      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005942:	461a      	mov	r2, r3
 8005944:	f000 faa1 	bl	8005e8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2160      	movs	r1, #96	; 0x60
 800594e:	4618      	mov	r0, r3
 8005950:	f000 facb 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 8005954:	e01c      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005962:	461a      	mov	r2, r3
 8005964:	f000 fa62 	bl	8005e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2140      	movs	r1, #64	; 0x40
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fabb 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 8005974:	e00c      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f000 fab2 	bl	8005eea <TIM_ITRx_SetConfig>
      break;
 8005986:	e003      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
      break;
 800598c:	e000      	b.n	8005990 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800598e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
	...

080059fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3a      	ldr	r2, [pc, #232]	; (8005af8 <TIM_Base_SetConfig+0xfc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00f      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1a:	d00b      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a37      	ldr	r2, [pc, #220]	; (8005afc <TIM_Base_SetConfig+0x100>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a36      	ldr	r2, [pc, #216]	; (8005b00 <TIM_Base_SetConfig+0x104>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a35      	ldr	r2, [pc, #212]	; (8005b04 <TIM_Base_SetConfig+0x108>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d108      	bne.n	8005a46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2b      	ldr	r2, [pc, #172]	; (8005af8 <TIM_Base_SetConfig+0xfc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01b      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a54:	d017      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a28      	ldr	r2, [pc, #160]	; (8005afc <TIM_Base_SetConfig+0x100>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <TIM_Base_SetConfig+0x104>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a26      	ldr	r2, [pc, #152]	; (8005b04 <TIM_Base_SetConfig+0x108>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a25      	ldr	r2, [pc, #148]	; (8005b08 <TIM_Base_SetConfig+0x10c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a24      	ldr	r2, [pc, #144]	; (8005b0c <TIM_Base_SetConfig+0x110>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a23      	ldr	r2, [pc, #140]	; (8005b10 <TIM_Base_SetConfig+0x114>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d108      	bne.n	8005a98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0e      	ldr	r2, [pc, #56]	; (8005af8 <TIM_Base_SetConfig+0xfc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d103      	bne.n	8005acc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d105      	bne.n	8005aea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f023 0201 	bic.w	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	611a      	str	r2, [r3, #16]
  }
}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f023 0201 	bic.w	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f023 0302 	bic.w	r3, r3, #2
 8005b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a1c      	ldr	r2, [pc, #112]	; (8005bdc <TIM_OC1_SetConfig+0xc8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d10c      	bne.n	8005b8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0308 	bic.w	r3, r3, #8
 8005b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f023 0304 	bic.w	r3, r3, #4
 8005b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <TIM_OC1_SetConfig+0xc8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d111      	bne.n	8005bb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	621a      	str	r2, [r3, #32]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	40010000 	.word	0x40010000

08005be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f023 0210 	bic.w	r2, r3, #16
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0320 	bic.w	r3, r3, #32
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a1e      	ldr	r2, [pc, #120]	; (8005cb4 <TIM_OC2_SetConfig+0xd4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10d      	bne.n	8005c5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <TIM_OC2_SetConfig+0xd4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d113      	bne.n	8005c8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	40010000 	.word	0x40010000

08005cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0303 	bic.w	r3, r3, #3
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a1d      	ldr	r2, [pc, #116]	; (8005d88 <TIM_OC3_SetConfig+0xd0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d10d      	bne.n	8005d32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a14      	ldr	r2, [pc, #80]	; (8005d88 <TIM_OC3_SetConfig+0xd0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d113      	bne.n	8005d62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	621a      	str	r2, [r3, #32]
}
 8005d7c:	bf00      	nop
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	40010000 	.word	0x40010000

08005d8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	031b      	lsls	r3, r3, #12
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a10      	ldr	r2, [pc, #64]	; (8005e28 <TIM_OC4_SetConfig+0x9c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d109      	bne.n	8005e00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	019b      	lsls	r3, r3, #6
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40010000 	.word	0x40010000

08005e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f023 0201 	bic.w	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 030a 	bic.w	r3, r3, #10
 8005e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b087      	sub	sp, #28
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f023 0210 	bic.w	r2, r3, #16
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	031b      	lsls	r3, r3, #12
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f043 0307 	orr.w	r3, r3, #7
 8005f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	609a      	str	r2, [r3, #8]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	021a      	lsls	r2, r3, #8
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	431a      	orrs	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	609a      	str	r2, [r3, #8]
}
 8005f54:	bf00      	nop
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f003 031f 	and.w	r3, r3, #31
 8005f72:	2201      	movs	r2, #1
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1a      	ldr	r2, [r3, #32]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	401a      	ands	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f003 031f 	and.w	r3, r3, #31
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	fa01 f303 	lsl.w	r3, r1, r3
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
	...

08005fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e050      	b.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1c      	ldr	r2, [pc, #112]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d018      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006010:	d013      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a18      	ldr	r2, [pc, #96]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00e      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a16      	ldr	r2, [pc, #88]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a15      	ldr	r2, [pc, #84]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a13      	ldr	r2, [pc, #76]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d10c      	bne.n	8006054 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	4313      	orrs	r3, r2
 800604a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40010000 	.word	0x40010000
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00
 8006084:	40014000 	.word	0x40014000

08006088 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060b0:	b084      	sub	sp, #16
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	f107 001c 	add.w	r0, r7, #28
 80060be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d123      	bne.n	8006112 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80060de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d105      	bne.n	8006106 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f001 fae2 	bl	80076d0 <USB_CoreReset>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	e01b      	b.n	800614a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fad6 	bl	80076d0 <USB_CoreReset>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006128:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
 800613c:	e005      	b.n	800614a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800614a:	7fbb      	ldrb	r3, [r7, #30]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d10b      	bne.n	8006168 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f043 0206 	orr.w	r2, r3, #6
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006168:	7bfb      	ldrb	r3, [r7, #15]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006174:	b004      	add	sp, #16
 8006176:	4770      	bx	lr

08006178 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d165      	bne.n	8006258 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4a41      	ldr	r2, [pc, #260]	; (8006294 <USB_SetTurnaroundTime+0x11c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d906      	bls.n	80061a2 <USB_SetTurnaroundTime+0x2a>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4a40      	ldr	r2, [pc, #256]	; (8006298 <USB_SetTurnaroundTime+0x120>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d202      	bcs.n	80061a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800619c:	230f      	movs	r3, #15
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e062      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4a3c      	ldr	r2, [pc, #240]	; (8006298 <USB_SetTurnaroundTime+0x120>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d306      	bcc.n	80061b8 <USB_SetTurnaroundTime+0x40>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4a3b      	ldr	r2, [pc, #236]	; (800629c <USB_SetTurnaroundTime+0x124>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d202      	bcs.n	80061b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061b2:	230e      	movs	r3, #14
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	e057      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4a38      	ldr	r2, [pc, #224]	; (800629c <USB_SetTurnaroundTime+0x124>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d306      	bcc.n	80061ce <USB_SetTurnaroundTime+0x56>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4a37      	ldr	r2, [pc, #220]	; (80062a0 <USB_SetTurnaroundTime+0x128>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d202      	bcs.n	80061ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061c8:	230d      	movs	r3, #13
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	e04c      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4a33      	ldr	r2, [pc, #204]	; (80062a0 <USB_SetTurnaroundTime+0x128>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d306      	bcc.n	80061e4 <USB_SetTurnaroundTime+0x6c>
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4a32      	ldr	r2, [pc, #200]	; (80062a4 <USB_SetTurnaroundTime+0x12c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d802      	bhi.n	80061e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061de:	230c      	movs	r3, #12
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e041      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4a2f      	ldr	r2, [pc, #188]	; (80062a4 <USB_SetTurnaroundTime+0x12c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d906      	bls.n	80061fa <USB_SetTurnaroundTime+0x82>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4a2e      	ldr	r2, [pc, #184]	; (80062a8 <USB_SetTurnaroundTime+0x130>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d802      	bhi.n	80061fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80061f4:	230b      	movs	r3, #11
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e036      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4a2a      	ldr	r2, [pc, #168]	; (80062a8 <USB_SetTurnaroundTime+0x130>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d906      	bls.n	8006210 <USB_SetTurnaroundTime+0x98>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4a29      	ldr	r2, [pc, #164]	; (80062ac <USB_SetTurnaroundTime+0x134>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d802      	bhi.n	8006210 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800620a:	230a      	movs	r3, #10
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	e02b      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4a26      	ldr	r2, [pc, #152]	; (80062ac <USB_SetTurnaroundTime+0x134>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d906      	bls.n	8006226 <USB_SetTurnaroundTime+0xae>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4a25      	ldr	r2, [pc, #148]	; (80062b0 <USB_SetTurnaroundTime+0x138>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d202      	bcs.n	8006226 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006220:	2309      	movs	r3, #9
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	e020      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <USB_SetTurnaroundTime+0x138>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d306      	bcc.n	800623c <USB_SetTurnaroundTime+0xc4>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4a20      	ldr	r2, [pc, #128]	; (80062b4 <USB_SetTurnaroundTime+0x13c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d802      	bhi.n	800623c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006236:	2308      	movs	r3, #8
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e015      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <USB_SetTurnaroundTime+0x13c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d906      	bls.n	8006252 <USB_SetTurnaroundTime+0xda>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4a1c      	ldr	r2, [pc, #112]	; (80062b8 <USB_SetTurnaroundTime+0x140>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d202      	bcs.n	8006252 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800624c:	2307      	movs	r3, #7
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e00a      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006252:	2306      	movs	r3, #6
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e007      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800625e:	2309      	movs	r3, #9
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e001      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006264:	2309      	movs	r3, #9
 8006266:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	029b      	lsls	r3, r3, #10
 800627c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	00d8acbf 	.word	0x00d8acbf
 8006298:	00e4e1c0 	.word	0x00e4e1c0
 800629c:	00f42400 	.word	0x00f42400
 80062a0:	01067380 	.word	0x01067380
 80062a4:	011a499f 	.word	0x011a499f
 80062a8:	01312cff 	.word	0x01312cff
 80062ac:	014ca43f 	.word	0x014ca43f
 80062b0:	016e3600 	.word	0x016e3600
 80062b4:	01a6ab1f 	.word	0x01a6ab1f
 80062b8:	01e84800 	.word	0x01e84800

080062bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f043 0201 	orr.w	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d115      	bne.n	800634e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800632e:	200a      	movs	r0, #10
 8006330:	f7fb fd84 	bl	8001e3c <HAL_Delay>
      ms += 10U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	330a      	adds	r3, #10
 8006338:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 f939 	bl	80075b2 <USB_GetMode>
 8006340:	4603      	mov	r3, r0
 8006342:	2b01      	cmp	r3, #1
 8006344:	d01e      	beq.n	8006384 <USB_SetCurrentMode+0x84>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2bc7      	cmp	r3, #199	; 0xc7
 800634a:	d9f0      	bls.n	800632e <USB_SetCurrentMode+0x2e>
 800634c:	e01a      	b.n	8006384 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d115      	bne.n	8006380 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006360:	200a      	movs	r0, #10
 8006362:	f7fb fd6b 	bl	8001e3c <HAL_Delay>
      ms += 10U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	330a      	adds	r3, #10
 800636a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 f920 	bl	80075b2 <USB_GetMode>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <USB_SetCurrentMode+0x84>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2bc7      	cmp	r3, #199	; 0xc7
 800637c:	d9f0      	bls.n	8006360 <USB_SetCurrentMode+0x60>
 800637e:	e001      	b.n	8006384 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e005      	b.n	8006390 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2bc8      	cmp	r3, #200	; 0xc8
 8006388:	d101      	bne.n	800638e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006398:	b084      	sub	sp, #16
 800639a:	b580      	push	{r7, lr}
 800639c:	b086      	sub	sp, #24
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80063a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	e009      	b.n	80063cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	3340      	adds	r3, #64	; 0x40
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3301      	adds	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b0e      	cmp	r3, #14
 80063d0:	d9f2      	bls.n	80063b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d11c      	bne.n	8006414 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e8:	f043 0302 	orr.w	r3, r3, #2
 80063ec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
 8006412:	e00b      	b.n	800642c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006432:	461a      	mov	r2, r3
 8006434:	2300      	movs	r3, #0
 8006436:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006438:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800643c:	2b01      	cmp	r3, #1
 800643e:	d10d      	bne.n	800645c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006448:	2100      	movs	r1, #0
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f968 	bl	8006720 <USB_SetDevSpeed>
 8006450:	e008      	b.n	8006464 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006452:	2101      	movs	r1, #1
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f963 	bl	8006720 <USB_SetDevSpeed>
 800645a:	e003      	b.n	8006464 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800645c:	2103      	movs	r1, #3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f95e 	bl	8006720 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006464:	2110      	movs	r1, #16
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f8fa 	bl	8006660 <USB_FlushTxFifo>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f924 	bl	80066c4 <USB_FlushRxFifo>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648c:	461a      	mov	r2, r3
 800648e:	2300      	movs	r3, #0
 8006490:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006498:	461a      	mov	r2, r3
 800649a:	2300      	movs	r3, #0
 800649c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a4:	461a      	mov	r2, r3
 80064a6:	2300      	movs	r3, #0
 80064a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064aa:	2300      	movs	r3, #0
 80064ac:	613b      	str	r3, [r7, #16]
 80064ae:	e043      	b.n	8006538 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064c6:	d118      	bne.n	80064fa <USB_DevInit+0x162>
    {
      if (i == 0U)
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064da:	461a      	mov	r2, r3
 80064dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	e013      	b.n	800650c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f0:	461a      	mov	r2, r3
 80064f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	e008      	b.n	800650c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006506:	461a      	mov	r2, r3
 8006508:	2300      	movs	r3, #0
 800650a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006518:	461a      	mov	r2, r3
 800651a:	2300      	movs	r3, #0
 800651c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652a:	461a      	mov	r2, r3
 800652c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006530:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	3301      	adds	r3, #1
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800653c:	461a      	mov	r2, r3
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4293      	cmp	r3, r2
 8006542:	d3b5      	bcc.n	80064b0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006544:	2300      	movs	r3, #0
 8006546:	613b      	str	r3, [r7, #16]
 8006548:	e043      	b.n	80065d2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800655c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006560:	d118      	bne.n	8006594 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006574:	461a      	mov	r2, r3
 8006576:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	e013      	b.n	80065a6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	461a      	mov	r2, r3
 800658c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e008      	b.n	80065a6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	461a      	mov	r2, r3
 80065a2:	2300      	movs	r3, #0
 80065a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	461a      	mov	r2, r3
 80065b4:	2300      	movs	r3, #0
 80065b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c4:	461a      	mov	r2, r3
 80065c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	3301      	adds	r3, #1
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065d6:	461a      	mov	r2, r3
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4293      	cmp	r3, r2
 80065dc:	d3b5      	bcc.n	800654a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006600:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006604:	2b00      	cmp	r3, #0
 8006606:	d105      	bne.n	8006614 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f043 0210 	orr.w	r2, r3, #16
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	4b10      	ldr	r3, [pc, #64]	; (800665c <USB_DevInit+0x2c4>)
 800661a:	4313      	orrs	r3, r2
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006620:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f043 0208 	orr.w	r2, r3, #8
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006634:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006638:	2b01      	cmp	r3, #1
 800663a:	d107      	bne.n	800664c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006644:	f043 0304 	orr.w	r3, r3, #4
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800664c:	7dfb      	ldrb	r3, [r7, #23]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006658:	b004      	add	sp, #16
 800665a:	4770      	bx	lr
 800665c:	803c3800 	.word	0x803c3800

08006660 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800667a:	d901      	bls.n	8006680 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e01b      	b.n	80066b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	daf2      	bge.n	800666e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	019b      	lsls	r3, r3, #6
 8006690:	f043 0220 	orr.w	r2, r3, #32
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80066a4:	d901      	bls.n	80066aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e006      	b.n	80066b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d0f0      	beq.n	8006698 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	3301      	adds	r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80066dc:	d901      	bls.n	80066e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e018      	b.n	8006714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	daf2      	bge.n	80066d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2210      	movs	r2, #16
 80066f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3301      	adds	r3, #1
 80066f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006700:	d901      	bls.n	8006706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e006      	b.n	8006714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0310 	and.w	r3, r3, #16
 800670e:	2b10      	cmp	r3, #16
 8006710:	d0f0      	beq.n	80066f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	460b      	mov	r3, r1
 800672a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	68f9      	ldr	r1, [r7, #12]
 800673c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006740:	4313      	orrs	r3, r2
 8006742:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006752:	b480      	push	{r7}
 8006754:	b087      	sub	sp, #28
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 0306 	and.w	r3, r3, #6
 800676a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d102      	bne.n	8006778 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
 8006776:	e00a      	b.n	800678e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d002      	beq.n	8006784 <USB_GetDevSpeed+0x32>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b06      	cmp	r3, #6
 8006782:	d102      	bne.n	800678a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006784:	2302      	movs	r3, #2
 8006786:	75fb      	strb	r3, [r7, #23]
 8006788:	e001      	b.n	800678e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800678a:	230f      	movs	r3, #15
 800678c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800678e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006790:	4618      	mov	r0, r3
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d13a      	bne.n	800682e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	2101      	movs	r1, #1
 80067ca:	fa01 f303 	lsl.w	r3, r1, r3
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	68f9      	ldr	r1, [r7, #12]
 80067d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d155      	bne.n	800689c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	791b      	ldrb	r3, [r3, #4]
 800680a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800680c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	059b      	lsls	r3, r3, #22
 8006812:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006814:	4313      	orrs	r3, r2
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	0151      	lsls	r1, r2, #5
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	440a      	add	r2, r1
 800681e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	e036      	b.n	800689c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006834:	69da      	ldr	r2, [r3, #28]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	2101      	movs	r1, #1
 8006840:	fa01 f303 	lsl.w	r3, r1, r3
 8006844:	041b      	lsls	r3, r3, #16
 8006846:	68f9      	ldr	r1, [r7, #12]
 8006848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800684c:	4313      	orrs	r3, r2
 800684e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d11a      	bne.n	800689c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	791b      	ldrb	r3, [r3, #4]
 8006880:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006882:	430b      	orrs	r3, r1
 8006884:	4313      	orrs	r3, r2
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
	...

080068ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	785b      	ldrb	r3, [r3, #1]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d161      	bne.n	800698c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068de:	d11f      	bne.n	8006920 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	440a      	add	r2, r1
 8006916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800691e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	f003 030f 	and.w	r3, r3, #15
 8006930:	2101      	movs	r1, #1
 8006932:	fa01 f303 	lsl.w	r3, r1, r3
 8006936:	b29b      	uxth	r3, r3
 8006938:	43db      	mvns	r3, r3
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006940:	4013      	ands	r3, r2
 8006942:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694a:	69da      	ldr	r2, [r3, #28]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	2101      	movs	r1, #1
 8006956:	fa01 f303 	lsl.w	r3, r1, r3
 800695a:	b29b      	uxth	r3, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006964:	4013      	ands	r3, r2
 8006966:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	0159      	lsls	r1, r3, #5
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	440b      	add	r3, r1
 800697e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006982:	4619      	mov	r1, r3
 8006984:	4b35      	ldr	r3, [pc, #212]	; (8006a5c <USB_DeactivateEndpoint+0x1b0>)
 8006986:	4013      	ands	r3, r2
 8006988:	600b      	str	r3, [r1, #0]
 800698a:	e060      	b.n	8006a4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800699e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069a2:	d11f      	bne.n	80069e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	2101      	movs	r1, #1
 80069f6:	fa01 f303 	lsl.w	r3, r1, r3
 80069fa:	041b      	lsls	r3, r3, #16
 80069fc:	43db      	mvns	r3, r3
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a04:	4013      	ands	r3, r2
 8006a06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	2101      	movs	r1, #1
 8006a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	43db      	mvns	r3, r3
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a28:	4013      	ands	r3, r2
 8006a2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	0159      	lsls	r1, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	440b      	add	r3, r1
 8006a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a46:	4619      	mov	r1, r3
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <USB_DeactivateEndpoint+0x1b4>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	ec337800 	.word	0xec337800
 8006a60:	eff37800 	.word	0xeff37800

08006a64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08a      	sub	sp, #40	; 0x28
 8006a68:	af02      	add	r7, sp, #8
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	f040 817a 	bne.w	8006d7a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d132      	bne.n	8006af4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006aac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ab0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006acc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ad0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aec:	0cdb      	lsrs	r3, r3, #19
 8006aee:	04db      	lsls	r3, r3, #19
 8006af0:	6113      	str	r3, [r2, #16]
 8006af2:	e092      	b.n	8006c1a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	0151      	lsls	r1, r2, #5
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	440a      	add	r2, r1
 8006b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b0e:	0cdb      	lsrs	r3, r3, #19
 8006b10:	04db      	lsls	r3, r3, #19
 8006b12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	0151      	lsls	r1, r2, #5
 8006b26:	69fa      	ldr	r2, [r7, #28]
 8006b28:	440a      	add	r2, r1
 8006b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b36:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d11a      	bne.n	8006b74 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d903      	bls.n	8006b52 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b70:	6113      	str	r3, [r2, #16]
 8006b72:	e01b      	b.n	8006bac <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b80:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6919      	ldr	r1, [r3, #16]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	440b      	add	r3, r1
 8006b8c:	1e59      	subs	r1, r3, #1
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b96:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b98:	4ba2      	ldr	r3, [pc, #648]	; (8006e24 <USB_EPStartXfer+0x3c0>)
 8006b9a:	400b      	ands	r3, r1
 8006b9c:	69b9      	ldr	r1, [r7, #24]
 8006b9e:	0148      	lsls	r0, r1, #5
 8006ba0:	69f9      	ldr	r1, [r7, #28]
 8006ba2:	4401      	add	r1, r0
 8006ba4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb8:	691a      	ldr	r2, [r3, #16]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bc2:	69b9      	ldr	r1, [r7, #24]
 8006bc4:	0148      	lsls	r0, r1, #5
 8006bc6:	69f9      	ldr	r1, [r7, #28]
 8006bc8:	4401      	add	r1, r0
 8006bca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d11f      	bne.n	8006c1a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006bf8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	0151      	lsls	r1, r2, #5
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	440a      	add	r2, r1
 8006c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d14b      	bne.n	8006cb8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d009      	beq.n	8006c3c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	461a      	mov	r2, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	791b      	ldrb	r3, [r3, #4]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d128      	bne.n	8006c96 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d110      	bne.n	8006c76 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	e00f      	b.n	8006c96 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	69fa      	ldr	r2, [r7, #28]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	69fa      	ldr	r2, [r7, #28]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	e165      	b.n	8006f84 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	791b      	ldrb	r3, [r3, #4]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d015      	beq.n	8006d0c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 814d 	beq.w	8006f84 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006d00:	69f9      	ldr	r1, [r7, #28]
 8006d02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d06:	4313      	orrs	r3, r2
 8006d08:	634b      	str	r3, [r1, #52]	; 0x34
 8006d0a:	e13b      	b.n	8006f84 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d110      	bne.n	8006d3e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	69fa      	ldr	r2, [r7, #28]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	e00f      	b.n	8006d5e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	0151      	lsls	r1, r2, #5
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	440a      	add	r2, r1
 8006d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	68d9      	ldr	r1, [r3, #12]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	781a      	ldrb	r2, [r3, #0]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	b298      	uxth	r0, r3
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	4603      	mov	r3, r0
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 f9b8 	bl	80070e8 <USB_WritePacket>
 8006d78:	e104      	b.n	8006f84 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	69fa      	ldr	r2, [r7, #28]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d94:	0cdb      	lsrs	r3, r3, #19
 8006d96:	04db      	lsls	r3, r3, #19
 8006d98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006db8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dbc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d131      	bne.n	8006e28 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df2:	69b9      	ldr	r1, [r7, #24]
 8006df4:	0148      	lsls	r0, r1, #5
 8006df6:	69f9      	ldr	r1, [r7, #28]
 8006df8:	4401      	add	r1, r0
 8006dfa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e20:	6113      	str	r3, [r2, #16]
 8006e22:	e061      	b.n	8006ee8 <USB_EPStartXfer+0x484>
 8006e24:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d123      	bne.n	8006e78 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e46:	69b9      	ldr	r1, [r7, #24]
 8006e48:	0148      	lsls	r0, r1, #5
 8006e4a:	69f9      	ldr	r1, [r7, #28]
 8006e4c:	4401      	add	r1, r0
 8006e4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006e52:	4313      	orrs	r3, r2
 8006e54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	0151      	lsls	r1, r2, #5
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	440a      	add	r2, r1
 8006e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e74:	6113      	str	r3, [r2, #16]
 8006e76:	e037      	b.n	8006ee8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4413      	add	r3, r2
 8006e82:	1e5a      	subs	r2, r3, #1
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	8afa      	ldrh	r2, [r7, #22]
 8006e94:	fb03 f202 	mul.w	r2, r3, r2
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea8:	691a      	ldr	r2, [r3, #16]
 8006eaa:	8afb      	ldrh	r3, [r7, #22]
 8006eac:	04d9      	lsls	r1, r3, #19
 8006eae:	4b38      	ldr	r3, [pc, #224]	; (8006f90 <USB_EPStartXfer+0x52c>)
 8006eb0:	400b      	ands	r3, r1
 8006eb2:	69b9      	ldr	r1, [r7, #24]
 8006eb4:	0148      	lsls	r0, r1, #5
 8006eb6:	69f9      	ldr	r1, [r7, #28]
 8006eb8:	4401      	add	r1, r0
 8006eba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ece:	691a      	ldr	r2, [r3, #16]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed8:	69b9      	ldr	r1, [r7, #24]
 8006eda:	0148      	lsls	r0, r1, #5
 8006edc:	69f9      	ldr	r1, [r7, #28]
 8006ede:	4401      	add	r1, r0
 8006ee0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d10d      	bne.n	8006f0a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	68d9      	ldr	r1, [r3, #12]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f06:	460a      	mov	r2, r1
 8006f08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	791b      	ldrb	r3, [r3, #4]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d128      	bne.n	8006f64 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d110      	bne.n	8006f44 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e00f      	b.n	8006f64 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3720      	adds	r7, #32
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	1ff80000 	.word	0x1ff80000

08006f94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d14a      	bne.n	8007048 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fca:	f040 8086 	bne.w	80070da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	7812      	ldrb	r2, [r2, #0]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ff0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	7812      	ldrb	r2, [r2, #0]
 8007006:	0151      	lsls	r1, r2, #5
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	440a      	add	r2, r1
 800700c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007014:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3301      	adds	r3, #1
 800701a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007022:	4293      	cmp	r3, r2
 8007024:	d902      	bls.n	800702c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]
          break;
 800702a:	e056      	b.n	80070da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007044:	d0e7      	beq.n	8007016 <USB_EPStopXfer+0x82>
 8007046:	e048      	b.n	80070da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800705c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007060:	d13b      	bne.n	80070da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4413      	add	r3, r2
 800706c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	7812      	ldrb	r2, [r2, #0]
 8007076:	0151      	lsls	r1, r2, #5
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	440a      	add	r2, r1
 800707c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007084:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	7812      	ldrb	r2, [r2, #0]
 800709a:	0151      	lsls	r1, r2, #5
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	440a      	add	r2, r1
 80070a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d902      	bls.n	80070c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	75fb      	strb	r3, [r7, #23]
          break;
 80070be:	e00c      	b.n	80070da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d8:	d0e7      	beq.n	80070aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b089      	sub	sp, #36	; 0x24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	4611      	mov	r1, r2
 80070f4:	461a      	mov	r2, r3
 80070f6:	460b      	mov	r3, r1
 80070f8:	71fb      	strb	r3, [r7, #7]
 80070fa:	4613      	mov	r3, r2
 80070fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007106:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800710a:	2b00      	cmp	r3, #0
 800710c:	d123      	bne.n	8007156 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800710e:	88bb      	ldrh	r3, [r7, #4]
 8007110:	3303      	adds	r3, #3
 8007112:	089b      	lsrs	r3, r3, #2
 8007114:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007116:	2300      	movs	r3, #0
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	e018      	b.n	800714e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	031a      	lsls	r2, r3, #12
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	4413      	add	r3, r2
 8007124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007128:	461a      	mov	r2, r3
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	3301      	adds	r3, #1
 8007134:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	3301      	adds	r3, #1
 800713a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	3301      	adds	r3, #1
 8007140:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	3301      	adds	r3, #1
 8007146:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	3301      	adds	r3, #1
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	429a      	cmp	r2, r3
 8007154:	d3e2      	bcc.n	800711c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3724      	adds	r7, #36	; 0x24
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007164:	b480      	push	{r7}
 8007166:	b08b      	sub	sp, #44	; 0x2c
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	4613      	mov	r3, r2
 8007170:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	089b      	lsrs	r3, r3, #2
 800717e:	b29b      	uxth	r3, r3
 8007180:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	f003 0303 	and.w	r3, r3, #3
 8007188:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800718a:	2300      	movs	r3, #0
 800718c:	623b      	str	r3, [r7, #32]
 800718e:	e014      	b.n	80071ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	601a      	str	r2, [r3, #0]
    pDest++;
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	3301      	adds	r3, #1
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	3301      	adds	r3, #1
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	3301      	adds	r3, #1
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b0:	3301      	adds	r3, #1
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	3301      	adds	r3, #1
 80071b8:	623b      	str	r3, [r7, #32]
 80071ba:	6a3a      	ldr	r2, [r7, #32]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d3e6      	bcc.n	8007190 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071c2:	8bfb      	ldrh	r3, [r7, #30]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d01e      	beq.n	8007206 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d2:	461a      	mov	r2, r3
 80071d4:	f107 0310 	add.w	r3, r7, #16
 80071d8:	6812      	ldr	r2, [r2, #0]
 80071da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	fa22 f303 	lsr.w	r3, r2, r3
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	701a      	strb	r2, [r3, #0]
      i++;
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	3301      	adds	r3, #1
 80071f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	3301      	adds	r3, #1
 80071f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80071fa:	8bfb      	ldrh	r3, [r7, #30]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007200:	8bfb      	ldrh	r3, [r7, #30]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1ea      	bne.n	80071dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007208:	4618      	mov	r0, r3
 800720a:	372c      	adds	r7, #44	; 0x2c
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d12c      	bne.n	800728a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	db12      	blt.n	8007268 <USB_EPSetStall+0x54>
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00f      	beq.n	8007268 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	440a      	add	r2, r1
 800725e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007262:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007266:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	440a      	add	r2, r1
 800727e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	e02b      	b.n	80072e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	db12      	blt.n	80072c2 <USB_EPSetStall+0xae>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00f      	beq.n	80072c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	0151      	lsls	r1, r2, #5
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	440a      	add	r2, r1
 80072b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d128      	bne.n	800735e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	440a      	add	r2, r1
 8007322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800732a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	791b      	ldrb	r3, [r3, #4]
 8007330:	2b03      	cmp	r3, #3
 8007332:	d003      	beq.n	800733c <USB_EPClearStall+0x4c>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	791b      	ldrb	r3, [r3, #4]
 8007338:	2b02      	cmp	r3, #2
 800733a:	d138      	bne.n	80073ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	e027      	b.n	80073ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	440a      	add	r2, r1
 8007374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007378:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800737c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	791b      	ldrb	r3, [r3, #4]
 8007382:	2b03      	cmp	r3, #3
 8007384:	d003      	beq.n	800738e <USB_EPClearStall+0x9e>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	791b      	ldrb	r3, [r3, #4]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d10f      	bne.n	80073ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80073de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073f6:	4313      	orrs	r3, r2
 80073f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007422:	f023 0303 	bic.w	r3, r3, #3
 8007426:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007436:	f023 0302 	bic.w	r3, r3, #2
 800743a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007464:	f023 0303 	bic.w	r3, r3, #3
 8007468:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007478:	f043 0302 	orr.w	r3, r3, #2
 800747c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4013      	ands	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074a4:	68fb      	ldr	r3, [r7, #12]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	4013      	ands	r3, r2
 80074d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	0c1b      	lsrs	r3, r3, #16
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	4013      	ands	r3, r2
 8007508:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	b29b      	uxth	r3, r3
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800751a:	b480      	push	{r7}
 800751c:	b085      	sub	sp, #20
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800752a:	78fb      	ldrb	r3, [r7, #3]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	4013      	ands	r3, r2
 8007546:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007548:	68bb      	ldr	r3, [r7, #8]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007556:	b480      	push	{r7}
 8007558:	b087      	sub	sp, #28
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007578:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	fa22 f303 	lsr.w	r3, r2, r3
 8007586:	01db      	lsls	r3, r3, #7
 8007588:	b2db      	uxtb	r3, r3
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4313      	orrs	r3, r2
 800758e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4013      	ands	r3, r2
 80075a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075a4:	68bb      	ldr	r3, [r7, #8]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f003 0301 	and.w	r3, r3, #1
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80075ec:	f023 0307 	bic.w	r3, r3, #7
 80075f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007604:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	460b      	mov	r3, r1
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	333c      	adds	r3, #60	; 0x3c
 800762a:	3304      	adds	r3, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	4a26      	ldr	r2, [pc, #152]	; (80076cc <USB_EP0_OutStart+0xb8>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d90a      	bls.n	800764e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007648:	d101      	bne.n	800764e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	e037      	b.n	80076be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007654:	461a      	mov	r2, r3
 8007656:	2300      	movs	r3, #0
 8007658:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007668:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800766c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800767c:	f043 0318 	orr.w	r3, r3, #24
 8007680:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007690:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007694:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d10f      	bne.n	80076bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a2:	461a      	mov	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80076ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	4f54300a 	.word	0x4f54300a

080076d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80076e8:	d901      	bls.n	80076ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e01b      	b.n	8007726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	daf2      	bge.n	80076dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f043 0201 	orr.w	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	3301      	adds	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007712:	d901      	bls.n	8007718 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e006      	b.n	8007726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b01      	cmp	r3, #1
 8007722:	d0f0      	beq.n	8007706 <USB_CoreReset+0x36>

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
	...

08007734 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007740:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007744:	f002 fc8a 	bl	800a05c <USBD_static_malloc>
 8007748:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d109      	bne.n	8007764 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	32b0      	adds	r2, #176	; 0xb0
 800775a:	2100      	movs	r1, #0
 800775c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007760:	2302      	movs	r3, #2
 8007762:	e0d4      	b.n	800790e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007764:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007768:	2100      	movs	r1, #0
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f003 fa25 	bl	800abba <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	32b0      	adds	r2, #176	; 0xb0
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	32b0      	adds	r2, #176	; 0xb0
 800778a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	7c1b      	ldrb	r3, [r3, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d138      	bne.n	800780e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800779c:	4b5e      	ldr	r3, [pc, #376]	; (8007918 <USBD_CDC_Init+0x1e4>)
 800779e:	7819      	ldrb	r1, [r3, #0]
 80077a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a4:	2202      	movs	r2, #2
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f002 fb35 	bl	8009e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077ac:	4b5a      	ldr	r3, [pc, #360]	; (8007918 <USBD_CDC_Init+0x1e4>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f003 020f 	and.w	r2, r3, #15
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	440b      	add	r3, r1
 80077c0:	3324      	adds	r3, #36	; 0x24
 80077c2:	2201      	movs	r2, #1
 80077c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077c6:	4b55      	ldr	r3, [pc, #340]	; (800791c <USBD_CDC_Init+0x1e8>)
 80077c8:	7819      	ldrb	r1, [r3, #0]
 80077ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ce:	2202      	movs	r2, #2
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f002 fb20 	bl	8009e16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80077d6:	4b51      	ldr	r3, [pc, #324]	; (800791c <USBD_CDC_Init+0x1e8>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f003 020f 	and.w	r2, r3, #15
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80077ee:	2201      	movs	r2, #1
 80077f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80077f2:	4b4b      	ldr	r3, [pc, #300]	; (8007920 <USBD_CDC_Init+0x1ec>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	f003 020f 	and.w	r2, r3, #15
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	3326      	adds	r3, #38	; 0x26
 8007808:	2210      	movs	r2, #16
 800780a:	801a      	strh	r2, [r3, #0]
 800780c:	e035      	b.n	800787a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800780e:	4b42      	ldr	r3, [pc, #264]	; (8007918 <USBD_CDC_Init+0x1e4>)
 8007810:	7819      	ldrb	r1, [r3, #0]
 8007812:	2340      	movs	r3, #64	; 0x40
 8007814:	2202      	movs	r2, #2
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f002 fafd 	bl	8009e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800781c:	4b3e      	ldr	r3, [pc, #248]	; (8007918 <USBD_CDC_Init+0x1e4>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	f003 020f 	and.w	r2, r3, #15
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	440b      	add	r3, r1
 8007830:	3324      	adds	r3, #36	; 0x24
 8007832:	2201      	movs	r2, #1
 8007834:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007836:	4b39      	ldr	r3, [pc, #228]	; (800791c <USBD_CDC_Init+0x1e8>)
 8007838:	7819      	ldrb	r1, [r3, #0]
 800783a:	2340      	movs	r3, #64	; 0x40
 800783c:	2202      	movs	r2, #2
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f002 fae9 	bl	8009e16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007844:	4b35      	ldr	r3, [pc, #212]	; (800791c <USBD_CDC_Init+0x1e8>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 020f 	and.w	r2, r3, #15
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800785c:	2201      	movs	r2, #1
 800785e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007860:	4b2f      	ldr	r3, [pc, #188]	; (8007920 <USBD_CDC_Init+0x1ec>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	f003 020f 	and.w	r2, r3, #15
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	3326      	adds	r3, #38	; 0x26
 8007876:	2210      	movs	r2, #16
 8007878:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800787a:	4b29      	ldr	r3, [pc, #164]	; (8007920 <USBD_CDC_Init+0x1ec>)
 800787c:	7819      	ldrb	r1, [r3, #0]
 800787e:	2308      	movs	r3, #8
 8007880:	2203      	movs	r2, #3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f002 fac7 	bl	8009e16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007888:	4b25      	ldr	r3, [pc, #148]	; (8007920 <USBD_CDC_Init+0x1ec>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f003 020f 	and.w	r2, r3, #15
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	440b      	add	r3, r1
 800789c:	3324      	adds	r3, #36	; 0x24
 800789e:	2201      	movs	r2, #1
 80078a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	33b0      	adds	r3, #176	; 0xb0
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80078d8:	2302      	movs	r3, #2
 80078da:	e018      	b.n	800790e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7c1b      	ldrb	r3, [r3, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10a      	bne.n	80078fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078e4:	4b0d      	ldr	r3, [pc, #52]	; (800791c <USBD_CDC_Init+0x1e8>)
 80078e6:	7819      	ldrb	r1, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f002 fb7e 	bl	8009ff4 <USBD_LL_PrepareReceive>
 80078f8:	e008      	b.n	800790c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078fa:	4b08      	ldr	r3, [pc, #32]	; (800791c <USBD_CDC_Init+0x1e8>)
 80078fc:	7819      	ldrb	r1, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007904:	2340      	movs	r3, #64	; 0x40
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f002 fb74 	bl	8009ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000093 	.word	0x20000093
 800791c:	20000094 	.word	0x20000094
 8007920:	20000095 	.word	0x20000095

08007924 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007930:	4b3a      	ldr	r3, [pc, #232]	; (8007a1c <USBD_CDC_DeInit+0xf8>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f002 fa93 	bl	8009e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800793c:	4b37      	ldr	r3, [pc, #220]	; (8007a1c <USBD_CDC_DeInit+0xf8>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	f003 020f 	and.w	r2, r3, #15
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	440b      	add	r3, r1
 8007950:	3324      	adds	r3, #36	; 0x24
 8007952:	2200      	movs	r2, #0
 8007954:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007956:	4b32      	ldr	r3, [pc, #200]	; (8007a20 <USBD_CDC_DeInit+0xfc>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f002 fa80 	bl	8009e62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007962:	4b2f      	ldr	r3, [pc, #188]	; (8007a20 <USBD_CDC_DeInit+0xfc>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f003 020f 	and.w	r2, r3, #15
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	440b      	add	r3, r1
 8007976:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800797a:	2200      	movs	r2, #0
 800797c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800797e:	4b29      	ldr	r3, [pc, #164]	; (8007a24 <USBD_CDC_DeInit+0x100>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f002 fa6c 	bl	8009e62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800798a:	4b26      	ldr	r3, [pc, #152]	; (8007a24 <USBD_CDC_DeInit+0x100>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	f003 020f 	and.w	r2, r3, #15
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	4613      	mov	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	440b      	add	r3, r1
 800799e:	3324      	adds	r3, #36	; 0x24
 80079a0:	2200      	movs	r2, #0
 80079a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80079a4:	4b1f      	ldr	r3, [pc, #124]	; (8007a24 <USBD_CDC_DeInit+0x100>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	f003 020f 	and.w	r2, r3, #15
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	3326      	adds	r3, #38	; 0x26
 80079ba:	2200      	movs	r2, #0
 80079bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	32b0      	adds	r2, #176	; 0xb0
 80079c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01f      	beq.n	8007a10 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	33b0      	adds	r3, #176	; 0xb0
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	32b0      	adds	r2, #176	; 0xb0
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f002 fb40 	bl	800a078 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	32b0      	adds	r2, #176	; 0xb0
 8007a02:	2100      	movs	r1, #0
 8007a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000093 	.word	0x20000093
 8007a20:	20000094 	.word	0x20000094
 8007a24:	20000095 	.word	0x20000095

08007a28 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	32b0      	adds	r2, #176	; 0xb0
 8007a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a40:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e0bf      	b.n	8007bd8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d050      	beq.n	8007b06 <USBD_CDC_Setup+0xde>
 8007a64:	2b20      	cmp	r3, #32
 8007a66:	f040 80af 	bne.w	8007bc8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88db      	ldrh	r3, [r3, #6]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d03a      	beq.n	8007ae8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	b25b      	sxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	da1b      	bge.n	8007ab4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	33b0      	adds	r3, #176	; 0xb0
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007a92:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	88d2      	ldrh	r2, [r2, #6]
 8007a98:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	88db      	ldrh	r3, [r3, #6]
 8007a9e:	2b07      	cmp	r3, #7
 8007aa0:	bf28      	it	cs
 8007aa2:	2307      	movcs	r3, #7
 8007aa4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	89fa      	ldrh	r2, [r7, #14]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 fd89 	bl	80095c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007ab2:	e090      	b.n	8007bd6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	785a      	ldrb	r2, [r3, #1]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	88db      	ldrh	r3, [r3, #6]
 8007ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8007ac4:	d803      	bhi.n	8007ace <USBD_CDC_Setup+0xa6>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	88db      	ldrh	r3, [r3, #6]
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	e000      	b.n	8007ad0 <USBD_CDC_Setup+0xa8>
 8007ace:	2240      	movs	r2, #64	; 0x40
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007ad6:	6939      	ldr	r1, [r7, #16]
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007ade:	461a      	mov	r2, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 fd9b 	bl	800961c <USBD_CtlPrepareRx>
      break;
 8007ae6:	e076      	b.n	8007bd6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	33b0      	adds	r3, #176	; 0xb0
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	7850      	ldrb	r0, [r2, #1]
 8007afe:	2200      	movs	r2, #0
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	4798      	blx	r3
      break;
 8007b04:	e067      	b.n	8007bd6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	2b0b      	cmp	r3, #11
 8007b0c:	d851      	bhi.n	8007bb2 <USBD_CDC_Setup+0x18a>
 8007b0e:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <USBD_CDC_Setup+0xec>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b45 	.word	0x08007b45
 8007b18:	08007bc1 	.word	0x08007bc1
 8007b1c:	08007bb3 	.word	0x08007bb3
 8007b20:	08007bb3 	.word	0x08007bb3
 8007b24:	08007bb3 	.word	0x08007bb3
 8007b28:	08007bb3 	.word	0x08007bb3
 8007b2c:	08007bb3 	.word	0x08007bb3
 8007b30:	08007bb3 	.word	0x08007bb3
 8007b34:	08007bb3 	.word	0x08007bb3
 8007b38:	08007bb3 	.word	0x08007bb3
 8007b3c:	08007b6f 	.word	0x08007b6f
 8007b40:	08007b99 	.word	0x08007b99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d107      	bne.n	8007b60 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b50:	f107 030a 	add.w	r3, r7, #10
 8007b54:	2202      	movs	r2, #2
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 fd33 	bl	80095c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b5e:	e032      	b.n	8007bc6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 fcbd 	bl	80094e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	75fb      	strb	r3, [r7, #23]
          break;
 8007b6c:	e02b      	b.n	8007bc6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d107      	bne.n	8007b8a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007b7a:	f107 030d 	add.w	r3, r7, #13
 8007b7e:	2201      	movs	r2, #1
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fd1e 	bl	80095c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b88:	e01d      	b.n	8007bc6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 fca8 	bl	80094e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b92:	2303      	movs	r3, #3
 8007b94:	75fb      	strb	r3, [r7, #23]
          break;
 8007b96:	e016      	b.n	8007bc6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d00f      	beq.n	8007bc4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 fc9b 	bl	80094e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bac:	2303      	movs	r3, #3
 8007bae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bb0:	e008      	b.n	8007bc4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 fc94 	bl	80094e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8007bbe:	e002      	b.n	8007bc6 <USBD_CDC_Setup+0x19e>
          break;
 8007bc0:	bf00      	nop
 8007bc2:	e008      	b.n	8007bd6 <USBD_CDC_Setup+0x1ae>
          break;
 8007bc4:	bf00      	nop
      }
      break;
 8007bc6:	e006      	b.n	8007bd6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007bc8:	6839      	ldr	r1, [r7, #0]
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f001 fc89 	bl	80094e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd4:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bf2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	32b0      	adds	r2, #176	; 0xb0
 8007bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e065      	b.n	8007cd6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	32b0      	adds	r2, #176	; 0xb0
 8007c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	f003 020f 	and.w	r2, r3, #15
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	3318      	adds	r3, #24
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d02f      	beq.n	8007c94 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	f003 020f 	and.w	r2, r3, #15
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	3318      	adds	r3, #24
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	f003 010f 	and.w	r1, r3, #15
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	460b      	mov	r3, r1
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	440b      	add	r3, r1
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4403      	add	r3, r0
 8007c5c:	331c      	adds	r3, #28
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c64:	fb01 f303 	mul.w	r3, r1, r3
 8007c68:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d112      	bne.n	8007c94 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	f003 020f 	and.w	r2, r3, #15
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	440b      	add	r3, r1
 8007c80:	3318      	adds	r3, #24
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c86:	78f9      	ldrb	r1, [r7, #3]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f002 f990 	bl	8009fb2 <USBD_LL_Transmit>
 8007c92:	e01f      	b.n	8007cd4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	33b0      	adds	r3, #176	; 0xb0
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d010      	beq.n	8007cd4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	33b0      	adds	r3, #176	; 0xb0
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007cd0:	78fa      	ldrb	r2, [r7, #3]
 8007cd2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	32b0      	adds	r2, #176	; 0xb0
 8007cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	32b0      	adds	r2, #176	; 0xb0
 8007d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e01a      	b.n	8007d46 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f002 f98e 	bl	800a036 <USBD_LL_GetRxDataSize>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	33b0      	adds	r3, #176	; 0xb0
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d40:	4611      	mov	r1, r2
 8007d42:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	32b0      	adds	r2, #176	; 0xb0
 8007d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e025      	b.n	8007dbc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	33b0      	adds	r3, #176	; 0xb0
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d01a      	beq.n	8007dba <USBD_CDC_EP0_RxReady+0x6c>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d8a:	2bff      	cmp	r3, #255	; 0xff
 8007d8c:	d015      	beq.n	8007dba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	33b0      	adds	r3, #176	; 0xb0
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007da6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dae:	b292      	uxth	r2, r2
 8007db0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	22ff      	movs	r2, #255	; 0xff
 8007db6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007dcc:	2182      	movs	r1, #130	; 0x82
 8007dce:	4818      	ldr	r0, [pc, #96]	; (8007e30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dd0:	f000 fd4f 	bl	8008872 <USBD_GetEpDesc>
 8007dd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	4815      	ldr	r0, [pc, #84]	; (8007e30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007dda:	f000 fd4a 	bl	8008872 <USBD_GetEpDesc>
 8007dde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007de0:	2181      	movs	r1, #129	; 0x81
 8007de2:	4813      	ldr	r0, [pc, #76]	; (8007e30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007de4:	f000 fd45 	bl	8008872 <USBD_GetEpDesc>
 8007de8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2210      	movs	r2, #16
 8007df4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d006      	beq.n	8007e0a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e04:	711a      	strb	r2, [r3, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d006      	beq.n	8007e1e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e18:	711a      	strb	r2, [r3, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2243      	movs	r2, #67	; 0x43
 8007e22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e24:	4b02      	ldr	r3, [pc, #8]	; (8007e30 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000050 	.word	0x20000050

08007e34 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e3c:	2182      	movs	r1, #130	; 0x82
 8007e3e:	4818      	ldr	r0, [pc, #96]	; (8007ea0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e40:	f000 fd17 	bl	8008872 <USBD_GetEpDesc>
 8007e44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e46:	2101      	movs	r1, #1
 8007e48:	4815      	ldr	r0, [pc, #84]	; (8007ea0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e4a:	f000 fd12 	bl	8008872 <USBD_GetEpDesc>
 8007e4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e50:	2181      	movs	r1, #129	; 0x81
 8007e52:	4813      	ldr	r0, [pc, #76]	; (8007ea0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e54:	f000 fd0d 	bl	8008872 <USBD_GetEpDesc>
 8007e58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2210      	movs	r2, #16
 8007e64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d006      	beq.n	8007e7a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	711a      	strb	r2, [r3, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f042 0202 	orr.w	r2, r2, #2
 8007e78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d006      	beq.n	8007e8e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	711a      	strb	r2, [r3, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f042 0202 	orr.w	r2, r2, #2
 8007e8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2243      	movs	r2, #67	; 0x43
 8007e92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e94:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000050 	.word	0x20000050

08007ea4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007eac:	2182      	movs	r1, #130	; 0x82
 8007eae:	4818      	ldr	r0, [pc, #96]	; (8007f10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007eb0:	f000 fcdf 	bl	8008872 <USBD_GetEpDesc>
 8007eb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4815      	ldr	r0, [pc, #84]	; (8007f10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007eba:	f000 fcda 	bl	8008872 <USBD_GetEpDesc>
 8007ebe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ec0:	2181      	movs	r1, #129	; 0x81
 8007ec2:	4813      	ldr	r0, [pc, #76]	; (8007f10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ec4:	f000 fcd5 	bl	8008872 <USBD_GetEpDesc>
 8007ec8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2210      	movs	r2, #16
 8007ed4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d006      	beq.n	8007eea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ee4:	711a      	strb	r2, [r3, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d006      	beq.n	8007efe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ef8:	711a      	strb	r2, [r3, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2243      	movs	r2, #67	; 0x43
 8007f02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f04:	4b02      	ldr	r3, [pc, #8]	; (8007f10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000050 	.word	0x20000050

08007f14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	220a      	movs	r2, #10
 8007f20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f22:	4b03      	ldr	r3, [pc, #12]	; (8007f30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	2000000c 	.word	0x2000000c

08007f34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e009      	b.n	8007f5c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	33b0      	adds	r3, #176	; 0xb0
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	32b0      	adds	r2, #176	; 0xb0
 8007f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f82:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e008      	b.n	8007fa0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	32b0      	adds	r2, #176	; 0xb0
 8007fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e004      	b.n	8007fda <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	32b0      	adds	r2, #176	; 0xb0
 8007ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008000:	2301      	movs	r3, #1
 8008002:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800800a:	2303      	movs	r3, #3
 800800c:	e025      	b.n	800805a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008014:	2b00      	cmp	r3, #0
 8008016:	d11f      	bne.n	8008058 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2201      	movs	r2, #1
 800801c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008020:	4b10      	ldr	r3, [pc, #64]	; (8008064 <USBD_CDC_TransmitPacket+0x7c>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	f003 020f 	and.w	r2, r3, #15
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4403      	add	r3, r0
 800803a:	3318      	adds	r3, #24
 800803c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800803e:	4b09      	ldr	r3, [pc, #36]	; (8008064 <USBD_CDC_TransmitPacket+0x7c>)
 8008040:	7819      	ldrb	r1, [r3, #0]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 ffaf 	bl	8009fb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20000093 	.word	0x20000093

08008068 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	32b0      	adds	r2, #176	; 0xb0
 800807a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	32b0      	adds	r2, #176	; 0xb0
 800808a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008092:	2303      	movs	r3, #3
 8008094:	e018      	b.n	80080c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	7c1b      	ldrb	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10a      	bne.n	80080b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800809e:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <USBD_CDC_ReceivePacket+0x68>)
 80080a0:	7819      	ldrb	r1, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 ffa1 	bl	8009ff4 <USBD_LL_PrepareReceive>
 80080b2:	e008      	b.n	80080c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080b4:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <USBD_CDC_ReceivePacket+0x68>)
 80080b6:	7819      	ldrb	r1, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080be:	2340      	movs	r3, #64	; 0x40
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 ff97 	bl	8009ff4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20000094 	.word	0x20000094

080080d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	4613      	mov	r3, r2
 80080e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e01f      	b.n	800812c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	79fa      	ldrb	r2, [r7, #7]
 800811e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f001 fe11 	bl	8009d48 <USBD_LL_Init>
 8008126:	4603      	mov	r3, r0
 8008128:	75fb      	strb	r3, [r7, #23]

  return ret;
 800812a:	7dfb      	ldrb	r3, [r7, #23]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008148:	2303      	movs	r3, #3
 800814a:	e025      	b.n	8008198 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	32ae      	adds	r2, #174	; 0xae
 800815e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00f      	beq.n	8008188 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	32ae      	adds	r2, #174	; 0xae
 8008172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	f107 020e 	add.w	r2, r7, #14
 800817c:	4610      	mov	r0, r2
 800817e:	4798      	blx	r3
 8008180:	4602      	mov	r2, r0
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 fe19 	bl	8009de0 <USBD_LL_Start>
 80081ae:	4603      	mov	r3, r0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d009      	beq.n	80081fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	4611      	mov	r1, r2
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b084      	sub	sp, #16
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	78fa      	ldrb	r2, [r7, #3]
 8008220:	4611      	mov	r1, r2
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	4798      	blx	r3
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800822c:	2303      	movs	r3, #3
 800822e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f001 f90e 	bl	800946e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008260:	461a      	mov	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800826e:	f003 031f 	and.w	r3, r3, #31
 8008272:	2b02      	cmp	r3, #2
 8008274:	d01a      	beq.n	80082ac <USBD_LL_SetupStage+0x72>
 8008276:	2b02      	cmp	r3, #2
 8008278:	d822      	bhi.n	80082c0 <USBD_LL_SetupStage+0x86>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <USBD_LL_SetupStage+0x4a>
 800827e:	2b01      	cmp	r3, #1
 8008280:	d00a      	beq.n	8008298 <USBD_LL_SetupStage+0x5e>
 8008282:	e01d      	b.n	80082c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fb65 	bl	800895c <USBD_StdDevReq>
 8008292:	4603      	mov	r3, r0
 8008294:	73fb      	strb	r3, [r7, #15]
      break;
 8008296:	e020      	b.n	80082da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fbcd 	bl	8008a40 <USBD_StdItfReq>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73fb      	strb	r3, [r7, #15]
      break;
 80082aa:	e016      	b.n	80082da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc2f 	bl	8008b18 <USBD_StdEPReq>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73fb      	strb	r3, [r7, #15]
      break;
 80082be:	e00c      	b.n	80082da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fde6 	bl	8009ea0 <USBD_LL_StallEP>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]
      break;
 80082d8:	bf00      	nop
  }

  return ret;
 80082da:	7bfb      	ldrb	r3, [r7, #15]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	460b      	mov	r3, r1
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d16e      	bne.n	80083da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008302:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800830a:	2b03      	cmp	r3, #3
 800830c:	f040 8098 	bne.w	8008440 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	429a      	cmp	r2, r3
 800831a:	d913      	bls.n	8008344 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	1ad2      	subs	r2, r2, r3
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	4293      	cmp	r3, r2
 8008334:	bf28      	it	cs
 8008336:	4613      	movcs	r3, r2
 8008338:	461a      	mov	r2, r3
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f001 f98a 	bl	8009656 <USBD_CtlContinueRx>
 8008342:	e07d      	b.n	8008440 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	2b02      	cmp	r3, #2
 8008350:	d014      	beq.n	800837c <USBD_LL_DataOutStage+0x98>
 8008352:	2b02      	cmp	r3, #2
 8008354:	d81d      	bhi.n	8008392 <USBD_LL_DataOutStage+0xae>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <USBD_LL_DataOutStage+0x7c>
 800835a:	2b01      	cmp	r3, #1
 800835c:	d003      	beq.n	8008366 <USBD_LL_DataOutStage+0x82>
 800835e:	e018      	b.n	8008392 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	75bb      	strb	r3, [r7, #22]
            break;
 8008364:	e018      	b.n	8008398 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800836c:	b2db      	uxtb	r3, r3
 800836e:	4619      	mov	r1, r3
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 fa64 	bl	800883e <USBD_CoreFindIF>
 8008376:	4603      	mov	r3, r0
 8008378:	75bb      	strb	r3, [r7, #22]
            break;
 800837a:	e00d      	b.n	8008398 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008382:	b2db      	uxtb	r3, r3
 8008384:	4619      	mov	r1, r3
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f000 fa66 	bl	8008858 <USBD_CoreFindEP>
 800838c:	4603      	mov	r3, r0
 800838e:	75bb      	strb	r3, [r7, #22]
            break;
 8008390:	e002      	b.n	8008398 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	75bb      	strb	r3, [r7, #22]
            break;
 8008396:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008398:	7dbb      	ldrb	r3, [r7, #22]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d119      	bne.n	80083d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d113      	bne.n	80083d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80083aa:	7dba      	ldrb	r2, [r7, #22]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	32ae      	adds	r2, #174	; 0xae
 80083b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80083ba:	7dba      	ldrb	r2, [r7, #22]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80083c2:	7dba      	ldrb	r2, [r7, #22]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	32ae      	adds	r2, #174	; 0xae
 80083c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f001 f950 	bl	8009678 <USBD_CtlSendStatus>
 80083d8:	e032      	b.n	8008440 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80083da:	7afb      	ldrb	r3, [r7, #11]
 80083dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	4619      	mov	r1, r3
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 fa37 	bl	8008858 <USBD_CoreFindEP>
 80083ea:	4603      	mov	r3, r0
 80083ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083ee:	7dbb      	ldrb	r3, [r7, #22]
 80083f0:	2bff      	cmp	r3, #255	; 0xff
 80083f2:	d025      	beq.n	8008440 <USBD_LL_DataOutStage+0x15c>
 80083f4:	7dbb      	ldrb	r3, [r7, #22]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d122      	bne.n	8008440 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b03      	cmp	r3, #3
 8008404:	d117      	bne.n	8008436 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008406:	7dba      	ldrb	r2, [r7, #22]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	32ae      	adds	r2, #174	; 0xae
 800840c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00f      	beq.n	8008436 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008416:	7dba      	ldrb	r2, [r7, #22]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800841e:	7dba      	ldrb	r2, [r7, #22]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	32ae      	adds	r2, #174	; 0xae
 8008424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	7afa      	ldrb	r2, [r7, #11]
 800842c:	4611      	mov	r1, r2
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	4798      	blx	r3
 8008432:	4603      	mov	r3, r0
 8008434:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	e000      	b.n	8008442 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b086      	sub	sp, #24
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	460b      	mov	r3, r1
 8008454:	607a      	str	r2, [r7, #4]
 8008456:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008458:	7afb      	ldrb	r3, [r7, #11]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d16f      	bne.n	800853e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3314      	adds	r3, #20
 8008462:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800846a:	2b02      	cmp	r3, #2
 800846c:	d15a      	bne.n	8008524 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	429a      	cmp	r2, r3
 8008478:	d914      	bls.n	80084a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	689a      	ldr	r2, [r3, #8]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	1ad2      	subs	r2, r2, r3
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	461a      	mov	r2, r3
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f001 f8b2 	bl	80095fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008496:	2300      	movs	r3, #0
 8008498:	2200      	movs	r2, #0
 800849a:	2100      	movs	r1, #0
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f001 fda9 	bl	8009ff4 <USBD_LL_PrepareReceive>
 80084a2:	e03f      	b.n	8008524 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	68da      	ldr	r2, [r3, #12]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d11c      	bne.n	80084ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d316      	bcc.n	80084ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d20f      	bcs.n	80084ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084ca:	2200      	movs	r2, #0
 80084cc:	2100      	movs	r1, #0
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f001 f893 	bl	80095fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084dc:	2300      	movs	r3, #0
 80084de:	2200      	movs	r2, #0
 80084e0:	2100      	movs	r1, #0
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f001 fd86 	bl	8009ff4 <USBD_LL_PrepareReceive>
 80084e8:	e01c      	b.n	8008524 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d10f      	bne.n	8008516 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d009      	beq.n	8008516 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008516:	2180      	movs	r1, #128	; 0x80
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f001 fcc1 	bl	8009ea0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f001 f8bd 	bl	800969e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d03a      	beq.n	80085a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7ff fe42 	bl	80081b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800853c:	e032      	b.n	80085a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008544:	b2db      	uxtb	r3, r3
 8008546:	4619      	mov	r1, r3
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 f985 	bl	8008858 <USBD_CoreFindEP>
 800854e:	4603      	mov	r3, r0
 8008550:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	2bff      	cmp	r3, #255	; 0xff
 8008556:	d025      	beq.n	80085a4 <USBD_LL_DataInStage+0x15a>
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d122      	bne.n	80085a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b03      	cmp	r3, #3
 8008568:	d11c      	bne.n	80085a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800856a:	7dfa      	ldrb	r2, [r7, #23]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	32ae      	adds	r2, #174	; 0xae
 8008570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d014      	beq.n	80085a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800857a:	7dfa      	ldrb	r2, [r7, #23]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008582:	7dfa      	ldrb	r2, [r7, #23]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	32ae      	adds	r2, #174	; 0xae
 8008588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	7afa      	ldrb	r2, [r7, #11]
 8008590:	4611      	mov	r1, r2
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	4798      	blx	r3
 8008596:	4603      	mov	r3, r0
 8008598:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800859a:	7dbb      	ldrb	r3, [r7, #22]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80085a0:	7dbb      	ldrb	r3, [r7, #22]
 80085a2:	e000      	b.n	80085a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d014      	beq.n	8008614 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00e      	beq.n	8008614 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	6852      	ldr	r2, [r2, #4]
 8008602:	b2d2      	uxtb	r2, r2
 8008604:	4611      	mov	r1, r2
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008610:	2303      	movs	r3, #3
 8008612:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008614:	2340      	movs	r3, #64	; 0x40
 8008616:	2200      	movs	r2, #0
 8008618:	2100      	movs	r1, #0
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 fbfb 	bl	8009e16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2240      	movs	r2, #64	; 0x40
 800862c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008630:	2340      	movs	r3, #64	; 0x40
 8008632:	2200      	movs	r2, #0
 8008634:	2180      	movs	r1, #128	; 0x80
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 fbed 	bl	8009e16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2240      	movs	r2, #64	; 0x40
 8008646:	621a      	str	r2, [r3, #32]

  return ret;
 8008648:	7bfb      	ldrb	r3, [r7, #15]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008652:	b480      	push	{r7}
 8008654:	b083      	sub	sp, #12
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b04      	cmp	r3, #4
 8008684:	d006      	beq.n	8008694 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868c:	b2da      	uxtb	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2204      	movs	r2, #4
 8008698:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b04      	cmp	r3, #4
 80086bc:	d106      	bne.n	80086cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d110      	bne.n	8008710 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b082      	sub	sp, #8
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	32ae      	adds	r2, #174	; 0xae
 8008730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008738:	2303      	movs	r3, #3
 800873a:	e01c      	b.n	8008776 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b03      	cmp	r3, #3
 8008746:	d115      	bne.n	8008774 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	32ae      	adds	r2, #174	; 0xae
 8008752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	32ae      	adds	r2, #174	; 0xae
 8008766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	78fa      	ldrb	r2, [r7, #3]
 800876e:	4611      	mov	r1, r2
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b082      	sub	sp, #8
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	32ae      	adds	r2, #174	; 0xae
 8008794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800879c:	2303      	movs	r3, #3
 800879e:	e01c      	b.n	80087da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d115      	bne.n	80087d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	32ae      	adds	r2, #174	; 0xae
 80087b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00b      	beq.n	80087d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	32ae      	adds	r2, #174	; 0xae
 80087ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d0:	78fa      	ldrb	r2, [r7, #3]
 80087d2:	4611      	mov	r1, r2
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00e      	beq.n	8008834 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6852      	ldr	r2, [r2, #4]
 8008822:	b2d2      	uxtb	r2, r2
 8008824:	4611      	mov	r1, r2
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	4798      	blx	r3
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008830:	2303      	movs	r3, #3
 8008832:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008834:	7bfb      	ldrb	r3, [r7, #15]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800884a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800884c:	4618      	mov	r0, r3
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008864:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008866:	4618      	mov	r0, r3
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b086      	sub	sp, #24
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008886:	2300      	movs	r3, #0
 8008888:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	885b      	ldrh	r3, [r3, #2]
 800888e:	b29a      	uxth	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	b29b      	uxth	r3, r3
 8008896:	429a      	cmp	r2, r3
 8008898:	d920      	bls.n	80088dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80088a2:	e013      	b.n	80088cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80088a4:	f107 030a 	add.w	r3, r7, #10
 80088a8:	4619      	mov	r1, r3
 80088aa:	6978      	ldr	r0, [r7, #20]
 80088ac:	f000 f81b 	bl	80088e6 <USBD_GetNextDesc>
 80088b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	785b      	ldrb	r3, [r3, #1]
 80088b6:	2b05      	cmp	r3, #5
 80088b8:	d108      	bne.n	80088cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	789b      	ldrb	r3, [r3, #2]
 80088c2:	78fa      	ldrb	r2, [r7, #3]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d008      	beq.n	80088da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	885b      	ldrh	r3, [r3, #2]
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	897b      	ldrh	r3, [r7, #10]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d8e5      	bhi.n	80088a4 <USBD_GetEpDesc+0x32>
 80088d8:	e000      	b.n	80088dc <USBD_GetEpDesc+0x6a>
          break;
 80088da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80088dc:	693b      	ldr	r3, [r7, #16]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b085      	sub	sp, #20
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	881a      	ldrh	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	4413      	add	r3, r2
 8008900:	b29a      	uxth	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4413      	add	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008912:	68fb      	ldr	r3, [r7, #12]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	3301      	adds	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800893e:	8a3b      	ldrh	r3, [r7, #16]
 8008940:	021b      	lsls	r3, r3, #8
 8008942:	b21a      	sxth	r2, r3
 8008944:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008948:	4313      	orrs	r3, r2
 800894a:	b21b      	sxth	r3, r3
 800894c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800894e:	89fb      	ldrh	r3, [r7, #14]
}
 8008950:	4618      	mov	r0, r3
 8008952:	371c      	adds	r7, #28
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008972:	2b40      	cmp	r3, #64	; 0x40
 8008974:	d005      	beq.n	8008982 <USBD_StdDevReq+0x26>
 8008976:	2b40      	cmp	r3, #64	; 0x40
 8008978:	d857      	bhi.n	8008a2a <USBD_StdDevReq+0xce>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00f      	beq.n	800899e <USBD_StdDevReq+0x42>
 800897e:	2b20      	cmp	r3, #32
 8008980:	d153      	bne.n	8008a2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	32ae      	adds	r2, #174	; 0xae
 800898c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
 8008998:	4603      	mov	r3, r0
 800899a:	73fb      	strb	r3, [r7, #15]
      break;
 800899c:	e04a      	b.n	8008a34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	2b09      	cmp	r3, #9
 80089a4:	d83b      	bhi.n	8008a1e <USBD_StdDevReq+0xc2>
 80089a6:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <USBD_StdDevReq+0x50>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	08008a01 	.word	0x08008a01
 80089b0:	08008a15 	.word	0x08008a15
 80089b4:	08008a1f 	.word	0x08008a1f
 80089b8:	08008a0b 	.word	0x08008a0b
 80089bc:	08008a1f 	.word	0x08008a1f
 80089c0:	080089df 	.word	0x080089df
 80089c4:	080089d5 	.word	0x080089d5
 80089c8:	08008a1f 	.word	0x08008a1f
 80089cc:	080089f7 	.word	0x080089f7
 80089d0:	080089e9 	.word	0x080089e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80089d4:	6839      	ldr	r1, [r7, #0]
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fa3c 	bl	8008e54 <USBD_GetDescriptor>
          break;
 80089dc:	e024      	b.n	8008a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fba1 	bl	8009128 <USBD_SetAddress>
          break;
 80089e6:	e01f      	b.n	8008a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fbe0 	bl	80091b0 <USBD_SetConfig>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73fb      	strb	r3, [r7, #15]
          break;
 80089f4:	e018      	b.n	8008a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fc83 	bl	8009304 <USBD_GetConfig>
          break;
 80089fe:	e013      	b.n	8008a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fcb4 	bl	8009370 <USBD_GetStatus>
          break;
 8008a08:	e00e      	b.n	8008a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fce3 	bl	80093d8 <USBD_SetFeature>
          break;
 8008a12:	e009      	b.n	8008a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fd07 	bl	800942a <USBD_ClrFeature>
          break;
 8008a1c:	e004      	b.n	8008a28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fd5e 	bl	80094e2 <USBD_CtlError>
          break;
 8008a26:	bf00      	nop
      }
      break;
 8008a28:	e004      	b.n	8008a34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fd58 	bl	80094e2 <USBD_CtlError>
      break;
 8008a32:	bf00      	nop
  }

  return ret;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop

08008a40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a56:	2b40      	cmp	r3, #64	; 0x40
 8008a58:	d005      	beq.n	8008a66 <USBD_StdItfReq+0x26>
 8008a5a:	2b40      	cmp	r3, #64	; 0x40
 8008a5c:	d852      	bhi.n	8008b04 <USBD_StdItfReq+0xc4>
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <USBD_StdItfReq+0x26>
 8008a62:	2b20      	cmp	r3, #32
 8008a64:	d14e      	bne.n	8008b04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d840      	bhi.n	8008af6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	889b      	ldrh	r3, [r3, #4]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d836      	bhi.n	8008aec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	889b      	ldrh	r3, [r3, #4]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff fed9 	bl	800883e <USBD_CoreFindIF>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	2bff      	cmp	r3, #255	; 0xff
 8008a94:	d01d      	beq.n	8008ad2 <USBD_StdItfReq+0x92>
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d11a      	bne.n	8008ad2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008a9c:	7bba      	ldrb	r2, [r7, #14]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	32ae      	adds	r2, #174	; 0xae
 8008aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00f      	beq.n	8008acc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008aac:	7bba      	ldrb	r2, [r7, #14]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ab4:	7bba      	ldrb	r2, [r7, #14]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	32ae      	adds	r2, #174	; 0xae
 8008aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	6839      	ldr	r1, [r7, #0]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4798      	blx	r3
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008aca:	e004      	b.n	8008ad6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008acc:	2303      	movs	r3, #3
 8008ace:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008ad0:	e001      	b.n	8008ad6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	88db      	ldrh	r3, [r3, #6]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d110      	bne.n	8008b00 <USBD_StdItfReq+0xc0>
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10d      	bne.n	8008b00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fdc7 	bl	8009678 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008aea:	e009      	b.n	8008b00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fcf7 	bl	80094e2 <USBD_CtlError>
          break;
 8008af4:	e004      	b.n	8008b00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fcf2 	bl	80094e2 <USBD_CtlError>
          break;
 8008afe:	e000      	b.n	8008b02 <USBD_StdItfReq+0xc2>
          break;
 8008b00:	bf00      	nop
      }
      break;
 8008b02:	e004      	b.n	8008b0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fceb 	bl	80094e2 <USBD_CtlError>
      break;
 8008b0c:	bf00      	nop
  }

  return ret;
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	889b      	ldrh	r3, [r3, #4]
 8008b2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b34:	2b40      	cmp	r3, #64	; 0x40
 8008b36:	d007      	beq.n	8008b48 <USBD_StdEPReq+0x30>
 8008b38:	2b40      	cmp	r3, #64	; 0x40
 8008b3a:	f200 817f 	bhi.w	8008e3c <USBD_StdEPReq+0x324>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d02a      	beq.n	8008b98 <USBD_StdEPReq+0x80>
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	f040 817a 	bne.w	8008e3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b48:	7bbb      	ldrb	r3, [r7, #14]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff fe83 	bl	8008858 <USBD_CoreFindEP>
 8008b52:	4603      	mov	r3, r0
 8008b54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b56:	7b7b      	ldrb	r3, [r7, #13]
 8008b58:	2bff      	cmp	r3, #255	; 0xff
 8008b5a:	f000 8174 	beq.w	8008e46 <USBD_StdEPReq+0x32e>
 8008b5e:	7b7b      	ldrb	r3, [r7, #13]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f040 8170 	bne.w	8008e46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008b66:	7b7a      	ldrb	r2, [r7, #13]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b6e:	7b7a      	ldrb	r2, [r7, #13]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	32ae      	adds	r2, #174	; 0xae
 8008b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 8163 	beq.w	8008e46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008b80:	7b7a      	ldrb	r2, [r7, #13]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32ae      	adds	r2, #174	; 0xae
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	4798      	blx	r3
 8008b92:	4603      	mov	r3, r0
 8008b94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b96:	e156      	b.n	8008e46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	785b      	ldrb	r3, [r3, #1]
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	d008      	beq.n	8008bb2 <USBD_StdEPReq+0x9a>
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	f300 8145 	bgt.w	8008e30 <USBD_StdEPReq+0x318>
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 809b 	beq.w	8008ce2 <USBD_StdEPReq+0x1ca>
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d03c      	beq.n	8008c2a <USBD_StdEPReq+0x112>
 8008bb0:	e13e      	b.n	8008e30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d002      	beq.n	8008bc4 <USBD_StdEPReq+0xac>
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d016      	beq.n	8008bf0 <USBD_StdEPReq+0xd8>
 8008bc2:	e02c      	b.n	8008c1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00d      	beq.n	8008be6 <USBD_StdEPReq+0xce>
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	2b80      	cmp	r3, #128	; 0x80
 8008bce:	d00a      	beq.n	8008be6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 f963 	bl	8009ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bda:	2180      	movs	r1, #128	; 0x80
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f95f 	bl	8009ea0 <USBD_LL_StallEP>
 8008be2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008be4:	e020      	b.n	8008c28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fc7a 	bl	80094e2 <USBD_CtlError>
              break;
 8008bee:	e01b      	b.n	8008c28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	885b      	ldrh	r3, [r3, #2]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10e      	bne.n	8008c16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008bf8:	7bbb      	ldrb	r3, [r7, #14]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00b      	beq.n	8008c16 <USBD_StdEPReq+0xfe>
 8008bfe:	7bbb      	ldrb	r3, [r7, #14]
 8008c00:	2b80      	cmp	r3, #128	; 0x80
 8008c02:	d008      	beq.n	8008c16 <USBD_StdEPReq+0xfe>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	88db      	ldrh	r3, [r3, #6]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d104      	bne.n	8008c16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 f945 	bl	8009ea0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fd2e 	bl	8009678 <USBD_CtlSendStatus>

              break;
 8008c1c:	e004      	b.n	8008c28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fc5e 	bl	80094e2 <USBD_CtlError>
              break;
 8008c26:	bf00      	nop
          }
          break;
 8008c28:	e107      	b.n	8008e3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d002      	beq.n	8008c3c <USBD_StdEPReq+0x124>
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d016      	beq.n	8008c68 <USBD_StdEPReq+0x150>
 8008c3a:	e04b      	b.n	8008cd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00d      	beq.n	8008c5e <USBD_StdEPReq+0x146>
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b80      	cmp	r3, #128	; 0x80
 8008c46:	d00a      	beq.n	8008c5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 f927 	bl	8009ea0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c52:	2180      	movs	r1, #128	; 0x80
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 f923 	bl	8009ea0 <USBD_LL_StallEP>
 8008c5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c5c:	e040      	b.n	8008ce0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fc3e 	bl	80094e2 <USBD_CtlError>
              break;
 8008c66:	e03b      	b.n	8008ce0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	885b      	ldrh	r3, [r3, #2]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d136      	bne.n	8008cde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d004      	beq.n	8008c84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 f92d 	bl	8009ede <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fcf7 	bl	8009678 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7ff fde2 	bl	8008858 <USBD_CoreFindEP>
 8008c94:	4603      	mov	r3, r0
 8008c96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c98:	7b7b      	ldrb	r3, [r7, #13]
 8008c9a:	2bff      	cmp	r3, #255	; 0xff
 8008c9c:	d01f      	beq.n	8008cde <USBD_StdEPReq+0x1c6>
 8008c9e:	7b7b      	ldrb	r3, [r7, #13]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d11c      	bne.n	8008cde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ca4:	7b7a      	ldrb	r2, [r7, #13]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008cac:	7b7a      	ldrb	r2, [r7, #13]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	32ae      	adds	r2, #174	; 0xae
 8008cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d010      	beq.n	8008cde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008cbc:	7b7a      	ldrb	r2, [r7, #13]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	32ae      	adds	r2, #174	; 0xae
 8008cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	4798      	blx	r3
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008cd2:	e004      	b.n	8008cde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fc03 	bl	80094e2 <USBD_CtlError>
              break;
 8008cdc:	e000      	b.n	8008ce0 <USBD_StdEPReq+0x1c8>
              break;
 8008cde:	bf00      	nop
          }
          break;
 8008ce0:	e0ab      	b.n	8008e3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d002      	beq.n	8008cf4 <USBD_StdEPReq+0x1dc>
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d032      	beq.n	8008d58 <USBD_StdEPReq+0x240>
 8008cf2:	e097      	b.n	8008e24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d007      	beq.n	8008d0a <USBD_StdEPReq+0x1f2>
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b80      	cmp	r3, #128	; 0x80
 8008cfe:	d004      	beq.n	8008d0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fbed 	bl	80094e2 <USBD_CtlError>
                break;
 8008d08:	e091      	b.n	8008e2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	da0b      	bge.n	8008d2a <USBD_StdEPReq+0x212>
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d18:	4613      	mov	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	3310      	adds	r3, #16
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	4413      	add	r3, r2
 8008d26:	3304      	adds	r3, #4
 8008d28:	e00b      	b.n	8008d42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d30:	4613      	mov	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	4413      	add	r3, r2
 8008d40:	3304      	adds	r3, #4
 8008d42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fc37 	bl	80095c4 <USBD_CtlSendData>
              break;
 8008d56:	e06a      	b.n	8008e2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	da11      	bge.n	8008d84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
 8008d62:	f003 020f 	and.w	r2, r3, #15
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	440b      	add	r3, r1
 8008d72:	3324      	adds	r3, #36	; 0x24
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d117      	bne.n	8008daa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fbb0 	bl	80094e2 <USBD_CtlError>
                  break;
 8008d82:	e054      	b.n	8008e2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	f003 020f 	and.w	r2, r3, #15
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d104      	bne.n	8008daa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fb9d 	bl	80094e2 <USBD_CtlError>
                  break;
 8008da8:	e041      	b.n	8008e2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008daa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	da0b      	bge.n	8008dca <USBD_StdEPReq+0x2b2>
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
 8008db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	3310      	adds	r3, #16
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	e00b      	b.n	8008de2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dca:	7bbb      	ldrb	r3, [r7, #14]
 8008dcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	4413      	add	r3, r2
 8008de0:	3304      	adds	r3, #4
 8008de2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d002      	beq.n	8008df0 <USBD_StdEPReq+0x2d8>
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	2b80      	cmp	r3, #128	; 0x80
 8008dee:	d103      	bne.n	8008df8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	e00e      	b.n	8008e16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f001 f88d 	bl	8009f1c <USBD_LL_IsStallEP>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	e002      	b.n	8008e16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fbd1 	bl	80095c4 <USBD_CtlSendData>
              break;
 8008e22:	e004      	b.n	8008e2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fb5b 	bl	80094e2 <USBD_CtlError>
              break;
 8008e2c:	bf00      	nop
          }
          break;
 8008e2e:	e004      	b.n	8008e3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fb55 	bl	80094e2 <USBD_CtlError>
          break;
 8008e38:	bf00      	nop
      }
      break;
 8008e3a:	e005      	b.n	8008e48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fb4f 	bl	80094e2 <USBD_CtlError>
      break;
 8008e44:	e000      	b.n	8008e48 <USBD_StdEPReq+0x330>
      break;
 8008e46:	bf00      	nop
  }

  return ret;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	885b      	ldrh	r3, [r3, #2]
 8008e6e:	0a1b      	lsrs	r3, r3, #8
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	3b01      	subs	r3, #1
 8008e74:	2b06      	cmp	r3, #6
 8008e76:	f200 8128 	bhi.w	80090ca <USBD_GetDescriptor+0x276>
 8008e7a:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <USBD_GetDescriptor+0x2c>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008e9d 	.word	0x08008e9d
 8008e84:	08008eb5 	.word	0x08008eb5
 8008e88:	08008ef5 	.word	0x08008ef5
 8008e8c:	080090cb 	.word	0x080090cb
 8008e90:	080090cb 	.word	0x080090cb
 8008e94:	0800906b 	.word	0x0800906b
 8008e98:	08009097 	.word	0x08009097
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	7c12      	ldrb	r2, [r2, #16]
 8008ea8:	f107 0108 	add.w	r1, r7, #8
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
 8008eb0:	60f8      	str	r0, [r7, #12]
      break;
 8008eb2:	e112      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7c1b      	ldrb	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10d      	bne.n	8008ed8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec4:	f107 0208 	add.w	r2, r7, #8
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
 8008ecc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ed6:	e100      	b.n	80090da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	f107 0208 	add.w	r2, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	3301      	adds	r3, #1
 8008eee:	2202      	movs	r2, #2
 8008ef0:	701a      	strb	r2, [r3, #0]
      break;
 8008ef2:	e0f2      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	885b      	ldrh	r3, [r3, #2]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b05      	cmp	r3, #5
 8008efc:	f200 80ac 	bhi.w	8009058 <USBD_GetDescriptor+0x204>
 8008f00:	a201      	add	r2, pc, #4	; (adr r2, 8008f08 <USBD_GetDescriptor+0xb4>)
 8008f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f06:	bf00      	nop
 8008f08:	08008f21 	.word	0x08008f21
 8008f0c:	08008f55 	.word	0x08008f55
 8008f10:	08008f89 	.word	0x08008f89
 8008f14:	08008fbd 	.word	0x08008fbd
 8008f18:	08008ff1 	.word	0x08008ff1
 8008f1c:	08009025 	.word	0x08009025
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	7c12      	ldrb	r2, [r2, #16]
 8008f38:	f107 0108 	add.w	r1, r7, #8
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4798      	blx	r3
 8008f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f42:	e091      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 facb 	bl	80094e2 <USBD_CtlError>
            err++;
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	72fb      	strb	r3, [r7, #11]
          break;
 8008f52:	e089      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7c12      	ldrb	r2, [r2, #16]
 8008f6c:	f107 0108 	add.w	r1, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f76:	e077      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fab1 	bl	80094e2 <USBD_CtlError>
            err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
          break;
 8008f86:	e06f      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	7c12      	ldrb	r2, [r2, #16]
 8008fa0:	f107 0108 	add.w	r1, r7, #8
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4798      	blx	r3
 8008fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008faa:	e05d      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa97 	bl	80094e2 <USBD_CtlError>
            err++;
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fba:	e055      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	7c12      	ldrb	r2, [r2, #16]
 8008fd4:	f107 0108 	add.w	r1, r7, #8
 8008fd8:	4610      	mov	r0, r2
 8008fda:	4798      	blx	r3
 8008fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fde:	e043      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa7d 	bl	80094e2 <USBD_CtlError>
            err++;
 8008fe8:	7afb      	ldrb	r3, [r7, #11]
 8008fea:	3301      	adds	r3, #1
 8008fec:	72fb      	strb	r3, [r7, #11]
          break;
 8008fee:	e03b      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00b      	beq.n	8009014 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	7c12      	ldrb	r2, [r2, #16]
 8009008:	f107 0108 	add.w	r1, r7, #8
 800900c:	4610      	mov	r0, r2
 800900e:	4798      	blx	r3
 8009010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009012:	e029      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa63 	bl	80094e2 <USBD_CtlError>
            err++;
 800901c:	7afb      	ldrb	r3, [r7, #11]
 800901e:	3301      	adds	r3, #1
 8009020:	72fb      	strb	r3, [r7, #11]
          break;
 8009022:	e021      	b.n	8009068 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00b      	beq.n	8009048 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	7c12      	ldrb	r2, [r2, #16]
 800903c:	f107 0108 	add.w	r1, r7, #8
 8009040:	4610      	mov	r0, r2
 8009042:	4798      	blx	r3
 8009044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009046:	e00f      	b.n	8009068 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa49 	bl	80094e2 <USBD_CtlError>
            err++;
 8009050:	7afb      	ldrb	r3, [r7, #11]
 8009052:	3301      	adds	r3, #1
 8009054:	72fb      	strb	r3, [r7, #11]
          break;
 8009056:	e007      	b.n	8009068 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa41 	bl	80094e2 <USBD_CtlError>
          err++;
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	3301      	adds	r3, #1
 8009064:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009066:	bf00      	nop
      }
      break;
 8009068:	e037      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	7c1b      	ldrb	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907a:	f107 0208 	add.w	r2, r7, #8
 800907e:	4610      	mov	r0, r2
 8009080:	4798      	blx	r3
 8009082:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009084:	e029      	b.n	80090da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fa2a 	bl	80094e2 <USBD_CtlError>
        err++;
 800908e:	7afb      	ldrb	r3, [r7, #11]
 8009090:	3301      	adds	r3, #1
 8009092:	72fb      	strb	r3, [r7, #11]
      break;
 8009094:	e021      	b.n	80090da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	7c1b      	ldrb	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10d      	bne.n	80090ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a6:	f107 0208 	add.w	r2, r7, #8
 80090aa:	4610      	mov	r0, r2
 80090ac:	4798      	blx	r3
 80090ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3301      	adds	r3, #1
 80090b4:	2207      	movs	r2, #7
 80090b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090b8:	e00f      	b.n	80090da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa10 	bl	80094e2 <USBD_CtlError>
        err++;
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	3301      	adds	r3, #1
 80090c6:	72fb      	strb	r3, [r7, #11]
      break;
 80090c8:	e007      	b.n	80090da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fa08 	bl	80094e2 <USBD_CtlError>
      err++;
 80090d2:	7afb      	ldrb	r3, [r7, #11]
 80090d4:	3301      	adds	r3, #1
 80090d6:	72fb      	strb	r3, [r7, #11]
      break;
 80090d8:	bf00      	nop
  }

  if (err != 0U)
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d11e      	bne.n	800911e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	88db      	ldrh	r3, [r3, #6]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d016      	beq.n	8009116 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80090e8:	893b      	ldrh	r3, [r7, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00e      	beq.n	800910c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	88da      	ldrh	r2, [r3, #6]
 80090f2:	893b      	ldrh	r3, [r7, #8]
 80090f4:	4293      	cmp	r3, r2
 80090f6:	bf28      	it	cs
 80090f8:	4613      	movcs	r3, r2
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090fe:	893b      	ldrh	r3, [r7, #8]
 8009100:	461a      	mov	r2, r3
 8009102:	68f9      	ldr	r1, [r7, #12]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fa5d 	bl	80095c4 <USBD_CtlSendData>
 800910a:	e009      	b.n	8009120 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f9e7 	bl	80094e2 <USBD_CtlError>
 8009114:	e004      	b.n	8009120 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 faae 	bl	8009678 <USBD_CtlSendStatus>
 800911c:	e000      	b.n	8009120 <USBD_GetDescriptor+0x2cc>
    return;
 800911e:	bf00      	nop
  }
}
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop

08009128 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	889b      	ldrh	r3, [r3, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d131      	bne.n	800919e <USBD_SetAddress+0x76>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	88db      	ldrh	r3, [r3, #6]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d12d      	bne.n	800919e <USBD_SetAddress+0x76>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	885b      	ldrh	r3, [r3, #2]
 8009146:	2b7f      	cmp	r3, #127	; 0x7f
 8009148:	d829      	bhi.n	800919e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	885b      	ldrh	r3, [r3, #2]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009154:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b03      	cmp	r3, #3
 8009160:	d104      	bne.n	800916c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f9bc 	bl	80094e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916a:	e01d      	b.n	80091a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7bfa      	ldrb	r2, [r7, #15]
 8009170:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fefb 	bl	8009f74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa7a 	bl	8009678 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d004      	beq.n	8009194 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2202      	movs	r2, #2
 800918e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009192:	e009      	b.n	80091a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919c:	e004      	b.n	80091a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800919e:	6839      	ldr	r1, [r7, #0]
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f99e 	bl	80094e2 <USBD_CtlError>
  }
}
 80091a6:	bf00      	nop
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	4b4e      	ldr	r3, [pc, #312]	; (8009300 <USBD_SetConfig+0x150>)
 80091c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091c8:	4b4d      	ldr	r3, [pc, #308]	; (8009300 <USBD_SetConfig+0x150>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d905      	bls.n	80091dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f985 	bl	80094e2 <USBD_CtlError>
    return USBD_FAIL;
 80091d8:	2303      	movs	r3, #3
 80091da:	e08c      	b.n	80092f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d002      	beq.n	80091ee <USBD_SetConfig+0x3e>
 80091e8:	2b03      	cmp	r3, #3
 80091ea:	d029      	beq.n	8009240 <USBD_SetConfig+0x90>
 80091ec:	e075      	b.n	80092da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80091ee:	4b44      	ldr	r3, [pc, #272]	; (8009300 <USBD_SetConfig+0x150>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d020      	beq.n	8009238 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80091f6:	4b42      	ldr	r3, [pc, #264]	; (8009300 <USBD_SetConfig+0x150>)
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009200:	4b3f      	ldr	r3, [pc, #252]	; (8009300 <USBD_SetConfig+0x150>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7fe ffe1 	bl	80081ce <USBD_SetClassConfig>
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d008      	beq.n	8009228 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f962 	bl	80094e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2202      	movs	r2, #2
 8009222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009226:	e065      	b.n	80092f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fa25 	bl	8009678 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2203      	movs	r2, #3
 8009232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009236:	e05d      	b.n	80092f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa1d 	bl	8009678 <USBD_CtlSendStatus>
      break;
 800923e:	e059      	b.n	80092f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009240:	4b2f      	ldr	r3, [pc, #188]	; (8009300 <USBD_SetConfig+0x150>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d112      	bne.n	800926e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009250:	4b2b      	ldr	r3, [pc, #172]	; (8009300 <USBD_SetConfig+0x150>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800925a:	4b29      	ldr	r3, [pc, #164]	; (8009300 <USBD_SetConfig+0x150>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7fe ffd0 	bl	8008206 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa06 	bl	8009678 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800926c:	e042      	b.n	80092f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800926e:	4b24      	ldr	r3, [pc, #144]	; (8009300 <USBD_SetConfig+0x150>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	429a      	cmp	r2, r3
 800927a:	d02a      	beq.n	80092d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	b2db      	uxtb	r3, r3
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7fe ffbe 	bl	8008206 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800928a:	4b1d      	ldr	r3, [pc, #116]	; (8009300 <USBD_SetConfig+0x150>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009294:	4b1a      	ldr	r3, [pc, #104]	; (8009300 <USBD_SetConfig+0x150>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7fe ff97 	bl	80081ce <USBD_SetClassConfig>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00f      	beq.n	80092ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f918 	bl	80094e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fe ffa3 	bl	8008206 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092c8:	e014      	b.n	80092f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f9d4 	bl	8009678 <USBD_CtlSendStatus>
      break;
 80092d0:	e010      	b.n	80092f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f9d0 	bl	8009678 <USBD_CtlSendStatus>
      break;
 80092d8:	e00c      	b.n	80092f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f900 	bl	80094e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092e2:	4b07      	ldr	r3, [pc, #28]	; (8009300 <USBD_SetConfig+0x150>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7fe ff8c 	bl	8008206 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80092ee:	2303      	movs	r3, #3
 80092f0:	73fb      	strb	r3, [r7, #15]
      break;
 80092f2:	bf00      	nop
  }

  return ret;
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20000510 	.word	0x20000510

08009304 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	88db      	ldrh	r3, [r3, #6]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d004      	beq.n	8009320 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f8e2 	bl	80094e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800931e:	e023      	b.n	8009368 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b02      	cmp	r3, #2
 800932a:	dc02      	bgt.n	8009332 <USBD_GetConfig+0x2e>
 800932c:	2b00      	cmp	r3, #0
 800932e:	dc03      	bgt.n	8009338 <USBD_GetConfig+0x34>
 8009330:	e015      	b.n	800935e <USBD_GetConfig+0x5a>
 8009332:	2b03      	cmp	r3, #3
 8009334:	d00b      	beq.n	800934e <USBD_GetConfig+0x4a>
 8009336:	e012      	b.n	800935e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3308      	adds	r3, #8
 8009342:	2201      	movs	r2, #1
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f93c 	bl	80095c4 <USBD_CtlSendData>
        break;
 800934c:	e00c      	b.n	8009368 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	3304      	adds	r3, #4
 8009352:	2201      	movs	r2, #1
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f934 	bl	80095c4 <USBD_CtlSendData>
        break;
 800935c:	e004      	b.n	8009368 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f8be 	bl	80094e2 <USBD_CtlError>
        break;
 8009366:	bf00      	nop
}
 8009368:	bf00      	nop
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009380:	b2db      	uxtb	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	2b02      	cmp	r3, #2
 8009386:	d81e      	bhi.n	80093c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	88db      	ldrh	r3, [r3, #6]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d004      	beq.n	800939a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f8a5 	bl	80094e2 <USBD_CtlError>
        break;
 8009398:	e01a      	b.n	80093d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d005      	beq.n	80093b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	f043 0202 	orr.w	r2, r3, #2
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	330c      	adds	r3, #12
 80093ba:	2202      	movs	r2, #2
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f900 	bl	80095c4 <USBD_CtlSendData>
      break;
 80093c4:	e004      	b.n	80093d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f88a 	bl	80094e2 <USBD_CtlError>
      break;
 80093ce:	bf00      	nop
  }
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	885b      	ldrh	r3, [r3, #2]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d107      	bne.n	80093fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f940 	bl	8009678 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80093f8:	e013      	b.n	8009422 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	885b      	ldrh	r3, [r3, #2]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d10b      	bne.n	800941a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	889b      	ldrh	r3, [r3, #4]
 8009406:	0a1b      	lsrs	r3, r3, #8
 8009408:	b29b      	uxth	r3, r3
 800940a:	b2da      	uxtb	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f930 	bl	8009678 <USBD_CtlSendStatus>
}
 8009418:	e003      	b.n	8009422 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800941a:	6839      	ldr	r1, [r7, #0]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f860 	bl	80094e2 <USBD_CtlError>
}
 8009422:	bf00      	nop
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800943a:	b2db      	uxtb	r3, r3
 800943c:	3b01      	subs	r3, #1
 800943e:	2b02      	cmp	r3, #2
 8009440:	d80b      	bhi.n	800945a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	885b      	ldrh	r3, [r3, #2]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d10c      	bne.n	8009464 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 f910 	bl	8009678 <USBD_CtlSendStatus>
      }
      break;
 8009458:	e004      	b.n	8009464 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f840 	bl	80094e2 <USBD_CtlError>
      break;
 8009462:	e000      	b.n	8009466 <USBD_ClrFeature+0x3c>
      break;
 8009464:	bf00      	nop
  }
}
 8009466:	bf00      	nop
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	781a      	ldrb	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3301      	adds	r3, #1
 8009488:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	781a      	ldrb	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f7ff fa41 	bl	8008920 <SWAPBYTE>
 800949e:	4603      	mov	r3, r0
 80094a0:	461a      	mov	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3301      	adds	r3, #1
 80094aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7ff fa34 	bl	8008920 <SWAPBYTE>
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	3301      	adds	r3, #1
 80094c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3301      	adds	r3, #1
 80094ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff fa27 	bl	8008920 <SWAPBYTE>
 80094d2:	4603      	mov	r3, r0
 80094d4:	461a      	mov	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	80da      	strh	r2, [r3, #6]
}
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094ec:	2180      	movs	r1, #128	; 0x80
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fcd6 	bl	8009ea0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094f4:	2100      	movs	r1, #0
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fcd2 	bl	8009ea0 <USBD_LL_StallEP>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d036      	beq.n	8009588 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800951e:	6938      	ldr	r0, [r7, #16]
 8009520:	f000 f836 	bl	8009590 <USBD_GetLen>
 8009524:	4603      	mov	r3, r0
 8009526:	3301      	adds	r3, #1
 8009528:	b29b      	uxth	r3, r3
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	b29a      	uxth	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009532:	7dfb      	ldrb	r3, [r7, #23]
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	4413      	add	r3, r2
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	7812      	ldrb	r2, [r2, #0]
 800953c:	701a      	strb	r2, [r3, #0]
  idx++;
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	3301      	adds	r3, #1
 8009542:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	4413      	add	r3, r2
 800954a:	2203      	movs	r2, #3
 800954c:	701a      	strb	r2, [r3, #0]
  idx++;
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	3301      	adds	r3, #1
 8009552:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009554:	e013      	b.n	800957e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	4413      	add	r3, r2
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	7812      	ldrb	r2, [r2, #0]
 8009560:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	3301      	adds	r3, #1
 8009566:	613b      	str	r3, [r7, #16]
    idx++;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	3301      	adds	r3, #1
 800956c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	4413      	add	r3, r2
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
    idx++;
 8009578:	7dfb      	ldrb	r3, [r7, #23]
 800957a:	3301      	adds	r3, #1
 800957c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d1e7      	bne.n	8009556 <USBD_GetString+0x52>
 8009586:	e000      	b.n	800958a <USBD_GetString+0x86>
    return;
 8009588:	bf00      	nop
  }
}
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095a0:	e005      	b.n	80095ae <USBD_GetLen+0x1e>
  {
    len++;
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
 80095a4:	3301      	adds	r3, #1
 80095a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	3301      	adds	r3, #1
 80095ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1f5      	bne.n	80095a2 <USBD_GetLen+0x12>
  }

  return len;
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3714      	adds	r7, #20
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2202      	movs	r2, #2
 80095d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	2100      	movs	r1, #0
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f000 fce1 	bl	8009fb2 <USBD_LL_Transmit>

  return USBD_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	2100      	movs	r1, #0
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 fcd0 	bl	8009fb2 <USBD_LL_Transmit>

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2203      	movs	r2, #3
 800962c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68ba      	ldr	r2, [r7, #8]
 8009644:	2100      	movs	r1, #0
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 fcd4 	bl	8009ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	2100      	movs	r1, #0
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 fcc3 	bl	8009ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2204      	movs	r2, #4
 8009684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009688:	2300      	movs	r3, #0
 800968a:	2200      	movs	r2, #0
 800968c:	2100      	movs	r1, #0
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fc8f 	bl	8009fb2 <USBD_LL_Transmit>

  return USBD_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2205      	movs	r2, #5
 80096aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096ae:	2300      	movs	r3, #0
 80096b0:	2200      	movs	r2, #0
 80096b2:	2100      	movs	r1, #0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fc9d 	bl	8009ff4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096c8:	2200      	movs	r2, #0
 80096ca:	4912      	ldr	r1, [pc, #72]	; (8009714 <MX_USB_DEVICE_Init+0x50>)
 80096cc:	4812      	ldr	r0, [pc, #72]	; (8009718 <MX_USB_DEVICE_Init+0x54>)
 80096ce:	f7fe fd01 	bl	80080d4 <USBD_Init>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096d8:	f7f7 ffc0 	bl	800165c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80096dc:	490f      	ldr	r1, [pc, #60]	; (800971c <MX_USB_DEVICE_Init+0x58>)
 80096de:	480e      	ldr	r0, [pc, #56]	; (8009718 <MX_USB_DEVICE_Init+0x54>)
 80096e0:	f7fe fd28 	bl	8008134 <USBD_RegisterClass>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096ea:	f7f7 ffb7 	bl	800165c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80096ee:	490c      	ldr	r1, [pc, #48]	; (8009720 <MX_USB_DEVICE_Init+0x5c>)
 80096f0:	4809      	ldr	r0, [pc, #36]	; (8009718 <MX_USB_DEVICE_Init+0x54>)
 80096f2:	f7fe fc1f 	bl	8007f34 <USBD_CDC_RegisterInterface>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096fc:	f7f7 ffae 	bl	800165c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009700:	4805      	ldr	r0, [pc, #20]	; (8009718 <MX_USB_DEVICE_Init+0x54>)
 8009702:	f7fe fd4d 	bl	80081a0 <USBD_Start>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800970c:	f7f7 ffa6 	bl	800165c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009710:	bf00      	nop
 8009712:	bd80      	pop	{r7, pc}
 8009714:	200000ac 	.word	0x200000ac
 8009718:	20000514 	.word	0x20000514
 800971c:	20000018 	.word	0x20000018
 8009720:	20000098 	.word	0x20000098

08009724 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009728:	2200      	movs	r2, #0
 800972a:	4905      	ldr	r1, [pc, #20]	; (8009740 <CDC_Init_FS+0x1c>)
 800972c:	4805      	ldr	r0, [pc, #20]	; (8009744 <CDC_Init_FS+0x20>)
 800972e:	f7fe fc1b 	bl	8007f68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009732:	4905      	ldr	r1, [pc, #20]	; (8009748 <CDC_Init_FS+0x24>)
 8009734:	4803      	ldr	r0, [pc, #12]	; (8009744 <CDC_Init_FS+0x20>)
 8009736:	f7fe fc39 	bl	8007fac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800973a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800973c:	4618      	mov	r0, r3
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20000ff0 	.word	0x20000ff0
 8009744:	20000514 	.word	0x20000514
 8009748:	200007f0 	.word	0x200007f0

0800974c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009750:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009752:	4618      	mov	r0, r3
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	6039      	str	r1, [r7, #0]
 8009766:	71fb      	strb	r3, [r7, #7]
 8009768:	4613      	mov	r3, r2
 800976a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	2b23      	cmp	r3, #35	; 0x23
 8009770:	d84a      	bhi.n	8009808 <CDC_Control_FS+0xac>
 8009772:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <CDC_Control_FS+0x1c>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	08009809 	.word	0x08009809
 800977c:	08009809 	.word	0x08009809
 8009780:	08009809 	.word	0x08009809
 8009784:	08009809 	.word	0x08009809
 8009788:	08009809 	.word	0x08009809
 800978c:	08009809 	.word	0x08009809
 8009790:	08009809 	.word	0x08009809
 8009794:	08009809 	.word	0x08009809
 8009798:	08009809 	.word	0x08009809
 800979c:	08009809 	.word	0x08009809
 80097a0:	08009809 	.word	0x08009809
 80097a4:	08009809 	.word	0x08009809
 80097a8:	08009809 	.word	0x08009809
 80097ac:	08009809 	.word	0x08009809
 80097b0:	08009809 	.word	0x08009809
 80097b4:	08009809 	.word	0x08009809
 80097b8:	08009809 	.word	0x08009809
 80097bc:	08009809 	.word	0x08009809
 80097c0:	08009809 	.word	0x08009809
 80097c4:	08009809 	.word	0x08009809
 80097c8:	08009809 	.word	0x08009809
 80097cc:	08009809 	.word	0x08009809
 80097d0:	08009809 	.word	0x08009809
 80097d4:	08009809 	.word	0x08009809
 80097d8:	08009809 	.word	0x08009809
 80097dc:	08009809 	.word	0x08009809
 80097e0:	08009809 	.word	0x08009809
 80097e4:	08009809 	.word	0x08009809
 80097e8:	08009809 	.word	0x08009809
 80097ec:	08009809 	.word	0x08009809
 80097f0:	08009809 	.word	0x08009809
 80097f4:	08009809 	.word	0x08009809
 80097f8:	08009809 	.word	0x08009809
 80097fc:	08009809 	.word	0x08009809
 8009800:	08009809 	.word	0x08009809
 8009804:	08009809 	.word	0x08009809
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009808:	bf00      	nop
  }

  return (USBD_OK);
 800980a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	4805      	ldr	r0, [pc, #20]	; (800983c <CDC_Receive_FS+0x24>)
 8009826:	f7fe fbc1 	bl	8007fac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800982a:	4804      	ldr	r0, [pc, #16]	; (800983c <CDC_Receive_FS+0x24>)
 800982c:	f7fe fc1c 	bl	8008068 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009830:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20000514 	.word	0x20000514

08009840 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009850:	4b0d      	ldr	r3, [pc, #52]	; (8009888 <CDC_Transmit_FS+0x48>)
 8009852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009856:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009862:	2301      	movs	r3, #1
 8009864:	e00b      	b.n	800987e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009866:	887b      	ldrh	r3, [r7, #2]
 8009868:	461a      	mov	r2, r3
 800986a:	6879      	ldr	r1, [r7, #4]
 800986c:	4806      	ldr	r0, [pc, #24]	; (8009888 <CDC_Transmit_FS+0x48>)
 800986e:	f7fe fb7b 	bl	8007f68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009872:	4805      	ldr	r0, [pc, #20]	; (8009888 <CDC_Transmit_FS+0x48>)
 8009874:	f7fe fbb8 	bl	8007fe8 <USBD_CDC_TransmitPacket>
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800987c:	7bfb      	ldrb	r3, [r7, #15]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000514 	.word	0x20000514

0800988c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800989e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	371c      	adds	r7, #28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
	...

080098b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	6039      	str	r1, [r7, #0]
 80098ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2212      	movs	r2, #18
 80098c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098c2:	4b03      	ldr	r3, [pc, #12]	; (80098d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	200000c8 	.word	0x200000c8

080098d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	6039      	str	r1, [r7, #0]
 80098de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2204      	movs	r2, #4
 80098e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098e6:	4b03      	ldr	r3, [pc, #12]	; (80098f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	200000dc 	.word	0x200000dc

080098f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d105      	bne.n	8009916 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	4907      	ldr	r1, [pc, #28]	; (800992c <USBD_FS_ProductStrDescriptor+0x34>)
 800990e:	4808      	ldr	r0, [pc, #32]	; (8009930 <USBD_FS_ProductStrDescriptor+0x38>)
 8009910:	f7ff fdf8 	bl	8009504 <USBD_GetString>
 8009914:	e004      	b.n	8009920 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	4904      	ldr	r1, [pc, #16]	; (800992c <USBD_FS_ProductStrDescriptor+0x34>)
 800991a:	4805      	ldr	r0, [pc, #20]	; (8009930 <USBD_FS_ProductStrDescriptor+0x38>)
 800991c:	f7ff fdf2 	bl	8009504 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009920:	4b02      	ldr	r3, [pc, #8]	; (800992c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	200017f0 	.word	0x200017f0
 8009930:	0800ca9c 	.word	0x0800ca9c

08009934 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	6039      	str	r1, [r7, #0]
 800993e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	4904      	ldr	r1, [pc, #16]	; (8009954 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009944:	4804      	ldr	r0, [pc, #16]	; (8009958 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009946:	f7ff fddd 	bl	8009504 <USBD_GetString>
  return USBD_StrDesc;
 800994a:	4b02      	ldr	r3, [pc, #8]	; (8009954 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800994c:	4618      	mov	r0, r3
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	200017f0 	.word	0x200017f0
 8009958:	0800cab4 	.word	0x0800cab4

0800995c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	6039      	str	r1, [r7, #0]
 8009966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	221a      	movs	r2, #26
 800996c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800996e:	f000 f843 	bl	80099f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009972:	4b02      	ldr	r3, [pc, #8]	; (800997c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	200000e0 	.word	0x200000e0

08009980 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d105      	bne.n	800999e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	4907      	ldr	r1, [pc, #28]	; (80099b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009996:	4808      	ldr	r0, [pc, #32]	; (80099b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009998:	f7ff fdb4 	bl	8009504 <USBD_GetString>
 800999c:	e004      	b.n	80099a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4904      	ldr	r1, [pc, #16]	; (80099b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099a2:	4805      	ldr	r0, [pc, #20]	; (80099b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099a4:	f7ff fdae 	bl	8009504 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099a8:	4b02      	ldr	r3, [pc, #8]	; (80099b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	200017f0 	.word	0x200017f0
 80099b8:	0800cac8 	.word	0x0800cac8

080099bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	6039      	str	r1, [r7, #0]
 80099c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d105      	bne.n	80099da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099ce:	683a      	ldr	r2, [r7, #0]
 80099d0:	4907      	ldr	r1, [pc, #28]	; (80099f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099d2:	4808      	ldr	r0, [pc, #32]	; (80099f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099d4:	f7ff fd96 	bl	8009504 <USBD_GetString>
 80099d8:	e004      	b.n	80099e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	4904      	ldr	r1, [pc, #16]	; (80099f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099de:	4805      	ldr	r0, [pc, #20]	; (80099f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099e0:	f7ff fd90 	bl	8009504 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099e4:	4b02      	ldr	r3, [pc, #8]	; (80099f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	200017f0 	.word	0x200017f0
 80099f4:	0800cad4 	.word	0x0800cad4

080099f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80099fe:	4b0f      	ldr	r3, [pc, #60]	; (8009a3c <Get_SerialNum+0x44>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a04:	4b0e      	ldr	r3, [pc, #56]	; (8009a40 <Get_SerialNum+0x48>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a0a:	4b0e      	ldr	r3, [pc, #56]	; (8009a44 <Get_SerialNum+0x4c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4413      	add	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a1e:	2208      	movs	r2, #8
 8009a20:	4909      	ldr	r1, [pc, #36]	; (8009a48 <Get_SerialNum+0x50>)
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f000 f814 	bl	8009a50 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a28:	2204      	movs	r2, #4
 8009a2a:	4908      	ldr	r1, [pc, #32]	; (8009a4c <Get_SerialNum+0x54>)
 8009a2c:	68b8      	ldr	r0, [r7, #8]
 8009a2e:	f000 f80f 	bl	8009a50 <IntToUnicode>
  }
}
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	1fff7a10 	.word	0x1fff7a10
 8009a40:	1fff7a14 	.word	0x1fff7a14
 8009a44:	1fff7a18 	.word	0x1fff7a18
 8009a48:	200000e2 	.word	0x200000e2
 8009a4c:	200000f2 	.word	0x200000f2

08009a50 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a62:	2300      	movs	r3, #0
 8009a64:	75fb      	strb	r3, [r7, #23]
 8009a66:	e027      	b.n	8009ab8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	0f1b      	lsrs	r3, r3, #28
 8009a6c:	2b09      	cmp	r3, #9
 8009a6e:	d80b      	bhi.n	8009a88 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	0f1b      	lsrs	r3, r3, #28
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	440b      	add	r3, r1
 8009a80:	3230      	adds	r2, #48	; 0x30
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	701a      	strb	r2, [r3, #0]
 8009a86:	e00a      	b.n	8009a9e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	0f1b      	lsrs	r3, r3, #28
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	4619      	mov	r1, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	440b      	add	r3, r1
 8009a98:	3237      	adds	r2, #55	; 0x37
 8009a9a:	b2d2      	uxtb	r2, r2
 8009a9c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	011b      	lsls	r3, r3, #4
 8009aa2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	4413      	add	r3, r2
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	75fb      	strb	r3, [r7, #23]
 8009ab8:	7dfa      	ldrb	r2, [r7, #23]
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d3d3      	bcc.n	8009a68 <IntToUnicode+0x18>
  }
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	371c      	adds	r7, #28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
	...

08009ad0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	; 0x28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ad8:	f107 0314 	add.w	r3, r7, #20
 8009adc:	2200      	movs	r2, #0
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	605a      	str	r2, [r3, #4]
 8009ae2:	609a      	str	r2, [r3, #8]
 8009ae4:	60da      	str	r2, [r3, #12]
 8009ae6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009af0:	d13a      	bne.n	8009b68 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009af2:	2300      	movs	r3, #0
 8009af4:	613b      	str	r3, [r7, #16]
 8009af6:	4b1e      	ldr	r3, [pc, #120]	; (8009b70 <HAL_PCD_MspInit+0xa0>)
 8009af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afa:	4a1d      	ldr	r2, [pc, #116]	; (8009b70 <HAL_PCD_MspInit+0xa0>)
 8009afc:	f043 0301 	orr.w	r3, r3, #1
 8009b00:	6313      	str	r3, [r2, #48]	; 0x30
 8009b02:	4b1b      	ldr	r3, [pc, #108]	; (8009b70 <HAL_PCD_MspInit+0xa0>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	613b      	str	r3, [r7, #16]
 8009b0c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b14:	2302      	movs	r3, #2
 8009b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b20:	230a      	movs	r3, #10
 8009b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b24:	f107 0314 	add.w	r3, r7, #20
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4812      	ldr	r0, [pc, #72]	; (8009b74 <HAL_PCD_MspInit+0xa4>)
 8009b2c:	f7f8 fd76 	bl	800261c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b30:	4b0f      	ldr	r3, [pc, #60]	; (8009b70 <HAL_PCD_MspInit+0xa0>)
 8009b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b34:	4a0e      	ldr	r2, [pc, #56]	; (8009b70 <HAL_PCD_MspInit+0xa0>)
 8009b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b3a:	6353      	str	r3, [r2, #52]	; 0x34
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <HAL_PCD_MspInit+0xa0>)
 8009b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b44:	4a0a      	ldr	r2, [pc, #40]	; (8009b70 <HAL_PCD_MspInit+0xa0>)
 8009b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b4a:	6453      	str	r3, [r2, #68]	; 0x44
 8009b4c:	4b08      	ldr	r3, [pc, #32]	; (8009b70 <HAL_PCD_MspInit+0xa0>)
 8009b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b54:	60fb      	str	r3, [r7, #12]
 8009b56:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	2043      	movs	r0, #67	; 0x43
 8009b5e:	f7f8 fa49 	bl	8001ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b62:	2043      	movs	r0, #67	; 0x43
 8009b64:	f7f8 fa62 	bl	800202c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b68:	bf00      	nop
 8009b6a:	3728      	adds	r7, #40	; 0x28
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	40023800 	.word	0x40023800
 8009b74:	40020000 	.word	0x40020000

08009b78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f7fe fb53 	bl	800823a <USBD_LL_SetupStage>
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009bae:	78fa      	ldrb	r2, [r7, #3]
 8009bb0:	6879      	ldr	r1, [r7, #4]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	00db      	lsls	r3, r3, #3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	440b      	add	r3, r1
 8009bbc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f7fe fb8d 	bl	80082e4 <USBD_LL_DataOutStage>
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b082      	sub	sp, #8
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8009be4:	78fa      	ldrb	r2, [r7, #3]
 8009be6:	6879      	ldr	r1, [r7, #4]
 8009be8:	4613      	mov	r3, r2
 8009bea:	00db      	lsls	r3, r3, #3
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	440b      	add	r3, r1
 8009bf2:	3320      	adds	r3, #32
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	78fb      	ldrb	r3, [r7, #3]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	f7fe fc26 	bl	800844a <USBD_LL_DataInStage>
}
 8009bfe:	bf00      	nop
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b082      	sub	sp, #8
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe fd60 	bl	80086da <USBD_LL_SOF>
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	79db      	ldrb	r3, [r3, #7]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d001      	beq.n	8009c3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c36:	f7f7 fd11 	bl	800165c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009c40:	7bfa      	ldrb	r2, [r7, #15]
 8009c42:	4611      	mov	r1, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fd04 	bl	8008652 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fcac 	bl	80085ae <USBD_LL_Reset>
}
 8009c56:	bf00      	nop
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
	...

08009c60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe fcff 	bl	8008672 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	6812      	ldr	r2, [r2, #0]
 8009c82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c86:	f043 0301 	orr.w	r3, r3, #1
 8009c8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	7adb      	ldrb	r3, [r3, #11]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c94:	4b04      	ldr	r3, [pc, #16]	; (8009ca8 <HAL_PCD_SuspendCallback+0x48>)
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	4a03      	ldr	r2, [pc, #12]	; (8009ca8 <HAL_PCD_SuspendCallback+0x48>)
 8009c9a:	f043 0306 	orr.w	r3, r3, #6
 8009c9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	e000ed00 	.word	0xe000ed00

08009cac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe fcf5 	bl	80086aa <USBD_LL_Resume>
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009cda:	78fa      	ldrb	r2, [r7, #3]
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe fd4d 	bl	800877e <USBD_LL_IsoOUTIncomplete>
}
 8009ce4:	bf00      	nop
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009cfe:	78fa      	ldrb	r2, [r7, #3]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fd09 	bl	800871a <USBD_LL_IsoINIncomplete>
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fd5f 	bl	80087e2 <USBD_LL_DevConnected>
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fe fd5c 	bl	80087f8 <USBD_LL_DevDisconnected>
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d13c      	bne.n	8009dd2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d58:	4a20      	ldr	r2, [pc, #128]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a1e      	ldr	r2, [pc, #120]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d64:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d68:	4b1c      	ldr	r3, [pc, #112]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d70:	4b1a      	ldr	r3, [pc, #104]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d72:	2204      	movs	r2, #4
 8009d74:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d76:	4b19      	ldr	r3, [pc, #100]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d78:	2202      	movs	r2, #2
 8009d7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d7c:	4b17      	ldr	r3, [pc, #92]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d7e:	2200      	movs	r2, #0
 8009d80:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d82:	4b16      	ldr	r3, [pc, #88]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d84:	2202      	movs	r2, #2
 8009d86:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d88:	4b14      	ldr	r3, [pc, #80]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d8e:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d94:	4b11      	ldr	r3, [pc, #68]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009d9a:	4b10      	ldr	r3, [pc, #64]	; (8009ddc <USBD_LL_Init+0x94>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009da0:	4b0e      	ldr	r3, [pc, #56]	; (8009ddc <USBD_LL_Init+0x94>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009da6:	480d      	ldr	r0, [pc, #52]	; (8009ddc <USBD_LL_Init+0x94>)
 8009da8:	f7f8 fdbc 	bl	8002924 <HAL_PCD_Init>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009db2:	f7f7 fc53 	bl	800165c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009db6:	2180      	movs	r1, #128	; 0x80
 8009db8:	4808      	ldr	r0, [pc, #32]	; (8009ddc <USBD_LL_Init+0x94>)
 8009dba:	f7f9 ffe6 	bl	8003d8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009dbe:	2240      	movs	r2, #64	; 0x40
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4806      	ldr	r0, [pc, #24]	; (8009ddc <USBD_LL_Init+0x94>)
 8009dc4:	f7f9 ff9a 	bl	8003cfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009dc8:	2280      	movs	r2, #128	; 0x80
 8009dca:	2101      	movs	r1, #1
 8009dcc:	4803      	ldr	r0, [pc, #12]	; (8009ddc <USBD_LL_Init+0x94>)
 8009dce:	f7f9 ff95 	bl	8003cfc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	200019f0 	.word	0x200019f0

08009de0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7f8 fea3 	bl	8002b42 <HAL_PCD_Start>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 f942 	bl	800a08c <USBD_Get_USB_Status>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	4608      	mov	r0, r1
 8009e20:	4611      	mov	r1, r2
 8009e22:	461a      	mov	r2, r3
 8009e24:	4603      	mov	r3, r0
 8009e26:	70fb      	strb	r3, [r7, #3]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	70bb      	strb	r3, [r7, #2]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009e3e:	78bb      	ldrb	r3, [r7, #2]
 8009e40:	883a      	ldrh	r2, [r7, #0]
 8009e42:	78f9      	ldrb	r1, [r7, #3]
 8009e44:	f7f9 fb77 	bl	8003536 <HAL_PCD_EP_Open>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 f91c 	bl	800a08c <USBD_Get_USB_Status>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e7c:	78fa      	ldrb	r2, [r7, #3]
 8009e7e:	4611      	mov	r1, r2
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7f9 fbc0 	bl	8003606 <HAL_PCD_EP_Close>
 8009e86:	4603      	mov	r3, r0
 8009e88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 f8fd 	bl	800a08c <USBD_Get_USB_Status>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009eba:	78fa      	ldrb	r2, [r7, #3]
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7f9 fc78 	bl	80037b4 <HAL_PCD_EP_SetStall>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 f8de 	bl	800a08c <USBD_Get_USB_Status>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b084      	sub	sp, #16
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ef8:	78fa      	ldrb	r2, [r7, #3]
 8009efa:	4611      	mov	r1, r2
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7f9 fcbc 	bl	800387a <HAL_PCD_EP_ClrStall>
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 f8bf 	bl	800a08c <USBD_Get_USB_Status>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	460b      	mov	r3, r1
 8009f26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	da0b      	bge.n	8009f50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f3e:	68f9      	ldr	r1, [r7, #12]
 8009f40:	4613      	mov	r3, r2
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	440b      	add	r3, r1
 8009f4a:	3316      	adds	r3, #22
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	e00b      	b.n	8009f68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f56:	68f9      	ldr	r1, [r7, #12]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	4413      	add	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	440b      	add	r3, r1
 8009f62:	f203 2356 	addw	r3, r3, #598	; 0x256
 8009f66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f8e:	78fa      	ldrb	r2, [r7, #3]
 8009f90:	4611      	mov	r1, r2
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7f9 faab 	bl	80034ee <HAL_PCD_SetAddress>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 f874 	bl	800a08c <USBD_Get_USB_Status>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b086      	sub	sp, #24
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009fd0:	7af9      	ldrb	r1, [r7, #11]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	f7f9 fbb3 	bl	8003740 <HAL_PCD_EP_Transmit>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fde:	7dfb      	ldrb	r3, [r7, #23]
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 f853 	bl	800a08c <USBD_Get_USB_Status>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fea:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	607a      	str	r2, [r7, #4]
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	460b      	mov	r3, r1
 800a002:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a012:	7af9      	ldrb	r1, [r7, #11]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	f7f9 fb3f 	bl	800369a <HAL_PCD_EP_Receive>
 800a01c:	4603      	mov	r3, r0
 800a01e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f832 	bl	800a08c <USBD_Get_USB_Status>
 800a028:	4603      	mov	r3, r0
 800a02a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a02c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	460b      	mov	r3, r1
 800a040:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a048:	78fa      	ldrb	r2, [r7, #3]
 800a04a:	4611      	mov	r1, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7f9 fb5f 	bl	8003710 <HAL_PCD_EP_GetRxCount>
 800a052:	4603      	mov	r3, r0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a064:	4b03      	ldr	r3, [pc, #12]	; (800a074 <USBD_static_malloc+0x18>)
}
 800a066:	4618      	mov	r0, r3
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	20001ed4 	.word	0x20001ed4

0800a078 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]

}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	4603      	mov	r3, r0
 800a094:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a09a:	79fb      	ldrb	r3, [r7, #7]
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d817      	bhi.n	800a0d0 <USBD_Get_USB_Status+0x44>
 800a0a0:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <USBD_Get_USB_Status+0x1c>)
 800a0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a6:	bf00      	nop
 800a0a8:	0800a0b9 	.word	0x0800a0b9
 800a0ac:	0800a0bf 	.word	0x0800a0bf
 800a0b0:	0800a0c5 	.word	0x0800a0c5
 800a0b4:	0800a0cb 	.word	0x0800a0cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a0bc:	e00b      	b.n	800a0d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c2:	e008      	b.n	800a0d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c8:	e005      	b.n	800a0d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ce:	e002      	b.n	800a0d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d4:	bf00      	nop
  }
  return usb_status;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <__cvt>:
 800a0e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e8:	ec55 4b10 	vmov	r4, r5, d0
 800a0ec:	2d00      	cmp	r5, #0
 800a0ee:	460e      	mov	r6, r1
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	462b      	mov	r3, r5
 800a0f4:	bfbb      	ittet	lt
 800a0f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a0fa:	461d      	movlt	r5, r3
 800a0fc:	2300      	movge	r3, #0
 800a0fe:	232d      	movlt	r3, #45	; 0x2d
 800a100:	700b      	strb	r3, [r1, #0]
 800a102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a104:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a108:	4691      	mov	r9, r2
 800a10a:	f023 0820 	bic.w	r8, r3, #32
 800a10e:	bfbc      	itt	lt
 800a110:	4622      	movlt	r2, r4
 800a112:	4614      	movlt	r4, r2
 800a114:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a118:	d005      	beq.n	800a126 <__cvt+0x42>
 800a11a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a11e:	d100      	bne.n	800a122 <__cvt+0x3e>
 800a120:	3601      	adds	r6, #1
 800a122:	2102      	movs	r1, #2
 800a124:	e000      	b.n	800a128 <__cvt+0x44>
 800a126:	2103      	movs	r1, #3
 800a128:	ab03      	add	r3, sp, #12
 800a12a:	9301      	str	r3, [sp, #4]
 800a12c:	ab02      	add	r3, sp, #8
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	ec45 4b10 	vmov	d0, r4, r5
 800a134:	4653      	mov	r3, sl
 800a136:	4632      	mov	r2, r6
 800a138:	f000 fe4a 	bl	800add0 <_dtoa_r>
 800a13c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a140:	4607      	mov	r7, r0
 800a142:	d102      	bne.n	800a14a <__cvt+0x66>
 800a144:	f019 0f01 	tst.w	r9, #1
 800a148:	d022      	beq.n	800a190 <__cvt+0xac>
 800a14a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a14e:	eb07 0906 	add.w	r9, r7, r6
 800a152:	d110      	bne.n	800a176 <__cvt+0x92>
 800a154:	783b      	ldrb	r3, [r7, #0]
 800a156:	2b30      	cmp	r3, #48	; 0x30
 800a158:	d10a      	bne.n	800a170 <__cvt+0x8c>
 800a15a:	2200      	movs	r2, #0
 800a15c:	2300      	movs	r3, #0
 800a15e:	4620      	mov	r0, r4
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a166:	b918      	cbnz	r0, 800a170 <__cvt+0x8c>
 800a168:	f1c6 0601 	rsb	r6, r6, #1
 800a16c:	f8ca 6000 	str.w	r6, [sl]
 800a170:	f8da 3000 	ldr.w	r3, [sl]
 800a174:	4499      	add	r9, r3
 800a176:	2200      	movs	r2, #0
 800a178:	2300      	movs	r3, #0
 800a17a:	4620      	mov	r0, r4
 800a17c:	4629      	mov	r1, r5
 800a17e:	f7f6 fcab 	bl	8000ad8 <__aeabi_dcmpeq>
 800a182:	b108      	cbz	r0, 800a188 <__cvt+0xa4>
 800a184:	f8cd 900c 	str.w	r9, [sp, #12]
 800a188:	2230      	movs	r2, #48	; 0x30
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	454b      	cmp	r3, r9
 800a18e:	d307      	bcc.n	800a1a0 <__cvt+0xbc>
 800a190:	9b03      	ldr	r3, [sp, #12]
 800a192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a194:	1bdb      	subs	r3, r3, r7
 800a196:	4638      	mov	r0, r7
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	b004      	add	sp, #16
 800a19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a0:	1c59      	adds	r1, r3, #1
 800a1a2:	9103      	str	r1, [sp, #12]
 800a1a4:	701a      	strb	r2, [r3, #0]
 800a1a6:	e7f0      	b.n	800a18a <__cvt+0xa6>

0800a1a8 <__exponent>:
 800a1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	bfb8      	it	lt
 800a1b0:	4249      	neglt	r1, r1
 800a1b2:	f803 2b02 	strb.w	r2, [r3], #2
 800a1b6:	bfb4      	ite	lt
 800a1b8:	222d      	movlt	r2, #45	; 0x2d
 800a1ba:	222b      	movge	r2, #43	; 0x2b
 800a1bc:	2909      	cmp	r1, #9
 800a1be:	7042      	strb	r2, [r0, #1]
 800a1c0:	dd2a      	ble.n	800a218 <__exponent+0x70>
 800a1c2:	f10d 0207 	add.w	r2, sp, #7
 800a1c6:	4617      	mov	r7, r2
 800a1c8:	260a      	movs	r6, #10
 800a1ca:	4694      	mov	ip, r2
 800a1cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800a1d0:	fb06 1415 	mls	r4, r6, r5, r1
 800a1d4:	3430      	adds	r4, #48	; 0x30
 800a1d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a1da:	460c      	mov	r4, r1
 800a1dc:	2c63      	cmp	r4, #99	; 0x63
 800a1de:	f102 32ff 	add.w	r2, r2, #4294967295
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	dcf1      	bgt.n	800a1ca <__exponent+0x22>
 800a1e6:	3130      	adds	r1, #48	; 0x30
 800a1e8:	f1ac 0402 	sub.w	r4, ip, #2
 800a1ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a1f0:	1c41      	adds	r1, r0, #1
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	42ba      	cmp	r2, r7
 800a1f6:	d30a      	bcc.n	800a20e <__exponent+0x66>
 800a1f8:	f10d 0209 	add.w	r2, sp, #9
 800a1fc:	eba2 020c 	sub.w	r2, r2, ip
 800a200:	42bc      	cmp	r4, r7
 800a202:	bf88      	it	hi
 800a204:	2200      	movhi	r2, #0
 800a206:	4413      	add	r3, r2
 800a208:	1a18      	subs	r0, r3, r0
 800a20a:	b003      	add	sp, #12
 800a20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a20e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a212:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a216:	e7ed      	b.n	800a1f4 <__exponent+0x4c>
 800a218:	2330      	movs	r3, #48	; 0x30
 800a21a:	3130      	adds	r1, #48	; 0x30
 800a21c:	7083      	strb	r3, [r0, #2]
 800a21e:	70c1      	strb	r1, [r0, #3]
 800a220:	1d03      	adds	r3, r0, #4
 800a222:	e7f1      	b.n	800a208 <__exponent+0x60>

0800a224 <_printf_float>:
 800a224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a228:	ed2d 8b02 	vpush	{d8}
 800a22c:	b08d      	sub	sp, #52	; 0x34
 800a22e:	460c      	mov	r4, r1
 800a230:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a234:	4616      	mov	r6, r2
 800a236:	461f      	mov	r7, r3
 800a238:	4605      	mov	r5, r0
 800a23a:	f000 fcc7 	bl	800abcc <_localeconv_r>
 800a23e:	f8d0 a000 	ldr.w	sl, [r0]
 800a242:	4650      	mov	r0, sl
 800a244:	f7f6 f81c 	bl	8000280 <strlen>
 800a248:	2300      	movs	r3, #0
 800a24a:	930a      	str	r3, [sp, #40]	; 0x28
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	9305      	str	r3, [sp, #20]
 800a250:	f8d8 3000 	ldr.w	r3, [r8]
 800a254:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a258:	3307      	adds	r3, #7
 800a25a:	f023 0307 	bic.w	r3, r3, #7
 800a25e:	f103 0208 	add.w	r2, r3, #8
 800a262:	f8c8 2000 	str.w	r2, [r8]
 800a266:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a26a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a26e:	9307      	str	r3, [sp, #28]
 800a270:	f8cd 8018 	str.w	r8, [sp, #24]
 800a274:	ee08 0a10 	vmov	s16, r0
 800a278:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a27c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a280:	4b9e      	ldr	r3, [pc, #632]	; (800a4fc <_printf_float+0x2d8>)
 800a282:	f04f 32ff 	mov.w	r2, #4294967295
 800a286:	f7f6 fc59 	bl	8000b3c <__aeabi_dcmpun>
 800a28a:	bb88      	cbnz	r0, 800a2f0 <_printf_float+0xcc>
 800a28c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a290:	4b9a      	ldr	r3, [pc, #616]	; (800a4fc <_printf_float+0x2d8>)
 800a292:	f04f 32ff 	mov.w	r2, #4294967295
 800a296:	f7f6 fc33 	bl	8000b00 <__aeabi_dcmple>
 800a29a:	bb48      	cbnz	r0, 800a2f0 <_printf_float+0xcc>
 800a29c:	2200      	movs	r2, #0
 800a29e:	2300      	movs	r3, #0
 800a2a0:	4640      	mov	r0, r8
 800a2a2:	4649      	mov	r1, r9
 800a2a4:	f7f6 fc22 	bl	8000aec <__aeabi_dcmplt>
 800a2a8:	b110      	cbz	r0, 800a2b0 <_printf_float+0x8c>
 800a2aa:	232d      	movs	r3, #45	; 0x2d
 800a2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b0:	4a93      	ldr	r2, [pc, #588]	; (800a500 <_printf_float+0x2dc>)
 800a2b2:	4b94      	ldr	r3, [pc, #592]	; (800a504 <_printf_float+0x2e0>)
 800a2b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a2b8:	bf94      	ite	ls
 800a2ba:	4690      	movls	r8, r2
 800a2bc:	4698      	movhi	r8, r3
 800a2be:	2303      	movs	r3, #3
 800a2c0:	6123      	str	r3, [r4, #16]
 800a2c2:	9b05      	ldr	r3, [sp, #20]
 800a2c4:	f023 0304 	bic.w	r3, r3, #4
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	f04f 0900 	mov.w	r9, #0
 800a2ce:	9700      	str	r7, [sp, #0]
 800a2d0:	4633      	mov	r3, r6
 800a2d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f000 f9da 	bl	800a690 <_printf_common>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	f040 8090 	bne.w	800a402 <_printf_float+0x1de>
 800a2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e6:	b00d      	add	sp, #52	; 0x34
 800a2e8:	ecbd 8b02 	vpop	{d8}
 800a2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f0:	4642      	mov	r2, r8
 800a2f2:	464b      	mov	r3, r9
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	f7f6 fc20 	bl	8000b3c <__aeabi_dcmpun>
 800a2fc:	b140      	cbz	r0, 800a310 <_printf_float+0xec>
 800a2fe:	464b      	mov	r3, r9
 800a300:	2b00      	cmp	r3, #0
 800a302:	bfbc      	itt	lt
 800a304:	232d      	movlt	r3, #45	; 0x2d
 800a306:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a30a:	4a7f      	ldr	r2, [pc, #508]	; (800a508 <_printf_float+0x2e4>)
 800a30c:	4b7f      	ldr	r3, [pc, #508]	; (800a50c <_printf_float+0x2e8>)
 800a30e:	e7d1      	b.n	800a2b4 <_printf_float+0x90>
 800a310:	6863      	ldr	r3, [r4, #4]
 800a312:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a316:	9206      	str	r2, [sp, #24]
 800a318:	1c5a      	adds	r2, r3, #1
 800a31a:	d13f      	bne.n	800a39c <_printf_float+0x178>
 800a31c:	2306      	movs	r3, #6
 800a31e:	6063      	str	r3, [r4, #4]
 800a320:	9b05      	ldr	r3, [sp, #20]
 800a322:	6861      	ldr	r1, [r4, #4]
 800a324:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a328:	2300      	movs	r3, #0
 800a32a:	9303      	str	r3, [sp, #12]
 800a32c:	ab0a      	add	r3, sp, #40	; 0x28
 800a32e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a332:	ab09      	add	r3, sp, #36	; 0x24
 800a334:	ec49 8b10 	vmov	d0, r8, r9
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	6022      	str	r2, [r4, #0]
 800a33c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a340:	4628      	mov	r0, r5
 800a342:	f7ff fecf 	bl	800a0e4 <__cvt>
 800a346:	9b06      	ldr	r3, [sp, #24]
 800a348:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a34a:	2b47      	cmp	r3, #71	; 0x47
 800a34c:	4680      	mov	r8, r0
 800a34e:	d108      	bne.n	800a362 <_printf_float+0x13e>
 800a350:	1cc8      	adds	r0, r1, #3
 800a352:	db02      	blt.n	800a35a <_printf_float+0x136>
 800a354:	6863      	ldr	r3, [r4, #4]
 800a356:	4299      	cmp	r1, r3
 800a358:	dd41      	ble.n	800a3de <_printf_float+0x1ba>
 800a35a:	f1ab 0302 	sub.w	r3, fp, #2
 800a35e:	fa5f fb83 	uxtb.w	fp, r3
 800a362:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a366:	d820      	bhi.n	800a3aa <_printf_float+0x186>
 800a368:	3901      	subs	r1, #1
 800a36a:	465a      	mov	r2, fp
 800a36c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a370:	9109      	str	r1, [sp, #36]	; 0x24
 800a372:	f7ff ff19 	bl	800a1a8 <__exponent>
 800a376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a378:	1813      	adds	r3, r2, r0
 800a37a:	2a01      	cmp	r2, #1
 800a37c:	4681      	mov	r9, r0
 800a37e:	6123      	str	r3, [r4, #16]
 800a380:	dc02      	bgt.n	800a388 <_printf_float+0x164>
 800a382:	6822      	ldr	r2, [r4, #0]
 800a384:	07d2      	lsls	r2, r2, #31
 800a386:	d501      	bpl.n	800a38c <_printf_float+0x168>
 800a388:	3301      	adds	r3, #1
 800a38a:	6123      	str	r3, [r4, #16]
 800a38c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a390:	2b00      	cmp	r3, #0
 800a392:	d09c      	beq.n	800a2ce <_printf_float+0xaa>
 800a394:	232d      	movs	r3, #45	; 0x2d
 800a396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a39a:	e798      	b.n	800a2ce <_printf_float+0xaa>
 800a39c:	9a06      	ldr	r2, [sp, #24]
 800a39e:	2a47      	cmp	r2, #71	; 0x47
 800a3a0:	d1be      	bne.n	800a320 <_printf_float+0xfc>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1bc      	bne.n	800a320 <_printf_float+0xfc>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e7b9      	b.n	800a31e <_printf_float+0xfa>
 800a3aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a3ae:	d118      	bne.n	800a3e2 <_printf_float+0x1be>
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	6863      	ldr	r3, [r4, #4]
 800a3b4:	dd0b      	ble.n	800a3ce <_printf_float+0x1aa>
 800a3b6:	6121      	str	r1, [r4, #16]
 800a3b8:	b913      	cbnz	r3, 800a3c0 <_printf_float+0x19c>
 800a3ba:	6822      	ldr	r2, [r4, #0]
 800a3bc:	07d0      	lsls	r0, r2, #31
 800a3be:	d502      	bpl.n	800a3c6 <_printf_float+0x1a2>
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	440b      	add	r3, r1
 800a3c4:	6123      	str	r3, [r4, #16]
 800a3c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a3c8:	f04f 0900 	mov.w	r9, #0
 800a3cc:	e7de      	b.n	800a38c <_printf_float+0x168>
 800a3ce:	b913      	cbnz	r3, 800a3d6 <_printf_float+0x1b2>
 800a3d0:	6822      	ldr	r2, [r4, #0]
 800a3d2:	07d2      	lsls	r2, r2, #31
 800a3d4:	d501      	bpl.n	800a3da <_printf_float+0x1b6>
 800a3d6:	3302      	adds	r3, #2
 800a3d8:	e7f4      	b.n	800a3c4 <_printf_float+0x1a0>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e7f2      	b.n	800a3c4 <_printf_float+0x1a0>
 800a3de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e4:	4299      	cmp	r1, r3
 800a3e6:	db05      	blt.n	800a3f4 <_printf_float+0x1d0>
 800a3e8:	6823      	ldr	r3, [r4, #0]
 800a3ea:	6121      	str	r1, [r4, #16]
 800a3ec:	07d8      	lsls	r0, r3, #31
 800a3ee:	d5ea      	bpl.n	800a3c6 <_printf_float+0x1a2>
 800a3f0:	1c4b      	adds	r3, r1, #1
 800a3f2:	e7e7      	b.n	800a3c4 <_printf_float+0x1a0>
 800a3f4:	2900      	cmp	r1, #0
 800a3f6:	bfd4      	ite	le
 800a3f8:	f1c1 0202 	rsble	r2, r1, #2
 800a3fc:	2201      	movgt	r2, #1
 800a3fe:	4413      	add	r3, r2
 800a400:	e7e0      	b.n	800a3c4 <_printf_float+0x1a0>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	055a      	lsls	r2, r3, #21
 800a406:	d407      	bmi.n	800a418 <_printf_float+0x1f4>
 800a408:	6923      	ldr	r3, [r4, #16]
 800a40a:	4642      	mov	r2, r8
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	d12c      	bne.n	800a470 <_printf_float+0x24c>
 800a416:	e764      	b.n	800a2e2 <_printf_float+0xbe>
 800a418:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a41c:	f240 80e0 	bls.w	800a5e0 <_printf_float+0x3bc>
 800a420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a424:	2200      	movs	r2, #0
 800a426:	2300      	movs	r3, #0
 800a428:	f7f6 fb56 	bl	8000ad8 <__aeabi_dcmpeq>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	d034      	beq.n	800a49a <_printf_float+0x276>
 800a430:	4a37      	ldr	r2, [pc, #220]	; (800a510 <_printf_float+0x2ec>)
 800a432:	2301      	movs	r3, #1
 800a434:	4631      	mov	r1, r6
 800a436:	4628      	mov	r0, r5
 800a438:	47b8      	blx	r7
 800a43a:	3001      	adds	r0, #1
 800a43c:	f43f af51 	beq.w	800a2e2 <_printf_float+0xbe>
 800a440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a444:	429a      	cmp	r2, r3
 800a446:	db02      	blt.n	800a44e <_printf_float+0x22a>
 800a448:	6823      	ldr	r3, [r4, #0]
 800a44a:	07d8      	lsls	r0, r3, #31
 800a44c:	d510      	bpl.n	800a470 <_printf_float+0x24c>
 800a44e:	ee18 3a10 	vmov	r3, s16
 800a452:	4652      	mov	r2, sl
 800a454:	4631      	mov	r1, r6
 800a456:	4628      	mov	r0, r5
 800a458:	47b8      	blx	r7
 800a45a:	3001      	adds	r0, #1
 800a45c:	f43f af41 	beq.w	800a2e2 <_printf_float+0xbe>
 800a460:	f04f 0800 	mov.w	r8, #0
 800a464:	f104 091a 	add.w	r9, r4, #26
 800a468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a46a:	3b01      	subs	r3, #1
 800a46c:	4543      	cmp	r3, r8
 800a46e:	dc09      	bgt.n	800a484 <_printf_float+0x260>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	079b      	lsls	r3, r3, #30
 800a474:	f100 8107 	bmi.w	800a686 <_printf_float+0x462>
 800a478:	68e0      	ldr	r0, [r4, #12]
 800a47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a47c:	4298      	cmp	r0, r3
 800a47e:	bfb8      	it	lt
 800a480:	4618      	movlt	r0, r3
 800a482:	e730      	b.n	800a2e6 <_printf_float+0xc2>
 800a484:	2301      	movs	r3, #1
 800a486:	464a      	mov	r2, r9
 800a488:	4631      	mov	r1, r6
 800a48a:	4628      	mov	r0, r5
 800a48c:	47b8      	blx	r7
 800a48e:	3001      	adds	r0, #1
 800a490:	f43f af27 	beq.w	800a2e2 <_printf_float+0xbe>
 800a494:	f108 0801 	add.w	r8, r8, #1
 800a498:	e7e6      	b.n	800a468 <_printf_float+0x244>
 800a49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	dc39      	bgt.n	800a514 <_printf_float+0x2f0>
 800a4a0:	4a1b      	ldr	r2, [pc, #108]	; (800a510 <_printf_float+0x2ec>)
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	4631      	mov	r1, r6
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	47b8      	blx	r7
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	f43f af19 	beq.w	800a2e2 <_printf_float+0xbe>
 800a4b0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	d102      	bne.n	800a4be <_printf_float+0x29a>
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	07d9      	lsls	r1, r3, #31
 800a4bc:	d5d8      	bpl.n	800a470 <_printf_float+0x24c>
 800a4be:	ee18 3a10 	vmov	r3, s16
 800a4c2:	4652      	mov	r2, sl
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	47b8      	blx	r7
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	f43f af09 	beq.w	800a2e2 <_printf_float+0xbe>
 800a4d0:	f04f 0900 	mov.w	r9, #0
 800a4d4:	f104 0a1a 	add.w	sl, r4, #26
 800a4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4da:	425b      	negs	r3, r3
 800a4dc:	454b      	cmp	r3, r9
 800a4de:	dc01      	bgt.n	800a4e4 <_printf_float+0x2c0>
 800a4e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e2:	e792      	b.n	800a40a <_printf_float+0x1e6>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	4652      	mov	r2, sl
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	47b8      	blx	r7
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	f43f aef7 	beq.w	800a2e2 <_printf_float+0xbe>
 800a4f4:	f109 0901 	add.w	r9, r9, #1
 800a4f8:	e7ee      	b.n	800a4d8 <_printf_float+0x2b4>
 800a4fa:	bf00      	nop
 800a4fc:	7fefffff 	.word	0x7fefffff
 800a500:	0800cb04 	.word	0x0800cb04
 800a504:	0800cb08 	.word	0x0800cb08
 800a508:	0800cb0c 	.word	0x0800cb0c
 800a50c:	0800cb10 	.word	0x0800cb10
 800a510:	0800cb14 	.word	0x0800cb14
 800a514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a518:	429a      	cmp	r2, r3
 800a51a:	bfa8      	it	ge
 800a51c:	461a      	movge	r2, r3
 800a51e:	2a00      	cmp	r2, #0
 800a520:	4691      	mov	r9, r2
 800a522:	dc37      	bgt.n	800a594 <_printf_float+0x370>
 800a524:	f04f 0b00 	mov.w	fp, #0
 800a528:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a52c:	f104 021a 	add.w	r2, r4, #26
 800a530:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a532:	9305      	str	r3, [sp, #20]
 800a534:	eba3 0309 	sub.w	r3, r3, r9
 800a538:	455b      	cmp	r3, fp
 800a53a:	dc33      	bgt.n	800a5a4 <_printf_float+0x380>
 800a53c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a540:	429a      	cmp	r2, r3
 800a542:	db3b      	blt.n	800a5bc <_printf_float+0x398>
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	07da      	lsls	r2, r3, #31
 800a548:	d438      	bmi.n	800a5bc <_printf_float+0x398>
 800a54a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a54e:	eba2 0903 	sub.w	r9, r2, r3
 800a552:	9b05      	ldr	r3, [sp, #20]
 800a554:	1ad2      	subs	r2, r2, r3
 800a556:	4591      	cmp	r9, r2
 800a558:	bfa8      	it	ge
 800a55a:	4691      	movge	r9, r2
 800a55c:	f1b9 0f00 	cmp.w	r9, #0
 800a560:	dc35      	bgt.n	800a5ce <_printf_float+0x3aa>
 800a562:	f04f 0800 	mov.w	r8, #0
 800a566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a56a:	f104 0a1a 	add.w	sl, r4, #26
 800a56e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a572:	1a9b      	subs	r3, r3, r2
 800a574:	eba3 0309 	sub.w	r3, r3, r9
 800a578:	4543      	cmp	r3, r8
 800a57a:	f77f af79 	ble.w	800a470 <_printf_float+0x24c>
 800a57e:	2301      	movs	r3, #1
 800a580:	4652      	mov	r2, sl
 800a582:	4631      	mov	r1, r6
 800a584:	4628      	mov	r0, r5
 800a586:	47b8      	blx	r7
 800a588:	3001      	adds	r0, #1
 800a58a:	f43f aeaa 	beq.w	800a2e2 <_printf_float+0xbe>
 800a58e:	f108 0801 	add.w	r8, r8, #1
 800a592:	e7ec      	b.n	800a56e <_printf_float+0x34a>
 800a594:	4613      	mov	r3, r2
 800a596:	4631      	mov	r1, r6
 800a598:	4642      	mov	r2, r8
 800a59a:	4628      	mov	r0, r5
 800a59c:	47b8      	blx	r7
 800a59e:	3001      	adds	r0, #1
 800a5a0:	d1c0      	bne.n	800a524 <_printf_float+0x300>
 800a5a2:	e69e      	b.n	800a2e2 <_printf_float+0xbe>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	4631      	mov	r1, r6
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	9205      	str	r2, [sp, #20]
 800a5ac:	47b8      	blx	r7
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	f43f ae97 	beq.w	800a2e2 <_printf_float+0xbe>
 800a5b4:	9a05      	ldr	r2, [sp, #20]
 800a5b6:	f10b 0b01 	add.w	fp, fp, #1
 800a5ba:	e7b9      	b.n	800a530 <_printf_float+0x30c>
 800a5bc:	ee18 3a10 	vmov	r3, s16
 800a5c0:	4652      	mov	r2, sl
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	47b8      	blx	r7
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d1be      	bne.n	800a54a <_printf_float+0x326>
 800a5cc:	e689      	b.n	800a2e2 <_printf_float+0xbe>
 800a5ce:	9a05      	ldr	r2, [sp, #20]
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	4442      	add	r2, r8
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	47b8      	blx	r7
 800a5da:	3001      	adds	r0, #1
 800a5dc:	d1c1      	bne.n	800a562 <_printf_float+0x33e>
 800a5de:	e680      	b.n	800a2e2 <_printf_float+0xbe>
 800a5e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5e2:	2a01      	cmp	r2, #1
 800a5e4:	dc01      	bgt.n	800a5ea <_printf_float+0x3c6>
 800a5e6:	07db      	lsls	r3, r3, #31
 800a5e8:	d53a      	bpl.n	800a660 <_printf_float+0x43c>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	4631      	mov	r1, r6
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b8      	blx	r7
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	f43f ae74 	beq.w	800a2e2 <_printf_float+0xbe>
 800a5fa:	ee18 3a10 	vmov	r3, s16
 800a5fe:	4652      	mov	r2, sl
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	f43f ae6b 	beq.w	800a2e2 <_printf_float+0xbe>
 800a60c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a610:	2200      	movs	r2, #0
 800a612:	2300      	movs	r3, #0
 800a614:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a618:	f7f6 fa5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a61c:	b9d8      	cbnz	r0, 800a656 <_printf_float+0x432>
 800a61e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a622:	f108 0201 	add.w	r2, r8, #1
 800a626:	4631      	mov	r1, r6
 800a628:	4628      	mov	r0, r5
 800a62a:	47b8      	blx	r7
 800a62c:	3001      	adds	r0, #1
 800a62e:	d10e      	bne.n	800a64e <_printf_float+0x42a>
 800a630:	e657      	b.n	800a2e2 <_printf_float+0xbe>
 800a632:	2301      	movs	r3, #1
 800a634:	4652      	mov	r2, sl
 800a636:	4631      	mov	r1, r6
 800a638:	4628      	mov	r0, r5
 800a63a:	47b8      	blx	r7
 800a63c:	3001      	adds	r0, #1
 800a63e:	f43f ae50 	beq.w	800a2e2 <_printf_float+0xbe>
 800a642:	f108 0801 	add.w	r8, r8, #1
 800a646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a648:	3b01      	subs	r3, #1
 800a64a:	4543      	cmp	r3, r8
 800a64c:	dcf1      	bgt.n	800a632 <_printf_float+0x40e>
 800a64e:	464b      	mov	r3, r9
 800a650:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a654:	e6da      	b.n	800a40c <_printf_float+0x1e8>
 800a656:	f04f 0800 	mov.w	r8, #0
 800a65a:	f104 0a1a 	add.w	sl, r4, #26
 800a65e:	e7f2      	b.n	800a646 <_printf_float+0x422>
 800a660:	2301      	movs	r3, #1
 800a662:	4642      	mov	r2, r8
 800a664:	e7df      	b.n	800a626 <_printf_float+0x402>
 800a666:	2301      	movs	r3, #1
 800a668:	464a      	mov	r2, r9
 800a66a:	4631      	mov	r1, r6
 800a66c:	4628      	mov	r0, r5
 800a66e:	47b8      	blx	r7
 800a670:	3001      	adds	r0, #1
 800a672:	f43f ae36 	beq.w	800a2e2 <_printf_float+0xbe>
 800a676:	f108 0801 	add.w	r8, r8, #1
 800a67a:	68e3      	ldr	r3, [r4, #12]
 800a67c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a67e:	1a5b      	subs	r3, r3, r1
 800a680:	4543      	cmp	r3, r8
 800a682:	dcf0      	bgt.n	800a666 <_printf_float+0x442>
 800a684:	e6f8      	b.n	800a478 <_printf_float+0x254>
 800a686:	f04f 0800 	mov.w	r8, #0
 800a68a:	f104 0919 	add.w	r9, r4, #25
 800a68e:	e7f4      	b.n	800a67a <_printf_float+0x456>

0800a690 <_printf_common>:
 800a690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a694:	4616      	mov	r6, r2
 800a696:	4699      	mov	r9, r3
 800a698:	688a      	ldr	r2, [r1, #8]
 800a69a:	690b      	ldr	r3, [r1, #16]
 800a69c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	bfb8      	it	lt
 800a6a4:	4613      	movlt	r3, r2
 800a6a6:	6033      	str	r3, [r6, #0]
 800a6a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	b10a      	cbz	r2, 800a6b6 <_printf_common+0x26>
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	6033      	str	r3, [r6, #0]
 800a6b6:	6823      	ldr	r3, [r4, #0]
 800a6b8:	0699      	lsls	r1, r3, #26
 800a6ba:	bf42      	ittt	mi
 800a6bc:	6833      	ldrmi	r3, [r6, #0]
 800a6be:	3302      	addmi	r3, #2
 800a6c0:	6033      	strmi	r3, [r6, #0]
 800a6c2:	6825      	ldr	r5, [r4, #0]
 800a6c4:	f015 0506 	ands.w	r5, r5, #6
 800a6c8:	d106      	bne.n	800a6d8 <_printf_common+0x48>
 800a6ca:	f104 0a19 	add.w	sl, r4, #25
 800a6ce:	68e3      	ldr	r3, [r4, #12]
 800a6d0:	6832      	ldr	r2, [r6, #0]
 800a6d2:	1a9b      	subs	r3, r3, r2
 800a6d4:	42ab      	cmp	r3, r5
 800a6d6:	dc26      	bgt.n	800a726 <_printf_common+0x96>
 800a6d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6dc:	1e13      	subs	r3, r2, #0
 800a6de:	6822      	ldr	r2, [r4, #0]
 800a6e0:	bf18      	it	ne
 800a6e2:	2301      	movne	r3, #1
 800a6e4:	0692      	lsls	r2, r2, #26
 800a6e6:	d42b      	bmi.n	800a740 <_printf_common+0xb0>
 800a6e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	47c0      	blx	r8
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	d01e      	beq.n	800a734 <_printf_common+0xa4>
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	6922      	ldr	r2, [r4, #16]
 800a6fa:	f003 0306 	and.w	r3, r3, #6
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	bf02      	ittt	eq
 800a702:	68e5      	ldreq	r5, [r4, #12]
 800a704:	6833      	ldreq	r3, [r6, #0]
 800a706:	1aed      	subeq	r5, r5, r3
 800a708:	68a3      	ldr	r3, [r4, #8]
 800a70a:	bf0c      	ite	eq
 800a70c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a710:	2500      	movne	r5, #0
 800a712:	4293      	cmp	r3, r2
 800a714:	bfc4      	itt	gt
 800a716:	1a9b      	subgt	r3, r3, r2
 800a718:	18ed      	addgt	r5, r5, r3
 800a71a:	2600      	movs	r6, #0
 800a71c:	341a      	adds	r4, #26
 800a71e:	42b5      	cmp	r5, r6
 800a720:	d11a      	bne.n	800a758 <_printf_common+0xc8>
 800a722:	2000      	movs	r0, #0
 800a724:	e008      	b.n	800a738 <_printf_common+0xa8>
 800a726:	2301      	movs	r3, #1
 800a728:	4652      	mov	r2, sl
 800a72a:	4649      	mov	r1, r9
 800a72c:	4638      	mov	r0, r7
 800a72e:	47c0      	blx	r8
 800a730:	3001      	adds	r0, #1
 800a732:	d103      	bne.n	800a73c <_printf_common+0xac>
 800a734:	f04f 30ff 	mov.w	r0, #4294967295
 800a738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a73c:	3501      	adds	r5, #1
 800a73e:	e7c6      	b.n	800a6ce <_printf_common+0x3e>
 800a740:	18e1      	adds	r1, r4, r3
 800a742:	1c5a      	adds	r2, r3, #1
 800a744:	2030      	movs	r0, #48	; 0x30
 800a746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a74a:	4422      	add	r2, r4
 800a74c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a754:	3302      	adds	r3, #2
 800a756:	e7c7      	b.n	800a6e8 <_printf_common+0x58>
 800a758:	2301      	movs	r3, #1
 800a75a:	4622      	mov	r2, r4
 800a75c:	4649      	mov	r1, r9
 800a75e:	4638      	mov	r0, r7
 800a760:	47c0      	blx	r8
 800a762:	3001      	adds	r0, #1
 800a764:	d0e6      	beq.n	800a734 <_printf_common+0xa4>
 800a766:	3601      	adds	r6, #1
 800a768:	e7d9      	b.n	800a71e <_printf_common+0x8e>
	...

0800a76c <_printf_i>:
 800a76c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a770:	7e0f      	ldrb	r7, [r1, #24]
 800a772:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a774:	2f78      	cmp	r7, #120	; 0x78
 800a776:	4691      	mov	r9, r2
 800a778:	4680      	mov	r8, r0
 800a77a:	460c      	mov	r4, r1
 800a77c:	469a      	mov	sl, r3
 800a77e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a782:	d807      	bhi.n	800a794 <_printf_i+0x28>
 800a784:	2f62      	cmp	r7, #98	; 0x62
 800a786:	d80a      	bhi.n	800a79e <_printf_i+0x32>
 800a788:	2f00      	cmp	r7, #0
 800a78a:	f000 80d4 	beq.w	800a936 <_printf_i+0x1ca>
 800a78e:	2f58      	cmp	r7, #88	; 0x58
 800a790:	f000 80c0 	beq.w	800a914 <_printf_i+0x1a8>
 800a794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a79c:	e03a      	b.n	800a814 <_printf_i+0xa8>
 800a79e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7a2:	2b15      	cmp	r3, #21
 800a7a4:	d8f6      	bhi.n	800a794 <_printf_i+0x28>
 800a7a6:	a101      	add	r1, pc, #4	; (adr r1, 800a7ac <_printf_i+0x40>)
 800a7a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7ac:	0800a805 	.word	0x0800a805
 800a7b0:	0800a819 	.word	0x0800a819
 800a7b4:	0800a795 	.word	0x0800a795
 800a7b8:	0800a795 	.word	0x0800a795
 800a7bc:	0800a795 	.word	0x0800a795
 800a7c0:	0800a795 	.word	0x0800a795
 800a7c4:	0800a819 	.word	0x0800a819
 800a7c8:	0800a795 	.word	0x0800a795
 800a7cc:	0800a795 	.word	0x0800a795
 800a7d0:	0800a795 	.word	0x0800a795
 800a7d4:	0800a795 	.word	0x0800a795
 800a7d8:	0800a91d 	.word	0x0800a91d
 800a7dc:	0800a845 	.word	0x0800a845
 800a7e0:	0800a8d7 	.word	0x0800a8d7
 800a7e4:	0800a795 	.word	0x0800a795
 800a7e8:	0800a795 	.word	0x0800a795
 800a7ec:	0800a93f 	.word	0x0800a93f
 800a7f0:	0800a795 	.word	0x0800a795
 800a7f4:	0800a845 	.word	0x0800a845
 800a7f8:	0800a795 	.word	0x0800a795
 800a7fc:	0800a795 	.word	0x0800a795
 800a800:	0800a8df 	.word	0x0800a8df
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	1d1a      	adds	r2, r3, #4
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	602a      	str	r2, [r5, #0]
 800a80c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a814:	2301      	movs	r3, #1
 800a816:	e09f      	b.n	800a958 <_printf_i+0x1ec>
 800a818:	6820      	ldr	r0, [r4, #0]
 800a81a:	682b      	ldr	r3, [r5, #0]
 800a81c:	0607      	lsls	r7, r0, #24
 800a81e:	f103 0104 	add.w	r1, r3, #4
 800a822:	6029      	str	r1, [r5, #0]
 800a824:	d501      	bpl.n	800a82a <_printf_i+0xbe>
 800a826:	681e      	ldr	r6, [r3, #0]
 800a828:	e003      	b.n	800a832 <_printf_i+0xc6>
 800a82a:	0646      	lsls	r6, r0, #25
 800a82c:	d5fb      	bpl.n	800a826 <_printf_i+0xba>
 800a82e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a832:	2e00      	cmp	r6, #0
 800a834:	da03      	bge.n	800a83e <_printf_i+0xd2>
 800a836:	232d      	movs	r3, #45	; 0x2d
 800a838:	4276      	negs	r6, r6
 800a83a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a83e:	485a      	ldr	r0, [pc, #360]	; (800a9a8 <_printf_i+0x23c>)
 800a840:	230a      	movs	r3, #10
 800a842:	e012      	b.n	800a86a <_printf_i+0xfe>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	6820      	ldr	r0, [r4, #0]
 800a848:	1d19      	adds	r1, r3, #4
 800a84a:	6029      	str	r1, [r5, #0]
 800a84c:	0605      	lsls	r5, r0, #24
 800a84e:	d501      	bpl.n	800a854 <_printf_i+0xe8>
 800a850:	681e      	ldr	r6, [r3, #0]
 800a852:	e002      	b.n	800a85a <_printf_i+0xee>
 800a854:	0641      	lsls	r1, r0, #25
 800a856:	d5fb      	bpl.n	800a850 <_printf_i+0xe4>
 800a858:	881e      	ldrh	r6, [r3, #0]
 800a85a:	4853      	ldr	r0, [pc, #332]	; (800a9a8 <_printf_i+0x23c>)
 800a85c:	2f6f      	cmp	r7, #111	; 0x6f
 800a85e:	bf0c      	ite	eq
 800a860:	2308      	moveq	r3, #8
 800a862:	230a      	movne	r3, #10
 800a864:	2100      	movs	r1, #0
 800a866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a86a:	6865      	ldr	r5, [r4, #4]
 800a86c:	60a5      	str	r5, [r4, #8]
 800a86e:	2d00      	cmp	r5, #0
 800a870:	bfa2      	ittt	ge
 800a872:	6821      	ldrge	r1, [r4, #0]
 800a874:	f021 0104 	bicge.w	r1, r1, #4
 800a878:	6021      	strge	r1, [r4, #0]
 800a87a:	b90e      	cbnz	r6, 800a880 <_printf_i+0x114>
 800a87c:	2d00      	cmp	r5, #0
 800a87e:	d04b      	beq.n	800a918 <_printf_i+0x1ac>
 800a880:	4615      	mov	r5, r2
 800a882:	fbb6 f1f3 	udiv	r1, r6, r3
 800a886:	fb03 6711 	mls	r7, r3, r1, r6
 800a88a:	5dc7      	ldrb	r7, [r0, r7]
 800a88c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a890:	4637      	mov	r7, r6
 800a892:	42bb      	cmp	r3, r7
 800a894:	460e      	mov	r6, r1
 800a896:	d9f4      	bls.n	800a882 <_printf_i+0x116>
 800a898:	2b08      	cmp	r3, #8
 800a89a:	d10b      	bne.n	800a8b4 <_printf_i+0x148>
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	07de      	lsls	r6, r3, #31
 800a8a0:	d508      	bpl.n	800a8b4 <_printf_i+0x148>
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	6861      	ldr	r1, [r4, #4]
 800a8a6:	4299      	cmp	r1, r3
 800a8a8:	bfde      	ittt	le
 800a8aa:	2330      	movle	r3, #48	; 0x30
 800a8ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8b4:	1b52      	subs	r2, r2, r5
 800a8b6:	6122      	str	r2, [r4, #16]
 800a8b8:	f8cd a000 	str.w	sl, [sp]
 800a8bc:	464b      	mov	r3, r9
 800a8be:	aa03      	add	r2, sp, #12
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	f7ff fee4 	bl	800a690 <_printf_common>
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d14a      	bne.n	800a962 <_printf_i+0x1f6>
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d0:	b004      	add	sp, #16
 800a8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	f043 0320 	orr.w	r3, r3, #32
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	4833      	ldr	r0, [pc, #204]	; (800a9ac <_printf_i+0x240>)
 800a8e0:	2778      	movs	r7, #120	; 0x78
 800a8e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	6829      	ldr	r1, [r5, #0]
 800a8ea:	061f      	lsls	r7, r3, #24
 800a8ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8f0:	d402      	bmi.n	800a8f8 <_printf_i+0x18c>
 800a8f2:	065f      	lsls	r7, r3, #25
 800a8f4:	bf48      	it	mi
 800a8f6:	b2b6      	uxthmi	r6, r6
 800a8f8:	07df      	lsls	r7, r3, #31
 800a8fa:	bf48      	it	mi
 800a8fc:	f043 0320 	orrmi.w	r3, r3, #32
 800a900:	6029      	str	r1, [r5, #0]
 800a902:	bf48      	it	mi
 800a904:	6023      	strmi	r3, [r4, #0]
 800a906:	b91e      	cbnz	r6, 800a910 <_printf_i+0x1a4>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	f023 0320 	bic.w	r3, r3, #32
 800a90e:	6023      	str	r3, [r4, #0]
 800a910:	2310      	movs	r3, #16
 800a912:	e7a7      	b.n	800a864 <_printf_i+0xf8>
 800a914:	4824      	ldr	r0, [pc, #144]	; (800a9a8 <_printf_i+0x23c>)
 800a916:	e7e4      	b.n	800a8e2 <_printf_i+0x176>
 800a918:	4615      	mov	r5, r2
 800a91a:	e7bd      	b.n	800a898 <_printf_i+0x12c>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	6826      	ldr	r6, [r4, #0]
 800a920:	6961      	ldr	r1, [r4, #20]
 800a922:	1d18      	adds	r0, r3, #4
 800a924:	6028      	str	r0, [r5, #0]
 800a926:	0635      	lsls	r5, r6, #24
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	d501      	bpl.n	800a930 <_printf_i+0x1c4>
 800a92c:	6019      	str	r1, [r3, #0]
 800a92e:	e002      	b.n	800a936 <_printf_i+0x1ca>
 800a930:	0670      	lsls	r0, r6, #25
 800a932:	d5fb      	bpl.n	800a92c <_printf_i+0x1c0>
 800a934:	8019      	strh	r1, [r3, #0]
 800a936:	2300      	movs	r3, #0
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	4615      	mov	r5, r2
 800a93c:	e7bc      	b.n	800a8b8 <_printf_i+0x14c>
 800a93e:	682b      	ldr	r3, [r5, #0]
 800a940:	1d1a      	adds	r2, r3, #4
 800a942:	602a      	str	r2, [r5, #0]
 800a944:	681d      	ldr	r5, [r3, #0]
 800a946:	6862      	ldr	r2, [r4, #4]
 800a948:	2100      	movs	r1, #0
 800a94a:	4628      	mov	r0, r5
 800a94c:	f7f5 fc48 	bl	80001e0 <memchr>
 800a950:	b108      	cbz	r0, 800a956 <_printf_i+0x1ea>
 800a952:	1b40      	subs	r0, r0, r5
 800a954:	6060      	str	r0, [r4, #4]
 800a956:	6863      	ldr	r3, [r4, #4]
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	2300      	movs	r3, #0
 800a95c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a960:	e7aa      	b.n	800a8b8 <_printf_i+0x14c>
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	462a      	mov	r2, r5
 800a966:	4649      	mov	r1, r9
 800a968:	4640      	mov	r0, r8
 800a96a:	47d0      	blx	sl
 800a96c:	3001      	adds	r0, #1
 800a96e:	d0ad      	beq.n	800a8cc <_printf_i+0x160>
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	079b      	lsls	r3, r3, #30
 800a974:	d413      	bmi.n	800a99e <_printf_i+0x232>
 800a976:	68e0      	ldr	r0, [r4, #12]
 800a978:	9b03      	ldr	r3, [sp, #12]
 800a97a:	4298      	cmp	r0, r3
 800a97c:	bfb8      	it	lt
 800a97e:	4618      	movlt	r0, r3
 800a980:	e7a6      	b.n	800a8d0 <_printf_i+0x164>
 800a982:	2301      	movs	r3, #1
 800a984:	4632      	mov	r2, r6
 800a986:	4649      	mov	r1, r9
 800a988:	4640      	mov	r0, r8
 800a98a:	47d0      	blx	sl
 800a98c:	3001      	adds	r0, #1
 800a98e:	d09d      	beq.n	800a8cc <_printf_i+0x160>
 800a990:	3501      	adds	r5, #1
 800a992:	68e3      	ldr	r3, [r4, #12]
 800a994:	9903      	ldr	r1, [sp, #12]
 800a996:	1a5b      	subs	r3, r3, r1
 800a998:	42ab      	cmp	r3, r5
 800a99a:	dcf2      	bgt.n	800a982 <_printf_i+0x216>
 800a99c:	e7eb      	b.n	800a976 <_printf_i+0x20a>
 800a99e:	2500      	movs	r5, #0
 800a9a0:	f104 0619 	add.w	r6, r4, #25
 800a9a4:	e7f5      	b.n	800a992 <_printf_i+0x226>
 800a9a6:	bf00      	nop
 800a9a8:	0800cb16 	.word	0x0800cb16
 800a9ac:	0800cb27 	.word	0x0800cb27

0800a9b0 <std>:
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	b510      	push	{r4, lr}
 800a9b4:	4604      	mov	r4, r0
 800a9b6:	e9c0 3300 	strd	r3, r3, [r0]
 800a9ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9be:	6083      	str	r3, [r0, #8]
 800a9c0:	8181      	strh	r1, [r0, #12]
 800a9c2:	6643      	str	r3, [r0, #100]	; 0x64
 800a9c4:	81c2      	strh	r2, [r0, #14]
 800a9c6:	6183      	str	r3, [r0, #24]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	2208      	movs	r2, #8
 800a9cc:	305c      	adds	r0, #92	; 0x5c
 800a9ce:	f000 f8f4 	bl	800abba <memset>
 800a9d2:	4b0d      	ldr	r3, [pc, #52]	; (800aa08 <std+0x58>)
 800a9d4:	6263      	str	r3, [r4, #36]	; 0x24
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	; (800aa0c <std+0x5c>)
 800a9d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9da:	4b0d      	ldr	r3, [pc, #52]	; (800aa10 <std+0x60>)
 800a9dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9de:	4b0d      	ldr	r3, [pc, #52]	; (800aa14 <std+0x64>)
 800a9e0:	6323      	str	r3, [r4, #48]	; 0x30
 800a9e2:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <std+0x68>)
 800a9e4:	6224      	str	r4, [r4, #32]
 800a9e6:	429c      	cmp	r4, r3
 800a9e8:	d006      	beq.n	800a9f8 <std+0x48>
 800a9ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a9ee:	4294      	cmp	r4, r2
 800a9f0:	d002      	beq.n	800a9f8 <std+0x48>
 800a9f2:	33d0      	adds	r3, #208	; 0xd0
 800a9f4:	429c      	cmp	r4, r3
 800a9f6:	d105      	bne.n	800aa04 <std+0x54>
 800a9f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa00:	f000 b958 	b.w	800acb4 <__retarget_lock_init_recursive>
 800aa04:	bd10      	pop	{r4, pc}
 800aa06:	bf00      	nop
 800aa08:	0800ab35 	.word	0x0800ab35
 800aa0c:	0800ab57 	.word	0x0800ab57
 800aa10:	0800ab8f 	.word	0x0800ab8f
 800aa14:	0800abb3 	.word	0x0800abb3
 800aa18:	200020f4 	.word	0x200020f4

0800aa1c <stdio_exit_handler>:
 800aa1c:	4a02      	ldr	r2, [pc, #8]	; (800aa28 <stdio_exit_handler+0xc>)
 800aa1e:	4903      	ldr	r1, [pc, #12]	; (800aa2c <stdio_exit_handler+0x10>)
 800aa20:	4803      	ldr	r0, [pc, #12]	; (800aa30 <stdio_exit_handler+0x14>)
 800aa22:	f000 b869 	b.w	800aaf8 <_fwalk_sglue>
 800aa26:	bf00      	nop
 800aa28:	200000fc 	.word	0x200000fc
 800aa2c:	0800c3b9 	.word	0x0800c3b9
 800aa30:	20000108 	.word	0x20000108

0800aa34 <cleanup_stdio>:
 800aa34:	6841      	ldr	r1, [r0, #4]
 800aa36:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <cleanup_stdio+0x34>)
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	b510      	push	{r4, lr}
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	d001      	beq.n	800aa44 <cleanup_stdio+0x10>
 800aa40:	f001 fcba 	bl	800c3b8 <_fflush_r>
 800aa44:	68a1      	ldr	r1, [r4, #8]
 800aa46:	4b09      	ldr	r3, [pc, #36]	; (800aa6c <cleanup_stdio+0x38>)
 800aa48:	4299      	cmp	r1, r3
 800aa4a:	d002      	beq.n	800aa52 <cleanup_stdio+0x1e>
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f001 fcb3 	bl	800c3b8 <_fflush_r>
 800aa52:	68e1      	ldr	r1, [r4, #12]
 800aa54:	4b06      	ldr	r3, [pc, #24]	; (800aa70 <cleanup_stdio+0x3c>)
 800aa56:	4299      	cmp	r1, r3
 800aa58:	d004      	beq.n	800aa64 <cleanup_stdio+0x30>
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa60:	f001 bcaa 	b.w	800c3b8 <_fflush_r>
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	bf00      	nop
 800aa68:	200020f4 	.word	0x200020f4
 800aa6c:	2000215c 	.word	0x2000215c
 800aa70:	200021c4 	.word	0x200021c4

0800aa74 <global_stdio_init.part.0>:
 800aa74:	b510      	push	{r4, lr}
 800aa76:	4b0b      	ldr	r3, [pc, #44]	; (800aaa4 <global_stdio_init.part.0+0x30>)
 800aa78:	4c0b      	ldr	r4, [pc, #44]	; (800aaa8 <global_stdio_init.part.0+0x34>)
 800aa7a:	4a0c      	ldr	r2, [pc, #48]	; (800aaac <global_stdio_init.part.0+0x38>)
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	4620      	mov	r0, r4
 800aa80:	2200      	movs	r2, #0
 800aa82:	2104      	movs	r1, #4
 800aa84:	f7ff ff94 	bl	800a9b0 <std>
 800aa88:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	2109      	movs	r1, #9
 800aa90:	f7ff ff8e 	bl	800a9b0 <std>
 800aa94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800aa98:	2202      	movs	r2, #2
 800aa9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa9e:	2112      	movs	r1, #18
 800aaa0:	f7ff bf86 	b.w	800a9b0 <std>
 800aaa4:	2000222c 	.word	0x2000222c
 800aaa8:	200020f4 	.word	0x200020f4
 800aaac:	0800aa1d 	.word	0x0800aa1d

0800aab0 <__sfp_lock_acquire>:
 800aab0:	4801      	ldr	r0, [pc, #4]	; (800aab8 <__sfp_lock_acquire+0x8>)
 800aab2:	f000 b900 	b.w	800acb6 <__retarget_lock_acquire_recursive>
 800aab6:	bf00      	nop
 800aab8:	20002235 	.word	0x20002235

0800aabc <__sfp_lock_release>:
 800aabc:	4801      	ldr	r0, [pc, #4]	; (800aac4 <__sfp_lock_release+0x8>)
 800aabe:	f000 b8fb 	b.w	800acb8 <__retarget_lock_release_recursive>
 800aac2:	bf00      	nop
 800aac4:	20002235 	.word	0x20002235

0800aac8 <__sinit>:
 800aac8:	b510      	push	{r4, lr}
 800aaca:	4604      	mov	r4, r0
 800aacc:	f7ff fff0 	bl	800aab0 <__sfp_lock_acquire>
 800aad0:	6a23      	ldr	r3, [r4, #32]
 800aad2:	b11b      	cbz	r3, 800aadc <__sinit+0x14>
 800aad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad8:	f7ff bff0 	b.w	800aabc <__sfp_lock_release>
 800aadc:	4b04      	ldr	r3, [pc, #16]	; (800aaf0 <__sinit+0x28>)
 800aade:	6223      	str	r3, [r4, #32]
 800aae0:	4b04      	ldr	r3, [pc, #16]	; (800aaf4 <__sinit+0x2c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1f5      	bne.n	800aad4 <__sinit+0xc>
 800aae8:	f7ff ffc4 	bl	800aa74 <global_stdio_init.part.0>
 800aaec:	e7f2      	b.n	800aad4 <__sinit+0xc>
 800aaee:	bf00      	nop
 800aaf0:	0800aa35 	.word	0x0800aa35
 800aaf4:	2000222c 	.word	0x2000222c

0800aaf8 <_fwalk_sglue>:
 800aaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aafc:	4607      	mov	r7, r0
 800aafe:	4688      	mov	r8, r1
 800ab00:	4614      	mov	r4, r2
 800ab02:	2600      	movs	r6, #0
 800ab04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab08:	f1b9 0901 	subs.w	r9, r9, #1
 800ab0c:	d505      	bpl.n	800ab1a <_fwalk_sglue+0x22>
 800ab0e:	6824      	ldr	r4, [r4, #0]
 800ab10:	2c00      	cmp	r4, #0
 800ab12:	d1f7      	bne.n	800ab04 <_fwalk_sglue+0xc>
 800ab14:	4630      	mov	r0, r6
 800ab16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab1a:	89ab      	ldrh	r3, [r5, #12]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d907      	bls.n	800ab30 <_fwalk_sglue+0x38>
 800ab20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab24:	3301      	adds	r3, #1
 800ab26:	d003      	beq.n	800ab30 <_fwalk_sglue+0x38>
 800ab28:	4629      	mov	r1, r5
 800ab2a:	4638      	mov	r0, r7
 800ab2c:	47c0      	blx	r8
 800ab2e:	4306      	orrs	r6, r0
 800ab30:	3568      	adds	r5, #104	; 0x68
 800ab32:	e7e9      	b.n	800ab08 <_fwalk_sglue+0x10>

0800ab34 <__sread>:
 800ab34:	b510      	push	{r4, lr}
 800ab36:	460c      	mov	r4, r1
 800ab38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab3c:	f000 f86c 	bl	800ac18 <_read_r>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	bfab      	itete	ge
 800ab44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab46:	89a3      	ldrhlt	r3, [r4, #12]
 800ab48:	181b      	addge	r3, r3, r0
 800ab4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab4e:	bfac      	ite	ge
 800ab50:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab52:	81a3      	strhlt	r3, [r4, #12]
 800ab54:	bd10      	pop	{r4, pc}

0800ab56 <__swrite>:
 800ab56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab5a:	461f      	mov	r7, r3
 800ab5c:	898b      	ldrh	r3, [r1, #12]
 800ab5e:	05db      	lsls	r3, r3, #23
 800ab60:	4605      	mov	r5, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	4616      	mov	r6, r2
 800ab66:	d505      	bpl.n	800ab74 <__swrite+0x1e>
 800ab68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f000 f840 	bl	800abf4 <_lseek_r>
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab7e:	81a3      	strh	r3, [r4, #12]
 800ab80:	4632      	mov	r2, r6
 800ab82:	463b      	mov	r3, r7
 800ab84:	4628      	mov	r0, r5
 800ab86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8a:	f000 b857 	b.w	800ac3c <_write_r>

0800ab8e <__sseek>:
 800ab8e:	b510      	push	{r4, lr}
 800ab90:	460c      	mov	r4, r1
 800ab92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab96:	f000 f82d 	bl	800abf4 <_lseek_r>
 800ab9a:	1c43      	adds	r3, r0, #1
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	bf15      	itete	ne
 800aba0:	6560      	strne	r0, [r4, #84]	; 0x54
 800aba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abaa:	81a3      	strheq	r3, [r4, #12]
 800abac:	bf18      	it	ne
 800abae:	81a3      	strhne	r3, [r4, #12]
 800abb0:	bd10      	pop	{r4, pc}

0800abb2 <__sclose>:
 800abb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb6:	f000 b80d 	b.w	800abd4 <_close_r>

0800abba <memset>:
 800abba:	4402      	add	r2, r0
 800abbc:	4603      	mov	r3, r0
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d100      	bne.n	800abc4 <memset+0xa>
 800abc2:	4770      	bx	lr
 800abc4:	f803 1b01 	strb.w	r1, [r3], #1
 800abc8:	e7f9      	b.n	800abbe <memset+0x4>
	...

0800abcc <_localeconv_r>:
 800abcc:	4800      	ldr	r0, [pc, #0]	; (800abd0 <_localeconv_r+0x4>)
 800abce:	4770      	bx	lr
 800abd0:	20000248 	.word	0x20000248

0800abd4 <_close_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d06      	ldr	r5, [pc, #24]	; (800abf0 <_close_r+0x1c>)
 800abd8:	2300      	movs	r3, #0
 800abda:	4604      	mov	r4, r0
 800abdc:	4608      	mov	r0, r1
 800abde:	602b      	str	r3, [r5, #0]
 800abe0:	f7f7 f843 	bl	8001c6a <_close>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_close_r+0x1a>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	b103      	cbz	r3, 800abee <_close_r+0x1a>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	20002230 	.word	0x20002230

0800abf4 <_lseek_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	4d07      	ldr	r5, [pc, #28]	; (800ac14 <_lseek_r+0x20>)
 800abf8:	4604      	mov	r4, r0
 800abfa:	4608      	mov	r0, r1
 800abfc:	4611      	mov	r1, r2
 800abfe:	2200      	movs	r2, #0
 800ac00:	602a      	str	r2, [r5, #0]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f7f7 f858 	bl	8001cb8 <_lseek>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d102      	bne.n	800ac12 <_lseek_r+0x1e>
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	b103      	cbz	r3, 800ac12 <_lseek_r+0x1e>
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	bd38      	pop	{r3, r4, r5, pc}
 800ac14:	20002230 	.word	0x20002230

0800ac18 <_read_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4d07      	ldr	r5, [pc, #28]	; (800ac38 <_read_r+0x20>)
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	4608      	mov	r0, r1
 800ac20:	4611      	mov	r1, r2
 800ac22:	2200      	movs	r2, #0
 800ac24:	602a      	str	r2, [r5, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	f7f6 ffe6 	bl	8001bf8 <_read>
 800ac2c:	1c43      	adds	r3, r0, #1
 800ac2e:	d102      	bne.n	800ac36 <_read_r+0x1e>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	b103      	cbz	r3, 800ac36 <_read_r+0x1e>
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	20002230 	.word	0x20002230

0800ac3c <_write_r>:
 800ac3c:	b538      	push	{r3, r4, r5, lr}
 800ac3e:	4d07      	ldr	r5, [pc, #28]	; (800ac5c <_write_r+0x20>)
 800ac40:	4604      	mov	r4, r0
 800ac42:	4608      	mov	r0, r1
 800ac44:	4611      	mov	r1, r2
 800ac46:	2200      	movs	r2, #0
 800ac48:	602a      	str	r2, [r5, #0]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f7f6 fff1 	bl	8001c32 <_write>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d102      	bne.n	800ac5a <_write_r+0x1e>
 800ac54:	682b      	ldr	r3, [r5, #0]
 800ac56:	b103      	cbz	r3, 800ac5a <_write_r+0x1e>
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	20002230 	.word	0x20002230

0800ac60 <__errno>:
 800ac60:	4b01      	ldr	r3, [pc, #4]	; (800ac68 <__errno+0x8>)
 800ac62:	6818      	ldr	r0, [r3, #0]
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	20000154 	.word	0x20000154

0800ac6c <__libc_init_array>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	4d0d      	ldr	r5, [pc, #52]	; (800aca4 <__libc_init_array+0x38>)
 800ac70:	4c0d      	ldr	r4, [pc, #52]	; (800aca8 <__libc_init_array+0x3c>)
 800ac72:	1b64      	subs	r4, r4, r5
 800ac74:	10a4      	asrs	r4, r4, #2
 800ac76:	2600      	movs	r6, #0
 800ac78:	42a6      	cmp	r6, r4
 800ac7a:	d109      	bne.n	800ac90 <__libc_init_array+0x24>
 800ac7c:	4d0b      	ldr	r5, [pc, #44]	; (800acac <__libc_init_array+0x40>)
 800ac7e:	4c0c      	ldr	r4, [pc, #48]	; (800acb0 <__libc_init_array+0x44>)
 800ac80:	f001 feee 	bl	800ca60 <_init>
 800ac84:	1b64      	subs	r4, r4, r5
 800ac86:	10a4      	asrs	r4, r4, #2
 800ac88:	2600      	movs	r6, #0
 800ac8a:	42a6      	cmp	r6, r4
 800ac8c:	d105      	bne.n	800ac9a <__libc_init_array+0x2e>
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
 800ac90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac94:	4798      	blx	r3
 800ac96:	3601      	adds	r6, #1
 800ac98:	e7ee      	b.n	800ac78 <__libc_init_array+0xc>
 800ac9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac9e:	4798      	blx	r3
 800aca0:	3601      	adds	r6, #1
 800aca2:	e7f2      	b.n	800ac8a <__libc_init_array+0x1e>
 800aca4:	0800ce7c 	.word	0x0800ce7c
 800aca8:	0800ce7c 	.word	0x0800ce7c
 800acac:	0800ce7c 	.word	0x0800ce7c
 800acb0:	0800ce80 	.word	0x0800ce80

0800acb4 <__retarget_lock_init_recursive>:
 800acb4:	4770      	bx	lr

0800acb6 <__retarget_lock_acquire_recursive>:
 800acb6:	4770      	bx	lr

0800acb8 <__retarget_lock_release_recursive>:
 800acb8:	4770      	bx	lr

0800acba <quorem>:
 800acba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbe:	6903      	ldr	r3, [r0, #16]
 800acc0:	690c      	ldr	r4, [r1, #16]
 800acc2:	42a3      	cmp	r3, r4
 800acc4:	4607      	mov	r7, r0
 800acc6:	db7e      	blt.n	800adc6 <quorem+0x10c>
 800acc8:	3c01      	subs	r4, #1
 800acca:	f101 0814 	add.w	r8, r1, #20
 800acce:	f100 0514 	add.w	r5, r0, #20
 800acd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ace0:	3301      	adds	r3, #1
 800ace2:	429a      	cmp	r2, r3
 800ace4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ace8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800acec:	fbb2 f6f3 	udiv	r6, r2, r3
 800acf0:	d331      	bcc.n	800ad56 <quorem+0x9c>
 800acf2:	f04f 0e00 	mov.w	lr, #0
 800acf6:	4640      	mov	r0, r8
 800acf8:	46ac      	mov	ip, r5
 800acfa:	46f2      	mov	sl, lr
 800acfc:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad00:	b293      	uxth	r3, r2
 800ad02:	fb06 e303 	mla	r3, r6, r3, lr
 800ad06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad0a:	0c1a      	lsrs	r2, r3, #16
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	ebaa 0303 	sub.w	r3, sl, r3
 800ad12:	f8dc a000 	ldr.w	sl, [ip]
 800ad16:	fa13 f38a 	uxtah	r3, r3, sl
 800ad1a:	fb06 220e 	mla	r2, r6, lr, r2
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	9b00      	ldr	r3, [sp, #0]
 800ad22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad26:	b292      	uxth	r2, r2
 800ad28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad30:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad34:	4581      	cmp	r9, r0
 800ad36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad3a:	f84c 3b04 	str.w	r3, [ip], #4
 800ad3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad42:	d2db      	bcs.n	800acfc <quorem+0x42>
 800ad44:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad48:	b92b      	cbnz	r3, 800ad56 <quorem+0x9c>
 800ad4a:	9b01      	ldr	r3, [sp, #4]
 800ad4c:	3b04      	subs	r3, #4
 800ad4e:	429d      	cmp	r5, r3
 800ad50:	461a      	mov	r2, r3
 800ad52:	d32c      	bcc.n	800adae <quorem+0xf4>
 800ad54:	613c      	str	r4, [r7, #16]
 800ad56:	4638      	mov	r0, r7
 800ad58:	f001 f9a8 	bl	800c0ac <__mcmp>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	db22      	blt.n	800ada6 <quorem+0xec>
 800ad60:	3601      	adds	r6, #1
 800ad62:	4629      	mov	r1, r5
 800ad64:	2000      	movs	r0, #0
 800ad66:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad6a:	f8d1 c000 	ldr.w	ip, [r1]
 800ad6e:	b293      	uxth	r3, r2
 800ad70:	1ac3      	subs	r3, r0, r3
 800ad72:	0c12      	lsrs	r2, r2, #16
 800ad74:	fa13 f38c 	uxtah	r3, r3, ip
 800ad78:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ad7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad86:	45c1      	cmp	r9, r8
 800ad88:	f841 3b04 	str.w	r3, [r1], #4
 800ad8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad90:	d2e9      	bcs.n	800ad66 <quorem+0xac>
 800ad92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad9a:	b922      	cbnz	r2, 800ada6 <quorem+0xec>
 800ad9c:	3b04      	subs	r3, #4
 800ad9e:	429d      	cmp	r5, r3
 800ada0:	461a      	mov	r2, r3
 800ada2:	d30a      	bcc.n	800adba <quorem+0x100>
 800ada4:	613c      	str	r4, [r7, #16]
 800ada6:	4630      	mov	r0, r6
 800ada8:	b003      	add	sp, #12
 800adaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adae:	6812      	ldr	r2, [r2, #0]
 800adb0:	3b04      	subs	r3, #4
 800adb2:	2a00      	cmp	r2, #0
 800adb4:	d1ce      	bne.n	800ad54 <quorem+0x9a>
 800adb6:	3c01      	subs	r4, #1
 800adb8:	e7c9      	b.n	800ad4e <quorem+0x94>
 800adba:	6812      	ldr	r2, [r2, #0]
 800adbc:	3b04      	subs	r3, #4
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	d1f0      	bne.n	800ada4 <quorem+0xea>
 800adc2:	3c01      	subs	r4, #1
 800adc4:	e7eb      	b.n	800ad9e <quorem+0xe4>
 800adc6:	2000      	movs	r0, #0
 800adc8:	e7ee      	b.n	800ada8 <quorem+0xee>
 800adca:	0000      	movs	r0, r0
 800adcc:	0000      	movs	r0, r0
	...

0800add0 <_dtoa_r>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	ed2d 8b04 	vpush	{d8-d9}
 800add8:	69c5      	ldr	r5, [r0, #28]
 800adda:	b093      	sub	sp, #76	; 0x4c
 800addc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ade0:	ec57 6b10 	vmov	r6, r7, d0
 800ade4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ade8:	9107      	str	r1, [sp, #28]
 800adea:	4604      	mov	r4, r0
 800adec:	920a      	str	r2, [sp, #40]	; 0x28
 800adee:	930d      	str	r3, [sp, #52]	; 0x34
 800adf0:	b975      	cbnz	r5, 800ae10 <_dtoa_r+0x40>
 800adf2:	2010      	movs	r0, #16
 800adf4:	f000 fe2a 	bl	800ba4c <malloc>
 800adf8:	4602      	mov	r2, r0
 800adfa:	61e0      	str	r0, [r4, #28]
 800adfc:	b920      	cbnz	r0, 800ae08 <_dtoa_r+0x38>
 800adfe:	4bae      	ldr	r3, [pc, #696]	; (800b0b8 <_dtoa_r+0x2e8>)
 800ae00:	21ef      	movs	r1, #239	; 0xef
 800ae02:	48ae      	ldr	r0, [pc, #696]	; (800b0bc <_dtoa_r+0x2ec>)
 800ae04:	f001 fb1e 	bl	800c444 <__assert_func>
 800ae08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae0c:	6005      	str	r5, [r0, #0]
 800ae0e:	60c5      	str	r5, [r0, #12]
 800ae10:	69e3      	ldr	r3, [r4, #28]
 800ae12:	6819      	ldr	r1, [r3, #0]
 800ae14:	b151      	cbz	r1, 800ae2c <_dtoa_r+0x5c>
 800ae16:	685a      	ldr	r2, [r3, #4]
 800ae18:	604a      	str	r2, [r1, #4]
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4093      	lsls	r3, r2
 800ae1e:	608b      	str	r3, [r1, #8]
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 ff07 	bl	800bc34 <_Bfree>
 800ae26:	69e3      	ldr	r3, [r4, #28]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]
 800ae2c:	1e3b      	subs	r3, r7, #0
 800ae2e:	bfbb      	ittet	lt
 800ae30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ae34:	9303      	strlt	r3, [sp, #12]
 800ae36:	2300      	movge	r3, #0
 800ae38:	2201      	movlt	r2, #1
 800ae3a:	bfac      	ite	ge
 800ae3c:	f8c8 3000 	strge.w	r3, [r8]
 800ae40:	f8c8 2000 	strlt.w	r2, [r8]
 800ae44:	4b9e      	ldr	r3, [pc, #632]	; (800b0c0 <_dtoa_r+0x2f0>)
 800ae46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ae4a:	ea33 0308 	bics.w	r3, r3, r8
 800ae4e:	d11b      	bne.n	800ae88 <_dtoa_r+0xb8>
 800ae50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae52:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ae5c:	4333      	orrs	r3, r6
 800ae5e:	f000 8593 	beq.w	800b988 <_dtoa_r+0xbb8>
 800ae62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae64:	b963      	cbnz	r3, 800ae80 <_dtoa_r+0xb0>
 800ae66:	4b97      	ldr	r3, [pc, #604]	; (800b0c4 <_dtoa_r+0x2f4>)
 800ae68:	e027      	b.n	800aeba <_dtoa_r+0xea>
 800ae6a:	4b97      	ldr	r3, [pc, #604]	; (800b0c8 <_dtoa_r+0x2f8>)
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	3308      	adds	r3, #8
 800ae70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	9800      	ldr	r0, [sp, #0]
 800ae76:	b013      	add	sp, #76	; 0x4c
 800ae78:	ecbd 8b04 	vpop	{d8-d9}
 800ae7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae80:	4b90      	ldr	r3, [pc, #576]	; (800b0c4 <_dtoa_r+0x2f4>)
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	3303      	adds	r3, #3
 800ae86:	e7f3      	b.n	800ae70 <_dtoa_r+0xa0>
 800ae88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	ec51 0b17 	vmov	r0, r1, d7
 800ae92:	eeb0 8a47 	vmov.f32	s16, s14
 800ae96:	eef0 8a67 	vmov.f32	s17, s15
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f7f5 fe1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800aea0:	4681      	mov	r9, r0
 800aea2:	b160      	cbz	r0, 800aebe <_dtoa_r+0xee>
 800aea4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aea6:	2301      	movs	r3, #1
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f000 8568 	beq.w	800b982 <_dtoa_r+0xbb2>
 800aeb2:	4b86      	ldr	r3, [pc, #536]	; (800b0cc <_dtoa_r+0x2fc>)
 800aeb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aeb6:	6013      	str	r3, [r2, #0]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	9300      	str	r3, [sp, #0]
 800aebc:	e7da      	b.n	800ae74 <_dtoa_r+0xa4>
 800aebe:	aa10      	add	r2, sp, #64	; 0x40
 800aec0:	a911      	add	r1, sp, #68	; 0x44
 800aec2:	4620      	mov	r0, r4
 800aec4:	eeb0 0a48 	vmov.f32	s0, s16
 800aec8:	eef0 0a68 	vmov.f32	s1, s17
 800aecc:	f001 f994 	bl	800c1f8 <__d2b>
 800aed0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800aed4:	4682      	mov	sl, r0
 800aed6:	2d00      	cmp	r5, #0
 800aed8:	d07f      	beq.n	800afda <_dtoa_r+0x20a>
 800aeda:	ee18 3a90 	vmov	r3, s17
 800aede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aee2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aee6:	ec51 0b18 	vmov	r0, r1, d8
 800aeea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aeee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aef2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aef6:	4619      	mov	r1, r3
 800aef8:	2200      	movs	r2, #0
 800aefa:	4b75      	ldr	r3, [pc, #468]	; (800b0d0 <_dtoa_r+0x300>)
 800aefc:	f7f5 f9cc 	bl	8000298 <__aeabi_dsub>
 800af00:	a367      	add	r3, pc, #412	; (adr r3, 800b0a0 <_dtoa_r+0x2d0>)
 800af02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af06:	f7f5 fb7f 	bl	8000608 <__aeabi_dmul>
 800af0a:	a367      	add	r3, pc, #412	; (adr r3, 800b0a8 <_dtoa_r+0x2d8>)
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	f7f5 f9c4 	bl	800029c <__adddf3>
 800af14:	4606      	mov	r6, r0
 800af16:	4628      	mov	r0, r5
 800af18:	460f      	mov	r7, r1
 800af1a:	f7f5 fb0b 	bl	8000534 <__aeabi_i2d>
 800af1e:	a364      	add	r3, pc, #400	; (adr r3, 800b0b0 <_dtoa_r+0x2e0>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f7f5 fb70 	bl	8000608 <__aeabi_dmul>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4630      	mov	r0, r6
 800af2e:	4639      	mov	r1, r7
 800af30:	f7f5 f9b4 	bl	800029c <__adddf3>
 800af34:	4606      	mov	r6, r0
 800af36:	460f      	mov	r7, r1
 800af38:	f7f5 fe16 	bl	8000b68 <__aeabi_d2iz>
 800af3c:	2200      	movs	r2, #0
 800af3e:	4683      	mov	fp, r0
 800af40:	2300      	movs	r3, #0
 800af42:	4630      	mov	r0, r6
 800af44:	4639      	mov	r1, r7
 800af46:	f7f5 fdd1 	bl	8000aec <__aeabi_dcmplt>
 800af4a:	b148      	cbz	r0, 800af60 <_dtoa_r+0x190>
 800af4c:	4658      	mov	r0, fp
 800af4e:	f7f5 faf1 	bl	8000534 <__aeabi_i2d>
 800af52:	4632      	mov	r2, r6
 800af54:	463b      	mov	r3, r7
 800af56:	f7f5 fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800af5a:	b908      	cbnz	r0, 800af60 <_dtoa_r+0x190>
 800af5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af60:	f1bb 0f16 	cmp.w	fp, #22
 800af64:	d857      	bhi.n	800b016 <_dtoa_r+0x246>
 800af66:	4b5b      	ldr	r3, [pc, #364]	; (800b0d4 <_dtoa_r+0x304>)
 800af68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	ec51 0b18 	vmov	r0, r1, d8
 800af74:	f7f5 fdba 	bl	8000aec <__aeabi_dcmplt>
 800af78:	2800      	cmp	r0, #0
 800af7a:	d04e      	beq.n	800b01a <_dtoa_r+0x24a>
 800af7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af80:	2300      	movs	r3, #0
 800af82:	930c      	str	r3, [sp, #48]	; 0x30
 800af84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af86:	1b5b      	subs	r3, r3, r5
 800af88:	1e5a      	subs	r2, r3, #1
 800af8a:	bf45      	ittet	mi
 800af8c:	f1c3 0301 	rsbmi	r3, r3, #1
 800af90:	9305      	strmi	r3, [sp, #20]
 800af92:	2300      	movpl	r3, #0
 800af94:	2300      	movmi	r3, #0
 800af96:	9206      	str	r2, [sp, #24]
 800af98:	bf54      	ite	pl
 800af9a:	9305      	strpl	r3, [sp, #20]
 800af9c:	9306      	strmi	r3, [sp, #24]
 800af9e:	f1bb 0f00 	cmp.w	fp, #0
 800afa2:	db3c      	blt.n	800b01e <_dtoa_r+0x24e>
 800afa4:	9b06      	ldr	r3, [sp, #24]
 800afa6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800afaa:	445b      	add	r3, fp
 800afac:	9306      	str	r3, [sp, #24]
 800afae:	2300      	movs	r3, #0
 800afb0:	9308      	str	r3, [sp, #32]
 800afb2:	9b07      	ldr	r3, [sp, #28]
 800afb4:	2b09      	cmp	r3, #9
 800afb6:	d868      	bhi.n	800b08a <_dtoa_r+0x2ba>
 800afb8:	2b05      	cmp	r3, #5
 800afba:	bfc4      	itt	gt
 800afbc:	3b04      	subgt	r3, #4
 800afbe:	9307      	strgt	r3, [sp, #28]
 800afc0:	9b07      	ldr	r3, [sp, #28]
 800afc2:	f1a3 0302 	sub.w	r3, r3, #2
 800afc6:	bfcc      	ite	gt
 800afc8:	2500      	movgt	r5, #0
 800afca:	2501      	movle	r5, #1
 800afcc:	2b03      	cmp	r3, #3
 800afce:	f200 8085 	bhi.w	800b0dc <_dtoa_r+0x30c>
 800afd2:	e8df f003 	tbb	[pc, r3]
 800afd6:	3b2e      	.short	0x3b2e
 800afd8:	5839      	.short	0x5839
 800afda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800afde:	441d      	add	r5, r3
 800afe0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800afe4:	2b20      	cmp	r3, #32
 800afe6:	bfc1      	itttt	gt
 800afe8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800afec:	fa08 f803 	lslgt.w	r8, r8, r3
 800aff0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aff4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aff8:	bfd6      	itet	le
 800affa:	f1c3 0320 	rsble	r3, r3, #32
 800affe:	ea48 0003 	orrgt.w	r0, r8, r3
 800b002:	fa06 f003 	lslle.w	r0, r6, r3
 800b006:	f7f5 fa85 	bl	8000514 <__aeabi_ui2d>
 800b00a:	2201      	movs	r2, #1
 800b00c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b010:	3d01      	subs	r5, #1
 800b012:	920e      	str	r2, [sp, #56]	; 0x38
 800b014:	e76f      	b.n	800aef6 <_dtoa_r+0x126>
 800b016:	2301      	movs	r3, #1
 800b018:	e7b3      	b.n	800af82 <_dtoa_r+0x1b2>
 800b01a:	900c      	str	r0, [sp, #48]	; 0x30
 800b01c:	e7b2      	b.n	800af84 <_dtoa_r+0x1b4>
 800b01e:	9b05      	ldr	r3, [sp, #20]
 800b020:	eba3 030b 	sub.w	r3, r3, fp
 800b024:	9305      	str	r3, [sp, #20]
 800b026:	f1cb 0300 	rsb	r3, fp, #0
 800b02a:	9308      	str	r3, [sp, #32]
 800b02c:	2300      	movs	r3, #0
 800b02e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b030:	e7bf      	b.n	800afb2 <_dtoa_r+0x1e2>
 800b032:	2300      	movs	r3, #0
 800b034:	9309      	str	r3, [sp, #36]	; 0x24
 800b036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b038:	2b00      	cmp	r3, #0
 800b03a:	dc52      	bgt.n	800b0e2 <_dtoa_r+0x312>
 800b03c:	2301      	movs	r3, #1
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	461a      	mov	r2, r3
 800b044:	920a      	str	r2, [sp, #40]	; 0x28
 800b046:	e00b      	b.n	800b060 <_dtoa_r+0x290>
 800b048:	2301      	movs	r3, #1
 800b04a:	e7f3      	b.n	800b034 <_dtoa_r+0x264>
 800b04c:	2300      	movs	r3, #0
 800b04e:	9309      	str	r3, [sp, #36]	; 0x24
 800b050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b052:	445b      	add	r3, fp
 800b054:	9301      	str	r3, [sp, #4]
 800b056:	3301      	adds	r3, #1
 800b058:	2b01      	cmp	r3, #1
 800b05a:	9304      	str	r3, [sp, #16]
 800b05c:	bfb8      	it	lt
 800b05e:	2301      	movlt	r3, #1
 800b060:	69e0      	ldr	r0, [r4, #28]
 800b062:	2100      	movs	r1, #0
 800b064:	2204      	movs	r2, #4
 800b066:	f102 0614 	add.w	r6, r2, #20
 800b06a:	429e      	cmp	r6, r3
 800b06c:	d93d      	bls.n	800b0ea <_dtoa_r+0x31a>
 800b06e:	6041      	str	r1, [r0, #4]
 800b070:	4620      	mov	r0, r4
 800b072:	f000 fd9f 	bl	800bbb4 <_Balloc>
 800b076:	9000      	str	r0, [sp, #0]
 800b078:	2800      	cmp	r0, #0
 800b07a:	d139      	bne.n	800b0f0 <_dtoa_r+0x320>
 800b07c:	4b16      	ldr	r3, [pc, #88]	; (800b0d8 <_dtoa_r+0x308>)
 800b07e:	4602      	mov	r2, r0
 800b080:	f240 11af 	movw	r1, #431	; 0x1af
 800b084:	e6bd      	b.n	800ae02 <_dtoa_r+0x32>
 800b086:	2301      	movs	r3, #1
 800b088:	e7e1      	b.n	800b04e <_dtoa_r+0x27e>
 800b08a:	2501      	movs	r5, #1
 800b08c:	2300      	movs	r3, #0
 800b08e:	9307      	str	r3, [sp, #28]
 800b090:	9509      	str	r5, [sp, #36]	; 0x24
 800b092:	f04f 33ff 	mov.w	r3, #4294967295
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	9304      	str	r3, [sp, #16]
 800b09a:	2200      	movs	r2, #0
 800b09c:	2312      	movs	r3, #18
 800b09e:	e7d1      	b.n	800b044 <_dtoa_r+0x274>
 800b0a0:	636f4361 	.word	0x636f4361
 800b0a4:	3fd287a7 	.word	0x3fd287a7
 800b0a8:	8b60c8b3 	.word	0x8b60c8b3
 800b0ac:	3fc68a28 	.word	0x3fc68a28
 800b0b0:	509f79fb 	.word	0x509f79fb
 800b0b4:	3fd34413 	.word	0x3fd34413
 800b0b8:	0800cb45 	.word	0x0800cb45
 800b0bc:	0800cb5c 	.word	0x0800cb5c
 800b0c0:	7ff00000 	.word	0x7ff00000
 800b0c4:	0800cb41 	.word	0x0800cb41
 800b0c8:	0800cb38 	.word	0x0800cb38
 800b0cc:	0800cb15 	.word	0x0800cb15
 800b0d0:	3ff80000 	.word	0x3ff80000
 800b0d4:	0800cc48 	.word	0x0800cc48
 800b0d8:	0800cbb4 	.word	0x0800cbb4
 800b0dc:	2301      	movs	r3, #1
 800b0de:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e0:	e7d7      	b.n	800b092 <_dtoa_r+0x2c2>
 800b0e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	9304      	str	r3, [sp, #16]
 800b0e8:	e7ba      	b.n	800b060 <_dtoa_r+0x290>
 800b0ea:	3101      	adds	r1, #1
 800b0ec:	0052      	lsls	r2, r2, #1
 800b0ee:	e7ba      	b.n	800b066 <_dtoa_r+0x296>
 800b0f0:	69e3      	ldr	r3, [r4, #28]
 800b0f2:	9a00      	ldr	r2, [sp, #0]
 800b0f4:	601a      	str	r2, [r3, #0]
 800b0f6:	9b04      	ldr	r3, [sp, #16]
 800b0f8:	2b0e      	cmp	r3, #14
 800b0fa:	f200 80a8 	bhi.w	800b24e <_dtoa_r+0x47e>
 800b0fe:	2d00      	cmp	r5, #0
 800b100:	f000 80a5 	beq.w	800b24e <_dtoa_r+0x47e>
 800b104:	f1bb 0f00 	cmp.w	fp, #0
 800b108:	dd38      	ble.n	800b17c <_dtoa_r+0x3ac>
 800b10a:	4bc0      	ldr	r3, [pc, #768]	; (800b40c <_dtoa_r+0x63c>)
 800b10c:	f00b 020f 	and.w	r2, fp, #15
 800b110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b114:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b118:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b11c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b120:	d019      	beq.n	800b156 <_dtoa_r+0x386>
 800b122:	4bbb      	ldr	r3, [pc, #748]	; (800b410 <_dtoa_r+0x640>)
 800b124:	ec51 0b18 	vmov	r0, r1, d8
 800b128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b12c:	f7f5 fb96 	bl	800085c <__aeabi_ddiv>
 800b130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b134:	f008 080f 	and.w	r8, r8, #15
 800b138:	2503      	movs	r5, #3
 800b13a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b410 <_dtoa_r+0x640>
 800b13e:	f1b8 0f00 	cmp.w	r8, #0
 800b142:	d10a      	bne.n	800b15a <_dtoa_r+0x38a>
 800b144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b148:	4632      	mov	r2, r6
 800b14a:	463b      	mov	r3, r7
 800b14c:	f7f5 fb86 	bl	800085c <__aeabi_ddiv>
 800b150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b154:	e02b      	b.n	800b1ae <_dtoa_r+0x3de>
 800b156:	2502      	movs	r5, #2
 800b158:	e7ef      	b.n	800b13a <_dtoa_r+0x36a>
 800b15a:	f018 0f01 	tst.w	r8, #1
 800b15e:	d008      	beq.n	800b172 <_dtoa_r+0x3a2>
 800b160:	4630      	mov	r0, r6
 800b162:	4639      	mov	r1, r7
 800b164:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b168:	f7f5 fa4e 	bl	8000608 <__aeabi_dmul>
 800b16c:	3501      	adds	r5, #1
 800b16e:	4606      	mov	r6, r0
 800b170:	460f      	mov	r7, r1
 800b172:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b176:	f109 0908 	add.w	r9, r9, #8
 800b17a:	e7e0      	b.n	800b13e <_dtoa_r+0x36e>
 800b17c:	f000 809f 	beq.w	800b2be <_dtoa_r+0x4ee>
 800b180:	f1cb 0600 	rsb	r6, fp, #0
 800b184:	4ba1      	ldr	r3, [pc, #644]	; (800b40c <_dtoa_r+0x63c>)
 800b186:	4fa2      	ldr	r7, [pc, #648]	; (800b410 <_dtoa_r+0x640>)
 800b188:	f006 020f 	and.w	r2, r6, #15
 800b18c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	ec51 0b18 	vmov	r0, r1, d8
 800b198:	f7f5 fa36 	bl	8000608 <__aeabi_dmul>
 800b19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1a0:	1136      	asrs	r6, r6, #4
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	2502      	movs	r5, #2
 800b1a6:	2e00      	cmp	r6, #0
 800b1a8:	d17e      	bne.n	800b2a8 <_dtoa_r+0x4d8>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1d0      	bne.n	800b150 <_dtoa_r+0x380>
 800b1ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 8084 	beq.w	800b2c2 <_dtoa_r+0x4f2>
 800b1ba:	4b96      	ldr	r3, [pc, #600]	; (800b414 <_dtoa_r+0x644>)
 800b1bc:	2200      	movs	r2, #0
 800b1be:	4640      	mov	r0, r8
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	f7f5 fc93 	bl	8000aec <__aeabi_dcmplt>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d07b      	beq.n	800b2c2 <_dtoa_r+0x4f2>
 800b1ca:	9b04      	ldr	r3, [sp, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d078      	beq.n	800b2c2 <_dtoa_r+0x4f2>
 800b1d0:	9b01      	ldr	r3, [sp, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	dd39      	ble.n	800b24a <_dtoa_r+0x47a>
 800b1d6:	4b90      	ldr	r3, [pc, #576]	; (800b418 <_dtoa_r+0x648>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	4640      	mov	r0, r8
 800b1dc:	4649      	mov	r1, r9
 800b1de:	f7f5 fa13 	bl	8000608 <__aeabi_dmul>
 800b1e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1e6:	9e01      	ldr	r6, [sp, #4]
 800b1e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b1ec:	3501      	adds	r5, #1
 800b1ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f7f5 f99e 	bl	8000534 <__aeabi_i2d>
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	464b      	mov	r3, r9
 800b1fc:	f7f5 fa04 	bl	8000608 <__aeabi_dmul>
 800b200:	4b86      	ldr	r3, [pc, #536]	; (800b41c <_dtoa_r+0x64c>)
 800b202:	2200      	movs	r2, #0
 800b204:	f7f5 f84a 	bl	800029c <__adddf3>
 800b208:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b20c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b210:	9303      	str	r3, [sp, #12]
 800b212:	2e00      	cmp	r6, #0
 800b214:	d158      	bne.n	800b2c8 <_dtoa_r+0x4f8>
 800b216:	4b82      	ldr	r3, [pc, #520]	; (800b420 <_dtoa_r+0x650>)
 800b218:	2200      	movs	r2, #0
 800b21a:	4640      	mov	r0, r8
 800b21c:	4649      	mov	r1, r9
 800b21e:	f7f5 f83b 	bl	8000298 <__aeabi_dsub>
 800b222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b226:	4680      	mov	r8, r0
 800b228:	4689      	mov	r9, r1
 800b22a:	f7f5 fc7d 	bl	8000b28 <__aeabi_dcmpgt>
 800b22e:	2800      	cmp	r0, #0
 800b230:	f040 8296 	bne.w	800b760 <_dtoa_r+0x990>
 800b234:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b238:	4640      	mov	r0, r8
 800b23a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b23e:	4649      	mov	r1, r9
 800b240:	f7f5 fc54 	bl	8000aec <__aeabi_dcmplt>
 800b244:	2800      	cmp	r0, #0
 800b246:	f040 8289 	bne.w	800b75c <_dtoa_r+0x98c>
 800b24a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b24e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b250:	2b00      	cmp	r3, #0
 800b252:	f2c0 814e 	blt.w	800b4f2 <_dtoa_r+0x722>
 800b256:	f1bb 0f0e 	cmp.w	fp, #14
 800b25a:	f300 814a 	bgt.w	800b4f2 <_dtoa_r+0x722>
 800b25e:	4b6b      	ldr	r3, [pc, #428]	; (800b40c <_dtoa_r+0x63c>)
 800b260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b264:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f280 80dc 	bge.w	800b428 <_dtoa_r+0x658>
 800b270:	9b04      	ldr	r3, [sp, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	f300 80d8 	bgt.w	800b428 <_dtoa_r+0x658>
 800b278:	f040 826f 	bne.w	800b75a <_dtoa_r+0x98a>
 800b27c:	4b68      	ldr	r3, [pc, #416]	; (800b420 <_dtoa_r+0x650>)
 800b27e:	2200      	movs	r2, #0
 800b280:	4640      	mov	r0, r8
 800b282:	4649      	mov	r1, r9
 800b284:	f7f5 f9c0 	bl	8000608 <__aeabi_dmul>
 800b288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b28c:	f7f5 fc42 	bl	8000b14 <__aeabi_dcmpge>
 800b290:	9e04      	ldr	r6, [sp, #16]
 800b292:	4637      	mov	r7, r6
 800b294:	2800      	cmp	r0, #0
 800b296:	f040 8245 	bne.w	800b724 <_dtoa_r+0x954>
 800b29a:	9d00      	ldr	r5, [sp, #0]
 800b29c:	2331      	movs	r3, #49	; 0x31
 800b29e:	f805 3b01 	strb.w	r3, [r5], #1
 800b2a2:	f10b 0b01 	add.w	fp, fp, #1
 800b2a6:	e241      	b.n	800b72c <_dtoa_r+0x95c>
 800b2a8:	07f2      	lsls	r2, r6, #31
 800b2aa:	d505      	bpl.n	800b2b8 <_dtoa_r+0x4e8>
 800b2ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2b0:	f7f5 f9aa 	bl	8000608 <__aeabi_dmul>
 800b2b4:	3501      	adds	r5, #1
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	1076      	asrs	r6, r6, #1
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	e773      	b.n	800b1a6 <_dtoa_r+0x3d6>
 800b2be:	2502      	movs	r5, #2
 800b2c0:	e775      	b.n	800b1ae <_dtoa_r+0x3de>
 800b2c2:	9e04      	ldr	r6, [sp, #16]
 800b2c4:	465f      	mov	r7, fp
 800b2c6:	e792      	b.n	800b1ee <_dtoa_r+0x41e>
 800b2c8:	9900      	ldr	r1, [sp, #0]
 800b2ca:	4b50      	ldr	r3, [pc, #320]	; (800b40c <_dtoa_r+0x63c>)
 800b2cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2d0:	4431      	add	r1, r6
 800b2d2:	9102      	str	r1, [sp, #8]
 800b2d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2d6:	eeb0 9a47 	vmov.f32	s18, s14
 800b2da:	eef0 9a67 	vmov.f32	s19, s15
 800b2de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b2e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	d044      	beq.n	800b374 <_dtoa_r+0x5a4>
 800b2ea:	494e      	ldr	r1, [pc, #312]	; (800b424 <_dtoa_r+0x654>)
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	f7f5 fab5 	bl	800085c <__aeabi_ddiv>
 800b2f2:	ec53 2b19 	vmov	r2, r3, d9
 800b2f6:	f7f4 ffcf 	bl	8000298 <__aeabi_dsub>
 800b2fa:	9d00      	ldr	r5, [sp, #0]
 800b2fc:	ec41 0b19 	vmov	d9, r0, r1
 800b300:	4649      	mov	r1, r9
 800b302:	4640      	mov	r0, r8
 800b304:	f7f5 fc30 	bl	8000b68 <__aeabi_d2iz>
 800b308:	4606      	mov	r6, r0
 800b30a:	f7f5 f913 	bl	8000534 <__aeabi_i2d>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4640      	mov	r0, r8
 800b314:	4649      	mov	r1, r9
 800b316:	f7f4 ffbf 	bl	8000298 <__aeabi_dsub>
 800b31a:	3630      	adds	r6, #48	; 0x30
 800b31c:	f805 6b01 	strb.w	r6, [r5], #1
 800b320:	ec53 2b19 	vmov	r2, r3, d9
 800b324:	4680      	mov	r8, r0
 800b326:	4689      	mov	r9, r1
 800b328:	f7f5 fbe0 	bl	8000aec <__aeabi_dcmplt>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d164      	bne.n	800b3fa <_dtoa_r+0x62a>
 800b330:	4642      	mov	r2, r8
 800b332:	464b      	mov	r3, r9
 800b334:	4937      	ldr	r1, [pc, #220]	; (800b414 <_dtoa_r+0x644>)
 800b336:	2000      	movs	r0, #0
 800b338:	f7f4 ffae 	bl	8000298 <__aeabi_dsub>
 800b33c:	ec53 2b19 	vmov	r2, r3, d9
 800b340:	f7f5 fbd4 	bl	8000aec <__aeabi_dcmplt>
 800b344:	2800      	cmp	r0, #0
 800b346:	f040 80b6 	bne.w	800b4b6 <_dtoa_r+0x6e6>
 800b34a:	9b02      	ldr	r3, [sp, #8]
 800b34c:	429d      	cmp	r5, r3
 800b34e:	f43f af7c 	beq.w	800b24a <_dtoa_r+0x47a>
 800b352:	4b31      	ldr	r3, [pc, #196]	; (800b418 <_dtoa_r+0x648>)
 800b354:	ec51 0b19 	vmov	r0, r1, d9
 800b358:	2200      	movs	r2, #0
 800b35a:	f7f5 f955 	bl	8000608 <__aeabi_dmul>
 800b35e:	4b2e      	ldr	r3, [pc, #184]	; (800b418 <_dtoa_r+0x648>)
 800b360:	ec41 0b19 	vmov	d9, r0, r1
 800b364:	2200      	movs	r2, #0
 800b366:	4640      	mov	r0, r8
 800b368:	4649      	mov	r1, r9
 800b36a:	f7f5 f94d 	bl	8000608 <__aeabi_dmul>
 800b36e:	4680      	mov	r8, r0
 800b370:	4689      	mov	r9, r1
 800b372:	e7c5      	b.n	800b300 <_dtoa_r+0x530>
 800b374:	ec51 0b17 	vmov	r0, r1, d7
 800b378:	f7f5 f946 	bl	8000608 <__aeabi_dmul>
 800b37c:	9b02      	ldr	r3, [sp, #8]
 800b37e:	9d00      	ldr	r5, [sp, #0]
 800b380:	930f      	str	r3, [sp, #60]	; 0x3c
 800b382:	ec41 0b19 	vmov	d9, r0, r1
 800b386:	4649      	mov	r1, r9
 800b388:	4640      	mov	r0, r8
 800b38a:	f7f5 fbed 	bl	8000b68 <__aeabi_d2iz>
 800b38e:	4606      	mov	r6, r0
 800b390:	f7f5 f8d0 	bl	8000534 <__aeabi_i2d>
 800b394:	3630      	adds	r6, #48	; 0x30
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	4640      	mov	r0, r8
 800b39c:	4649      	mov	r1, r9
 800b39e:	f7f4 ff7b 	bl	8000298 <__aeabi_dsub>
 800b3a2:	f805 6b01 	strb.w	r6, [r5], #1
 800b3a6:	9b02      	ldr	r3, [sp, #8]
 800b3a8:	429d      	cmp	r5, r3
 800b3aa:	4680      	mov	r8, r0
 800b3ac:	4689      	mov	r9, r1
 800b3ae:	f04f 0200 	mov.w	r2, #0
 800b3b2:	d124      	bne.n	800b3fe <_dtoa_r+0x62e>
 800b3b4:	4b1b      	ldr	r3, [pc, #108]	; (800b424 <_dtoa_r+0x654>)
 800b3b6:	ec51 0b19 	vmov	r0, r1, d9
 800b3ba:	f7f4 ff6f 	bl	800029c <__adddf3>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	f7f5 fbaf 	bl	8000b28 <__aeabi_dcmpgt>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d173      	bne.n	800b4b6 <_dtoa_r+0x6e6>
 800b3ce:	ec53 2b19 	vmov	r2, r3, d9
 800b3d2:	4914      	ldr	r1, [pc, #80]	; (800b424 <_dtoa_r+0x654>)
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	f7f4 ff5f 	bl	8000298 <__aeabi_dsub>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	460b      	mov	r3, r1
 800b3de:	4640      	mov	r0, r8
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	f7f5 fb83 	bl	8000aec <__aeabi_dcmplt>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f43f af2f 	beq.w	800b24a <_dtoa_r+0x47a>
 800b3ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b3ee:	1e6b      	subs	r3, r5, #1
 800b3f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3f6:	2b30      	cmp	r3, #48	; 0x30
 800b3f8:	d0f8      	beq.n	800b3ec <_dtoa_r+0x61c>
 800b3fa:	46bb      	mov	fp, r7
 800b3fc:	e04a      	b.n	800b494 <_dtoa_r+0x6c4>
 800b3fe:	4b06      	ldr	r3, [pc, #24]	; (800b418 <_dtoa_r+0x648>)
 800b400:	f7f5 f902 	bl	8000608 <__aeabi_dmul>
 800b404:	4680      	mov	r8, r0
 800b406:	4689      	mov	r9, r1
 800b408:	e7bd      	b.n	800b386 <_dtoa_r+0x5b6>
 800b40a:	bf00      	nop
 800b40c:	0800cc48 	.word	0x0800cc48
 800b410:	0800cc20 	.word	0x0800cc20
 800b414:	3ff00000 	.word	0x3ff00000
 800b418:	40240000 	.word	0x40240000
 800b41c:	401c0000 	.word	0x401c0000
 800b420:	40140000 	.word	0x40140000
 800b424:	3fe00000 	.word	0x3fe00000
 800b428:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b42c:	9d00      	ldr	r5, [sp, #0]
 800b42e:	4642      	mov	r2, r8
 800b430:	464b      	mov	r3, r9
 800b432:	4630      	mov	r0, r6
 800b434:	4639      	mov	r1, r7
 800b436:	f7f5 fa11 	bl	800085c <__aeabi_ddiv>
 800b43a:	f7f5 fb95 	bl	8000b68 <__aeabi_d2iz>
 800b43e:	9001      	str	r0, [sp, #4]
 800b440:	f7f5 f878 	bl	8000534 <__aeabi_i2d>
 800b444:	4642      	mov	r2, r8
 800b446:	464b      	mov	r3, r9
 800b448:	f7f5 f8de 	bl	8000608 <__aeabi_dmul>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4630      	mov	r0, r6
 800b452:	4639      	mov	r1, r7
 800b454:	f7f4 ff20 	bl	8000298 <__aeabi_dsub>
 800b458:	9e01      	ldr	r6, [sp, #4]
 800b45a:	9f04      	ldr	r7, [sp, #16]
 800b45c:	3630      	adds	r6, #48	; 0x30
 800b45e:	f805 6b01 	strb.w	r6, [r5], #1
 800b462:	9e00      	ldr	r6, [sp, #0]
 800b464:	1bae      	subs	r6, r5, r6
 800b466:	42b7      	cmp	r7, r6
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	d134      	bne.n	800b4d8 <_dtoa_r+0x708>
 800b46e:	f7f4 ff15 	bl	800029c <__adddf3>
 800b472:	4642      	mov	r2, r8
 800b474:	464b      	mov	r3, r9
 800b476:	4606      	mov	r6, r0
 800b478:	460f      	mov	r7, r1
 800b47a:	f7f5 fb55 	bl	8000b28 <__aeabi_dcmpgt>
 800b47e:	b9c8      	cbnz	r0, 800b4b4 <_dtoa_r+0x6e4>
 800b480:	4642      	mov	r2, r8
 800b482:	464b      	mov	r3, r9
 800b484:	4630      	mov	r0, r6
 800b486:	4639      	mov	r1, r7
 800b488:	f7f5 fb26 	bl	8000ad8 <__aeabi_dcmpeq>
 800b48c:	b110      	cbz	r0, 800b494 <_dtoa_r+0x6c4>
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	07db      	lsls	r3, r3, #31
 800b492:	d40f      	bmi.n	800b4b4 <_dtoa_r+0x6e4>
 800b494:	4651      	mov	r1, sl
 800b496:	4620      	mov	r0, r4
 800b498:	f000 fbcc 	bl	800bc34 <_Bfree>
 800b49c:	2300      	movs	r3, #0
 800b49e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4a0:	702b      	strb	r3, [r5, #0]
 800b4a2:	f10b 0301 	add.w	r3, fp, #1
 800b4a6:	6013      	str	r3, [r2, #0]
 800b4a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f43f ace2 	beq.w	800ae74 <_dtoa_r+0xa4>
 800b4b0:	601d      	str	r5, [r3, #0]
 800b4b2:	e4df      	b.n	800ae74 <_dtoa_r+0xa4>
 800b4b4:	465f      	mov	r7, fp
 800b4b6:	462b      	mov	r3, r5
 800b4b8:	461d      	mov	r5, r3
 800b4ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4be:	2a39      	cmp	r2, #57	; 0x39
 800b4c0:	d106      	bne.n	800b4d0 <_dtoa_r+0x700>
 800b4c2:	9a00      	ldr	r2, [sp, #0]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d1f7      	bne.n	800b4b8 <_dtoa_r+0x6e8>
 800b4c8:	9900      	ldr	r1, [sp, #0]
 800b4ca:	2230      	movs	r2, #48	; 0x30
 800b4cc:	3701      	adds	r7, #1
 800b4ce:	700a      	strb	r2, [r1, #0]
 800b4d0:	781a      	ldrb	r2, [r3, #0]
 800b4d2:	3201      	adds	r2, #1
 800b4d4:	701a      	strb	r2, [r3, #0]
 800b4d6:	e790      	b.n	800b3fa <_dtoa_r+0x62a>
 800b4d8:	4ba3      	ldr	r3, [pc, #652]	; (800b768 <_dtoa_r+0x998>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f7f5 f894 	bl	8000608 <__aeabi_dmul>
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	460f      	mov	r7, r1
 800b4e8:	f7f5 faf6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d09e      	beq.n	800b42e <_dtoa_r+0x65e>
 800b4f0:	e7d0      	b.n	800b494 <_dtoa_r+0x6c4>
 800b4f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4f4:	2a00      	cmp	r2, #0
 800b4f6:	f000 80ca 	beq.w	800b68e <_dtoa_r+0x8be>
 800b4fa:	9a07      	ldr	r2, [sp, #28]
 800b4fc:	2a01      	cmp	r2, #1
 800b4fe:	f300 80ad 	bgt.w	800b65c <_dtoa_r+0x88c>
 800b502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b504:	2a00      	cmp	r2, #0
 800b506:	f000 80a5 	beq.w	800b654 <_dtoa_r+0x884>
 800b50a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b50e:	9e08      	ldr	r6, [sp, #32]
 800b510:	9d05      	ldr	r5, [sp, #20]
 800b512:	9a05      	ldr	r2, [sp, #20]
 800b514:	441a      	add	r2, r3
 800b516:	9205      	str	r2, [sp, #20]
 800b518:	9a06      	ldr	r2, [sp, #24]
 800b51a:	2101      	movs	r1, #1
 800b51c:	441a      	add	r2, r3
 800b51e:	4620      	mov	r0, r4
 800b520:	9206      	str	r2, [sp, #24]
 800b522:	f000 fc3d 	bl	800bda0 <__i2b>
 800b526:	4607      	mov	r7, r0
 800b528:	b165      	cbz	r5, 800b544 <_dtoa_r+0x774>
 800b52a:	9b06      	ldr	r3, [sp, #24]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	dd09      	ble.n	800b544 <_dtoa_r+0x774>
 800b530:	42ab      	cmp	r3, r5
 800b532:	9a05      	ldr	r2, [sp, #20]
 800b534:	bfa8      	it	ge
 800b536:	462b      	movge	r3, r5
 800b538:	1ad2      	subs	r2, r2, r3
 800b53a:	9205      	str	r2, [sp, #20]
 800b53c:	9a06      	ldr	r2, [sp, #24]
 800b53e:	1aed      	subs	r5, r5, r3
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	9306      	str	r3, [sp, #24]
 800b544:	9b08      	ldr	r3, [sp, #32]
 800b546:	b1f3      	cbz	r3, 800b586 <_dtoa_r+0x7b6>
 800b548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 80a3 	beq.w	800b696 <_dtoa_r+0x8c6>
 800b550:	2e00      	cmp	r6, #0
 800b552:	dd10      	ble.n	800b576 <_dtoa_r+0x7a6>
 800b554:	4639      	mov	r1, r7
 800b556:	4632      	mov	r2, r6
 800b558:	4620      	mov	r0, r4
 800b55a:	f000 fce1 	bl	800bf20 <__pow5mult>
 800b55e:	4652      	mov	r2, sl
 800b560:	4601      	mov	r1, r0
 800b562:	4607      	mov	r7, r0
 800b564:	4620      	mov	r0, r4
 800b566:	f000 fc31 	bl	800bdcc <__multiply>
 800b56a:	4651      	mov	r1, sl
 800b56c:	4680      	mov	r8, r0
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 fb60 	bl	800bc34 <_Bfree>
 800b574:	46c2      	mov	sl, r8
 800b576:	9b08      	ldr	r3, [sp, #32]
 800b578:	1b9a      	subs	r2, r3, r6
 800b57a:	d004      	beq.n	800b586 <_dtoa_r+0x7b6>
 800b57c:	4651      	mov	r1, sl
 800b57e:	4620      	mov	r0, r4
 800b580:	f000 fcce 	bl	800bf20 <__pow5mult>
 800b584:	4682      	mov	sl, r0
 800b586:	2101      	movs	r1, #1
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 fc09 	bl	800bda0 <__i2b>
 800b58e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b590:	2b00      	cmp	r3, #0
 800b592:	4606      	mov	r6, r0
 800b594:	f340 8081 	ble.w	800b69a <_dtoa_r+0x8ca>
 800b598:	461a      	mov	r2, r3
 800b59a:	4601      	mov	r1, r0
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 fcbf 	bl	800bf20 <__pow5mult>
 800b5a2:	9b07      	ldr	r3, [sp, #28]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	dd7a      	ble.n	800b6a0 <_dtoa_r+0x8d0>
 800b5aa:	f04f 0800 	mov.w	r8, #0
 800b5ae:	6933      	ldr	r3, [r6, #16]
 800b5b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5b4:	6918      	ldr	r0, [r3, #16]
 800b5b6:	f000 fba5 	bl	800bd04 <__hi0bits>
 800b5ba:	f1c0 0020 	rsb	r0, r0, #32
 800b5be:	9b06      	ldr	r3, [sp, #24]
 800b5c0:	4418      	add	r0, r3
 800b5c2:	f010 001f 	ands.w	r0, r0, #31
 800b5c6:	f000 8094 	beq.w	800b6f2 <_dtoa_r+0x922>
 800b5ca:	f1c0 0320 	rsb	r3, r0, #32
 800b5ce:	2b04      	cmp	r3, #4
 800b5d0:	f340 8085 	ble.w	800b6de <_dtoa_r+0x90e>
 800b5d4:	9b05      	ldr	r3, [sp, #20]
 800b5d6:	f1c0 001c 	rsb	r0, r0, #28
 800b5da:	4403      	add	r3, r0
 800b5dc:	9305      	str	r3, [sp, #20]
 800b5de:	9b06      	ldr	r3, [sp, #24]
 800b5e0:	4403      	add	r3, r0
 800b5e2:	4405      	add	r5, r0
 800b5e4:	9306      	str	r3, [sp, #24]
 800b5e6:	9b05      	ldr	r3, [sp, #20]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	dd05      	ble.n	800b5f8 <_dtoa_r+0x828>
 800b5ec:	4651      	mov	r1, sl
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 fcef 	bl	800bfd4 <__lshift>
 800b5f6:	4682      	mov	sl, r0
 800b5f8:	9b06      	ldr	r3, [sp, #24]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	dd05      	ble.n	800b60a <_dtoa_r+0x83a>
 800b5fe:	4631      	mov	r1, r6
 800b600:	461a      	mov	r2, r3
 800b602:	4620      	mov	r0, r4
 800b604:	f000 fce6 	bl	800bfd4 <__lshift>
 800b608:	4606      	mov	r6, r0
 800b60a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d072      	beq.n	800b6f6 <_dtoa_r+0x926>
 800b610:	4631      	mov	r1, r6
 800b612:	4650      	mov	r0, sl
 800b614:	f000 fd4a 	bl	800c0ac <__mcmp>
 800b618:	2800      	cmp	r0, #0
 800b61a:	da6c      	bge.n	800b6f6 <_dtoa_r+0x926>
 800b61c:	2300      	movs	r3, #0
 800b61e:	4651      	mov	r1, sl
 800b620:	220a      	movs	r2, #10
 800b622:	4620      	mov	r0, r4
 800b624:	f000 fb28 	bl	800bc78 <__multadd>
 800b628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b62e:	4682      	mov	sl, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 81b0 	beq.w	800b996 <_dtoa_r+0xbc6>
 800b636:	2300      	movs	r3, #0
 800b638:	4639      	mov	r1, r7
 800b63a:	220a      	movs	r2, #10
 800b63c:	4620      	mov	r0, r4
 800b63e:	f000 fb1b 	bl	800bc78 <__multadd>
 800b642:	9b01      	ldr	r3, [sp, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	4607      	mov	r7, r0
 800b648:	f300 8096 	bgt.w	800b778 <_dtoa_r+0x9a8>
 800b64c:	9b07      	ldr	r3, [sp, #28]
 800b64e:	2b02      	cmp	r3, #2
 800b650:	dc59      	bgt.n	800b706 <_dtoa_r+0x936>
 800b652:	e091      	b.n	800b778 <_dtoa_r+0x9a8>
 800b654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b65a:	e758      	b.n	800b50e <_dtoa_r+0x73e>
 800b65c:	9b04      	ldr	r3, [sp, #16]
 800b65e:	1e5e      	subs	r6, r3, #1
 800b660:	9b08      	ldr	r3, [sp, #32]
 800b662:	42b3      	cmp	r3, r6
 800b664:	bfbf      	itttt	lt
 800b666:	9b08      	ldrlt	r3, [sp, #32]
 800b668:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b66a:	9608      	strlt	r6, [sp, #32]
 800b66c:	1af3      	sublt	r3, r6, r3
 800b66e:	bfb4      	ite	lt
 800b670:	18d2      	addlt	r2, r2, r3
 800b672:	1b9e      	subge	r6, r3, r6
 800b674:	9b04      	ldr	r3, [sp, #16]
 800b676:	bfbc      	itt	lt
 800b678:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b67a:	2600      	movlt	r6, #0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	bfb7      	itett	lt
 800b680:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b684:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b688:	1a9d      	sublt	r5, r3, r2
 800b68a:	2300      	movlt	r3, #0
 800b68c:	e741      	b.n	800b512 <_dtoa_r+0x742>
 800b68e:	9e08      	ldr	r6, [sp, #32]
 800b690:	9d05      	ldr	r5, [sp, #20]
 800b692:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b694:	e748      	b.n	800b528 <_dtoa_r+0x758>
 800b696:	9a08      	ldr	r2, [sp, #32]
 800b698:	e770      	b.n	800b57c <_dtoa_r+0x7ac>
 800b69a:	9b07      	ldr	r3, [sp, #28]
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	dc19      	bgt.n	800b6d4 <_dtoa_r+0x904>
 800b6a0:	9b02      	ldr	r3, [sp, #8]
 800b6a2:	b9bb      	cbnz	r3, 800b6d4 <_dtoa_r+0x904>
 800b6a4:	9b03      	ldr	r3, [sp, #12]
 800b6a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6aa:	b99b      	cbnz	r3, 800b6d4 <_dtoa_r+0x904>
 800b6ac:	9b03      	ldr	r3, [sp, #12]
 800b6ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6b2:	0d1b      	lsrs	r3, r3, #20
 800b6b4:	051b      	lsls	r3, r3, #20
 800b6b6:	b183      	cbz	r3, 800b6da <_dtoa_r+0x90a>
 800b6b8:	9b05      	ldr	r3, [sp, #20]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	9305      	str	r3, [sp, #20]
 800b6be:	9b06      	ldr	r3, [sp, #24]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	9306      	str	r3, [sp, #24]
 800b6c4:	f04f 0801 	mov.w	r8, #1
 800b6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f47f af6f 	bne.w	800b5ae <_dtoa_r+0x7de>
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	e774      	b.n	800b5be <_dtoa_r+0x7ee>
 800b6d4:	f04f 0800 	mov.w	r8, #0
 800b6d8:	e7f6      	b.n	800b6c8 <_dtoa_r+0x8f8>
 800b6da:	4698      	mov	r8, r3
 800b6dc:	e7f4      	b.n	800b6c8 <_dtoa_r+0x8f8>
 800b6de:	d082      	beq.n	800b5e6 <_dtoa_r+0x816>
 800b6e0:	9a05      	ldr	r2, [sp, #20]
 800b6e2:	331c      	adds	r3, #28
 800b6e4:	441a      	add	r2, r3
 800b6e6:	9205      	str	r2, [sp, #20]
 800b6e8:	9a06      	ldr	r2, [sp, #24]
 800b6ea:	441a      	add	r2, r3
 800b6ec:	441d      	add	r5, r3
 800b6ee:	9206      	str	r2, [sp, #24]
 800b6f0:	e779      	b.n	800b5e6 <_dtoa_r+0x816>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	e7f4      	b.n	800b6e0 <_dtoa_r+0x910>
 800b6f6:	9b04      	ldr	r3, [sp, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	dc37      	bgt.n	800b76c <_dtoa_r+0x99c>
 800b6fc:	9b07      	ldr	r3, [sp, #28]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	dd34      	ble.n	800b76c <_dtoa_r+0x99c>
 800b702:	9b04      	ldr	r3, [sp, #16]
 800b704:	9301      	str	r3, [sp, #4]
 800b706:	9b01      	ldr	r3, [sp, #4]
 800b708:	b963      	cbnz	r3, 800b724 <_dtoa_r+0x954>
 800b70a:	4631      	mov	r1, r6
 800b70c:	2205      	movs	r2, #5
 800b70e:	4620      	mov	r0, r4
 800b710:	f000 fab2 	bl	800bc78 <__multadd>
 800b714:	4601      	mov	r1, r0
 800b716:	4606      	mov	r6, r0
 800b718:	4650      	mov	r0, sl
 800b71a:	f000 fcc7 	bl	800c0ac <__mcmp>
 800b71e:	2800      	cmp	r0, #0
 800b720:	f73f adbb 	bgt.w	800b29a <_dtoa_r+0x4ca>
 800b724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b726:	9d00      	ldr	r5, [sp, #0]
 800b728:	ea6f 0b03 	mvn.w	fp, r3
 800b72c:	f04f 0800 	mov.w	r8, #0
 800b730:	4631      	mov	r1, r6
 800b732:	4620      	mov	r0, r4
 800b734:	f000 fa7e 	bl	800bc34 <_Bfree>
 800b738:	2f00      	cmp	r7, #0
 800b73a:	f43f aeab 	beq.w	800b494 <_dtoa_r+0x6c4>
 800b73e:	f1b8 0f00 	cmp.w	r8, #0
 800b742:	d005      	beq.n	800b750 <_dtoa_r+0x980>
 800b744:	45b8      	cmp	r8, r7
 800b746:	d003      	beq.n	800b750 <_dtoa_r+0x980>
 800b748:	4641      	mov	r1, r8
 800b74a:	4620      	mov	r0, r4
 800b74c:	f000 fa72 	bl	800bc34 <_Bfree>
 800b750:	4639      	mov	r1, r7
 800b752:	4620      	mov	r0, r4
 800b754:	f000 fa6e 	bl	800bc34 <_Bfree>
 800b758:	e69c      	b.n	800b494 <_dtoa_r+0x6c4>
 800b75a:	2600      	movs	r6, #0
 800b75c:	4637      	mov	r7, r6
 800b75e:	e7e1      	b.n	800b724 <_dtoa_r+0x954>
 800b760:	46bb      	mov	fp, r7
 800b762:	4637      	mov	r7, r6
 800b764:	e599      	b.n	800b29a <_dtoa_r+0x4ca>
 800b766:	bf00      	nop
 800b768:	40240000 	.word	0x40240000
 800b76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 80c8 	beq.w	800b904 <_dtoa_r+0xb34>
 800b774:	9b04      	ldr	r3, [sp, #16]
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	2d00      	cmp	r5, #0
 800b77a:	dd05      	ble.n	800b788 <_dtoa_r+0x9b8>
 800b77c:	4639      	mov	r1, r7
 800b77e:	462a      	mov	r2, r5
 800b780:	4620      	mov	r0, r4
 800b782:	f000 fc27 	bl	800bfd4 <__lshift>
 800b786:	4607      	mov	r7, r0
 800b788:	f1b8 0f00 	cmp.w	r8, #0
 800b78c:	d05b      	beq.n	800b846 <_dtoa_r+0xa76>
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	4620      	mov	r0, r4
 800b792:	f000 fa0f 	bl	800bbb4 <_Balloc>
 800b796:	4605      	mov	r5, r0
 800b798:	b928      	cbnz	r0, 800b7a6 <_dtoa_r+0x9d6>
 800b79a:	4b83      	ldr	r3, [pc, #524]	; (800b9a8 <_dtoa_r+0xbd8>)
 800b79c:	4602      	mov	r2, r0
 800b79e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b7a2:	f7ff bb2e 	b.w	800ae02 <_dtoa_r+0x32>
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	3202      	adds	r2, #2
 800b7aa:	0092      	lsls	r2, r2, #2
 800b7ac:	f107 010c 	add.w	r1, r7, #12
 800b7b0:	300c      	adds	r0, #12
 800b7b2:	f000 fe39 	bl	800c428 <memcpy>
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	4629      	mov	r1, r5
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 fc0a 	bl	800bfd4 <__lshift>
 800b7c0:	9b00      	ldr	r3, [sp, #0]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	9308      	str	r3, [sp, #32]
 800b7ce:	9b02      	ldr	r3, [sp, #8]
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	46b8      	mov	r8, r7
 800b7d6:	9306      	str	r3, [sp, #24]
 800b7d8:	4607      	mov	r7, r0
 800b7da:	9b04      	ldr	r3, [sp, #16]
 800b7dc:	4631      	mov	r1, r6
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	4650      	mov	r0, sl
 800b7e2:	9301      	str	r3, [sp, #4]
 800b7e4:	f7ff fa69 	bl	800acba <quorem>
 800b7e8:	4641      	mov	r1, r8
 800b7ea:	9002      	str	r0, [sp, #8]
 800b7ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b7f0:	4650      	mov	r0, sl
 800b7f2:	f000 fc5b 	bl	800c0ac <__mcmp>
 800b7f6:	463a      	mov	r2, r7
 800b7f8:	9005      	str	r0, [sp, #20]
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f000 fc71 	bl	800c0e4 <__mdiff>
 800b802:	68c2      	ldr	r2, [r0, #12]
 800b804:	4605      	mov	r5, r0
 800b806:	bb02      	cbnz	r2, 800b84a <_dtoa_r+0xa7a>
 800b808:	4601      	mov	r1, r0
 800b80a:	4650      	mov	r0, sl
 800b80c:	f000 fc4e 	bl	800c0ac <__mcmp>
 800b810:	4602      	mov	r2, r0
 800b812:	4629      	mov	r1, r5
 800b814:	4620      	mov	r0, r4
 800b816:	9209      	str	r2, [sp, #36]	; 0x24
 800b818:	f000 fa0c 	bl	800bc34 <_Bfree>
 800b81c:	9b07      	ldr	r3, [sp, #28]
 800b81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b820:	9d04      	ldr	r5, [sp, #16]
 800b822:	ea43 0102 	orr.w	r1, r3, r2
 800b826:	9b06      	ldr	r3, [sp, #24]
 800b828:	4319      	orrs	r1, r3
 800b82a:	d110      	bne.n	800b84e <_dtoa_r+0xa7e>
 800b82c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b830:	d029      	beq.n	800b886 <_dtoa_r+0xab6>
 800b832:	9b05      	ldr	r3, [sp, #20]
 800b834:	2b00      	cmp	r3, #0
 800b836:	dd02      	ble.n	800b83e <_dtoa_r+0xa6e>
 800b838:	9b02      	ldr	r3, [sp, #8]
 800b83a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b83e:	9b01      	ldr	r3, [sp, #4]
 800b840:	f883 9000 	strb.w	r9, [r3]
 800b844:	e774      	b.n	800b730 <_dtoa_r+0x960>
 800b846:	4638      	mov	r0, r7
 800b848:	e7ba      	b.n	800b7c0 <_dtoa_r+0x9f0>
 800b84a:	2201      	movs	r2, #1
 800b84c:	e7e1      	b.n	800b812 <_dtoa_r+0xa42>
 800b84e:	9b05      	ldr	r3, [sp, #20]
 800b850:	2b00      	cmp	r3, #0
 800b852:	db04      	blt.n	800b85e <_dtoa_r+0xa8e>
 800b854:	9907      	ldr	r1, [sp, #28]
 800b856:	430b      	orrs	r3, r1
 800b858:	9906      	ldr	r1, [sp, #24]
 800b85a:	430b      	orrs	r3, r1
 800b85c:	d120      	bne.n	800b8a0 <_dtoa_r+0xad0>
 800b85e:	2a00      	cmp	r2, #0
 800b860:	dded      	ble.n	800b83e <_dtoa_r+0xa6e>
 800b862:	4651      	mov	r1, sl
 800b864:	2201      	movs	r2, #1
 800b866:	4620      	mov	r0, r4
 800b868:	f000 fbb4 	bl	800bfd4 <__lshift>
 800b86c:	4631      	mov	r1, r6
 800b86e:	4682      	mov	sl, r0
 800b870:	f000 fc1c 	bl	800c0ac <__mcmp>
 800b874:	2800      	cmp	r0, #0
 800b876:	dc03      	bgt.n	800b880 <_dtoa_r+0xab0>
 800b878:	d1e1      	bne.n	800b83e <_dtoa_r+0xa6e>
 800b87a:	f019 0f01 	tst.w	r9, #1
 800b87e:	d0de      	beq.n	800b83e <_dtoa_r+0xa6e>
 800b880:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b884:	d1d8      	bne.n	800b838 <_dtoa_r+0xa68>
 800b886:	9a01      	ldr	r2, [sp, #4]
 800b888:	2339      	movs	r3, #57	; 0x39
 800b88a:	7013      	strb	r3, [r2, #0]
 800b88c:	462b      	mov	r3, r5
 800b88e:	461d      	mov	r5, r3
 800b890:	3b01      	subs	r3, #1
 800b892:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b896:	2a39      	cmp	r2, #57	; 0x39
 800b898:	d06c      	beq.n	800b974 <_dtoa_r+0xba4>
 800b89a:	3201      	adds	r2, #1
 800b89c:	701a      	strb	r2, [r3, #0]
 800b89e:	e747      	b.n	800b730 <_dtoa_r+0x960>
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	dd07      	ble.n	800b8b4 <_dtoa_r+0xae4>
 800b8a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b8a8:	d0ed      	beq.n	800b886 <_dtoa_r+0xab6>
 800b8aa:	9a01      	ldr	r2, [sp, #4]
 800b8ac:	f109 0301 	add.w	r3, r9, #1
 800b8b0:	7013      	strb	r3, [r2, #0]
 800b8b2:	e73d      	b.n	800b730 <_dtoa_r+0x960>
 800b8b4:	9b04      	ldr	r3, [sp, #16]
 800b8b6:	9a08      	ldr	r2, [sp, #32]
 800b8b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d043      	beq.n	800b948 <_dtoa_r+0xb78>
 800b8c0:	4651      	mov	r1, sl
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	220a      	movs	r2, #10
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f000 f9d6 	bl	800bc78 <__multadd>
 800b8cc:	45b8      	cmp	r8, r7
 800b8ce:	4682      	mov	sl, r0
 800b8d0:	f04f 0300 	mov.w	r3, #0
 800b8d4:	f04f 020a 	mov.w	r2, #10
 800b8d8:	4641      	mov	r1, r8
 800b8da:	4620      	mov	r0, r4
 800b8dc:	d107      	bne.n	800b8ee <_dtoa_r+0xb1e>
 800b8de:	f000 f9cb 	bl	800bc78 <__multadd>
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	4607      	mov	r7, r0
 800b8e6:	9b04      	ldr	r3, [sp, #16]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	9304      	str	r3, [sp, #16]
 800b8ec:	e775      	b.n	800b7da <_dtoa_r+0xa0a>
 800b8ee:	f000 f9c3 	bl	800bc78 <__multadd>
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	4680      	mov	r8, r0
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	220a      	movs	r2, #10
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 f9bc 	bl	800bc78 <__multadd>
 800b900:	4607      	mov	r7, r0
 800b902:	e7f0      	b.n	800b8e6 <_dtoa_r+0xb16>
 800b904:	9b04      	ldr	r3, [sp, #16]
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	9d00      	ldr	r5, [sp, #0]
 800b90a:	4631      	mov	r1, r6
 800b90c:	4650      	mov	r0, sl
 800b90e:	f7ff f9d4 	bl	800acba <quorem>
 800b912:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b916:	9b00      	ldr	r3, [sp, #0]
 800b918:	f805 9b01 	strb.w	r9, [r5], #1
 800b91c:	1aea      	subs	r2, r5, r3
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	4293      	cmp	r3, r2
 800b922:	dd07      	ble.n	800b934 <_dtoa_r+0xb64>
 800b924:	4651      	mov	r1, sl
 800b926:	2300      	movs	r3, #0
 800b928:	220a      	movs	r2, #10
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 f9a4 	bl	800bc78 <__multadd>
 800b930:	4682      	mov	sl, r0
 800b932:	e7ea      	b.n	800b90a <_dtoa_r+0xb3a>
 800b934:	9b01      	ldr	r3, [sp, #4]
 800b936:	2b00      	cmp	r3, #0
 800b938:	bfc8      	it	gt
 800b93a:	461d      	movgt	r5, r3
 800b93c:	9b00      	ldr	r3, [sp, #0]
 800b93e:	bfd8      	it	le
 800b940:	2501      	movle	r5, #1
 800b942:	441d      	add	r5, r3
 800b944:	f04f 0800 	mov.w	r8, #0
 800b948:	4651      	mov	r1, sl
 800b94a:	2201      	movs	r2, #1
 800b94c:	4620      	mov	r0, r4
 800b94e:	f000 fb41 	bl	800bfd4 <__lshift>
 800b952:	4631      	mov	r1, r6
 800b954:	4682      	mov	sl, r0
 800b956:	f000 fba9 	bl	800c0ac <__mcmp>
 800b95a:	2800      	cmp	r0, #0
 800b95c:	dc96      	bgt.n	800b88c <_dtoa_r+0xabc>
 800b95e:	d102      	bne.n	800b966 <_dtoa_r+0xb96>
 800b960:	f019 0f01 	tst.w	r9, #1
 800b964:	d192      	bne.n	800b88c <_dtoa_r+0xabc>
 800b966:	462b      	mov	r3, r5
 800b968:	461d      	mov	r5, r3
 800b96a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b96e:	2a30      	cmp	r2, #48	; 0x30
 800b970:	d0fa      	beq.n	800b968 <_dtoa_r+0xb98>
 800b972:	e6dd      	b.n	800b730 <_dtoa_r+0x960>
 800b974:	9a00      	ldr	r2, [sp, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d189      	bne.n	800b88e <_dtoa_r+0xabe>
 800b97a:	f10b 0b01 	add.w	fp, fp, #1
 800b97e:	2331      	movs	r3, #49	; 0x31
 800b980:	e796      	b.n	800b8b0 <_dtoa_r+0xae0>
 800b982:	4b0a      	ldr	r3, [pc, #40]	; (800b9ac <_dtoa_r+0xbdc>)
 800b984:	f7ff ba99 	b.w	800aeba <_dtoa_r+0xea>
 800b988:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f47f aa6d 	bne.w	800ae6a <_dtoa_r+0x9a>
 800b990:	4b07      	ldr	r3, [pc, #28]	; (800b9b0 <_dtoa_r+0xbe0>)
 800b992:	f7ff ba92 	b.w	800aeba <_dtoa_r+0xea>
 800b996:	9b01      	ldr	r3, [sp, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	dcb5      	bgt.n	800b908 <_dtoa_r+0xb38>
 800b99c:	9b07      	ldr	r3, [sp, #28]
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	f73f aeb1 	bgt.w	800b706 <_dtoa_r+0x936>
 800b9a4:	e7b0      	b.n	800b908 <_dtoa_r+0xb38>
 800b9a6:	bf00      	nop
 800b9a8:	0800cbb4 	.word	0x0800cbb4
 800b9ac:	0800cb14 	.word	0x0800cb14
 800b9b0:	0800cb38 	.word	0x0800cb38

0800b9b4 <_free_r>:
 800b9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9b6:	2900      	cmp	r1, #0
 800b9b8:	d044      	beq.n	800ba44 <_free_r+0x90>
 800b9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9be:	9001      	str	r0, [sp, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f1a1 0404 	sub.w	r4, r1, #4
 800b9c6:	bfb8      	it	lt
 800b9c8:	18e4      	addlt	r4, r4, r3
 800b9ca:	f000 f8e7 	bl	800bb9c <__malloc_lock>
 800b9ce:	4a1e      	ldr	r2, [pc, #120]	; (800ba48 <_free_r+0x94>)
 800b9d0:	9801      	ldr	r0, [sp, #4]
 800b9d2:	6813      	ldr	r3, [r2, #0]
 800b9d4:	b933      	cbnz	r3, 800b9e4 <_free_r+0x30>
 800b9d6:	6063      	str	r3, [r4, #4]
 800b9d8:	6014      	str	r4, [r2, #0]
 800b9da:	b003      	add	sp, #12
 800b9dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9e0:	f000 b8e2 	b.w	800bba8 <__malloc_unlock>
 800b9e4:	42a3      	cmp	r3, r4
 800b9e6:	d908      	bls.n	800b9fa <_free_r+0x46>
 800b9e8:	6825      	ldr	r5, [r4, #0]
 800b9ea:	1961      	adds	r1, r4, r5
 800b9ec:	428b      	cmp	r3, r1
 800b9ee:	bf01      	itttt	eq
 800b9f0:	6819      	ldreq	r1, [r3, #0]
 800b9f2:	685b      	ldreq	r3, [r3, #4]
 800b9f4:	1949      	addeq	r1, r1, r5
 800b9f6:	6021      	streq	r1, [r4, #0]
 800b9f8:	e7ed      	b.n	800b9d6 <_free_r+0x22>
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	b10b      	cbz	r3, 800ba04 <_free_r+0x50>
 800ba00:	42a3      	cmp	r3, r4
 800ba02:	d9fa      	bls.n	800b9fa <_free_r+0x46>
 800ba04:	6811      	ldr	r1, [r2, #0]
 800ba06:	1855      	adds	r5, r2, r1
 800ba08:	42a5      	cmp	r5, r4
 800ba0a:	d10b      	bne.n	800ba24 <_free_r+0x70>
 800ba0c:	6824      	ldr	r4, [r4, #0]
 800ba0e:	4421      	add	r1, r4
 800ba10:	1854      	adds	r4, r2, r1
 800ba12:	42a3      	cmp	r3, r4
 800ba14:	6011      	str	r1, [r2, #0]
 800ba16:	d1e0      	bne.n	800b9da <_free_r+0x26>
 800ba18:	681c      	ldr	r4, [r3, #0]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	6053      	str	r3, [r2, #4]
 800ba1e:	440c      	add	r4, r1
 800ba20:	6014      	str	r4, [r2, #0]
 800ba22:	e7da      	b.n	800b9da <_free_r+0x26>
 800ba24:	d902      	bls.n	800ba2c <_free_r+0x78>
 800ba26:	230c      	movs	r3, #12
 800ba28:	6003      	str	r3, [r0, #0]
 800ba2a:	e7d6      	b.n	800b9da <_free_r+0x26>
 800ba2c:	6825      	ldr	r5, [r4, #0]
 800ba2e:	1961      	adds	r1, r4, r5
 800ba30:	428b      	cmp	r3, r1
 800ba32:	bf04      	itt	eq
 800ba34:	6819      	ldreq	r1, [r3, #0]
 800ba36:	685b      	ldreq	r3, [r3, #4]
 800ba38:	6063      	str	r3, [r4, #4]
 800ba3a:	bf04      	itt	eq
 800ba3c:	1949      	addeq	r1, r1, r5
 800ba3e:	6021      	streq	r1, [r4, #0]
 800ba40:	6054      	str	r4, [r2, #4]
 800ba42:	e7ca      	b.n	800b9da <_free_r+0x26>
 800ba44:	b003      	add	sp, #12
 800ba46:	bd30      	pop	{r4, r5, pc}
 800ba48:	20002238 	.word	0x20002238

0800ba4c <malloc>:
 800ba4c:	4b02      	ldr	r3, [pc, #8]	; (800ba58 <malloc+0xc>)
 800ba4e:	4601      	mov	r1, r0
 800ba50:	6818      	ldr	r0, [r3, #0]
 800ba52:	f000 b823 	b.w	800ba9c <_malloc_r>
 800ba56:	bf00      	nop
 800ba58:	20000154 	.word	0x20000154

0800ba5c <sbrk_aligned>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	4e0e      	ldr	r6, [pc, #56]	; (800ba98 <sbrk_aligned+0x3c>)
 800ba60:	460c      	mov	r4, r1
 800ba62:	6831      	ldr	r1, [r6, #0]
 800ba64:	4605      	mov	r5, r0
 800ba66:	b911      	cbnz	r1, 800ba6e <sbrk_aligned+0x12>
 800ba68:	f000 fcce 	bl	800c408 <_sbrk_r>
 800ba6c:	6030      	str	r0, [r6, #0]
 800ba6e:	4621      	mov	r1, r4
 800ba70:	4628      	mov	r0, r5
 800ba72:	f000 fcc9 	bl	800c408 <_sbrk_r>
 800ba76:	1c43      	adds	r3, r0, #1
 800ba78:	d00a      	beq.n	800ba90 <sbrk_aligned+0x34>
 800ba7a:	1cc4      	adds	r4, r0, #3
 800ba7c:	f024 0403 	bic.w	r4, r4, #3
 800ba80:	42a0      	cmp	r0, r4
 800ba82:	d007      	beq.n	800ba94 <sbrk_aligned+0x38>
 800ba84:	1a21      	subs	r1, r4, r0
 800ba86:	4628      	mov	r0, r5
 800ba88:	f000 fcbe 	bl	800c408 <_sbrk_r>
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d101      	bne.n	800ba94 <sbrk_aligned+0x38>
 800ba90:	f04f 34ff 	mov.w	r4, #4294967295
 800ba94:	4620      	mov	r0, r4
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	2000223c 	.word	0x2000223c

0800ba9c <_malloc_r>:
 800ba9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa0:	1ccd      	adds	r5, r1, #3
 800baa2:	f025 0503 	bic.w	r5, r5, #3
 800baa6:	3508      	adds	r5, #8
 800baa8:	2d0c      	cmp	r5, #12
 800baaa:	bf38      	it	cc
 800baac:	250c      	movcc	r5, #12
 800baae:	2d00      	cmp	r5, #0
 800bab0:	4607      	mov	r7, r0
 800bab2:	db01      	blt.n	800bab8 <_malloc_r+0x1c>
 800bab4:	42a9      	cmp	r1, r5
 800bab6:	d905      	bls.n	800bac4 <_malloc_r+0x28>
 800bab8:	230c      	movs	r3, #12
 800baba:	603b      	str	r3, [r7, #0]
 800babc:	2600      	movs	r6, #0
 800babe:	4630      	mov	r0, r6
 800bac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bac4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bb98 <_malloc_r+0xfc>
 800bac8:	f000 f868 	bl	800bb9c <__malloc_lock>
 800bacc:	f8d8 3000 	ldr.w	r3, [r8]
 800bad0:	461c      	mov	r4, r3
 800bad2:	bb5c      	cbnz	r4, 800bb2c <_malloc_r+0x90>
 800bad4:	4629      	mov	r1, r5
 800bad6:	4638      	mov	r0, r7
 800bad8:	f7ff ffc0 	bl	800ba5c <sbrk_aligned>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	4604      	mov	r4, r0
 800bae0:	d155      	bne.n	800bb8e <_malloc_r+0xf2>
 800bae2:	f8d8 4000 	ldr.w	r4, [r8]
 800bae6:	4626      	mov	r6, r4
 800bae8:	2e00      	cmp	r6, #0
 800baea:	d145      	bne.n	800bb78 <_malloc_r+0xdc>
 800baec:	2c00      	cmp	r4, #0
 800baee:	d048      	beq.n	800bb82 <_malloc_r+0xe6>
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	4631      	mov	r1, r6
 800baf4:	4638      	mov	r0, r7
 800baf6:	eb04 0903 	add.w	r9, r4, r3
 800bafa:	f000 fc85 	bl	800c408 <_sbrk_r>
 800bafe:	4581      	cmp	r9, r0
 800bb00:	d13f      	bne.n	800bb82 <_malloc_r+0xe6>
 800bb02:	6821      	ldr	r1, [r4, #0]
 800bb04:	1a6d      	subs	r5, r5, r1
 800bb06:	4629      	mov	r1, r5
 800bb08:	4638      	mov	r0, r7
 800bb0a:	f7ff ffa7 	bl	800ba5c <sbrk_aligned>
 800bb0e:	3001      	adds	r0, #1
 800bb10:	d037      	beq.n	800bb82 <_malloc_r+0xe6>
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	442b      	add	r3, r5
 800bb16:	6023      	str	r3, [r4, #0]
 800bb18:	f8d8 3000 	ldr.w	r3, [r8]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d038      	beq.n	800bb92 <_malloc_r+0xf6>
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	42a2      	cmp	r2, r4
 800bb24:	d12b      	bne.n	800bb7e <_malloc_r+0xe2>
 800bb26:	2200      	movs	r2, #0
 800bb28:	605a      	str	r2, [r3, #4]
 800bb2a:	e00f      	b.n	800bb4c <_malloc_r+0xb0>
 800bb2c:	6822      	ldr	r2, [r4, #0]
 800bb2e:	1b52      	subs	r2, r2, r5
 800bb30:	d41f      	bmi.n	800bb72 <_malloc_r+0xd6>
 800bb32:	2a0b      	cmp	r2, #11
 800bb34:	d917      	bls.n	800bb66 <_malloc_r+0xca>
 800bb36:	1961      	adds	r1, r4, r5
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	6025      	str	r5, [r4, #0]
 800bb3c:	bf18      	it	ne
 800bb3e:	6059      	strne	r1, [r3, #4]
 800bb40:	6863      	ldr	r3, [r4, #4]
 800bb42:	bf08      	it	eq
 800bb44:	f8c8 1000 	streq.w	r1, [r8]
 800bb48:	5162      	str	r2, [r4, r5]
 800bb4a:	604b      	str	r3, [r1, #4]
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	f104 060b 	add.w	r6, r4, #11
 800bb52:	f000 f829 	bl	800bba8 <__malloc_unlock>
 800bb56:	f026 0607 	bic.w	r6, r6, #7
 800bb5a:	1d23      	adds	r3, r4, #4
 800bb5c:	1af2      	subs	r2, r6, r3
 800bb5e:	d0ae      	beq.n	800babe <_malloc_r+0x22>
 800bb60:	1b9b      	subs	r3, r3, r6
 800bb62:	50a3      	str	r3, [r4, r2]
 800bb64:	e7ab      	b.n	800babe <_malloc_r+0x22>
 800bb66:	42a3      	cmp	r3, r4
 800bb68:	6862      	ldr	r2, [r4, #4]
 800bb6a:	d1dd      	bne.n	800bb28 <_malloc_r+0x8c>
 800bb6c:	f8c8 2000 	str.w	r2, [r8]
 800bb70:	e7ec      	b.n	800bb4c <_malloc_r+0xb0>
 800bb72:	4623      	mov	r3, r4
 800bb74:	6864      	ldr	r4, [r4, #4]
 800bb76:	e7ac      	b.n	800bad2 <_malloc_r+0x36>
 800bb78:	4634      	mov	r4, r6
 800bb7a:	6876      	ldr	r6, [r6, #4]
 800bb7c:	e7b4      	b.n	800bae8 <_malloc_r+0x4c>
 800bb7e:	4613      	mov	r3, r2
 800bb80:	e7cc      	b.n	800bb1c <_malloc_r+0x80>
 800bb82:	230c      	movs	r3, #12
 800bb84:	603b      	str	r3, [r7, #0]
 800bb86:	4638      	mov	r0, r7
 800bb88:	f000 f80e 	bl	800bba8 <__malloc_unlock>
 800bb8c:	e797      	b.n	800babe <_malloc_r+0x22>
 800bb8e:	6025      	str	r5, [r4, #0]
 800bb90:	e7dc      	b.n	800bb4c <_malloc_r+0xb0>
 800bb92:	605b      	str	r3, [r3, #4]
 800bb94:	deff      	udf	#255	; 0xff
 800bb96:	bf00      	nop
 800bb98:	20002238 	.word	0x20002238

0800bb9c <__malloc_lock>:
 800bb9c:	4801      	ldr	r0, [pc, #4]	; (800bba4 <__malloc_lock+0x8>)
 800bb9e:	f7ff b88a 	b.w	800acb6 <__retarget_lock_acquire_recursive>
 800bba2:	bf00      	nop
 800bba4:	20002234 	.word	0x20002234

0800bba8 <__malloc_unlock>:
 800bba8:	4801      	ldr	r0, [pc, #4]	; (800bbb0 <__malloc_unlock+0x8>)
 800bbaa:	f7ff b885 	b.w	800acb8 <__retarget_lock_release_recursive>
 800bbae:	bf00      	nop
 800bbb0:	20002234 	.word	0x20002234

0800bbb4 <_Balloc>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	69c6      	ldr	r6, [r0, #28]
 800bbb8:	4604      	mov	r4, r0
 800bbba:	460d      	mov	r5, r1
 800bbbc:	b976      	cbnz	r6, 800bbdc <_Balloc+0x28>
 800bbbe:	2010      	movs	r0, #16
 800bbc0:	f7ff ff44 	bl	800ba4c <malloc>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	61e0      	str	r0, [r4, #28]
 800bbc8:	b920      	cbnz	r0, 800bbd4 <_Balloc+0x20>
 800bbca:	4b18      	ldr	r3, [pc, #96]	; (800bc2c <_Balloc+0x78>)
 800bbcc:	4818      	ldr	r0, [pc, #96]	; (800bc30 <_Balloc+0x7c>)
 800bbce:	216b      	movs	r1, #107	; 0x6b
 800bbd0:	f000 fc38 	bl	800c444 <__assert_func>
 800bbd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbd8:	6006      	str	r6, [r0, #0]
 800bbda:	60c6      	str	r6, [r0, #12]
 800bbdc:	69e6      	ldr	r6, [r4, #28]
 800bbde:	68f3      	ldr	r3, [r6, #12]
 800bbe0:	b183      	cbz	r3, 800bc04 <_Balloc+0x50>
 800bbe2:	69e3      	ldr	r3, [r4, #28]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbea:	b9b8      	cbnz	r0, 800bc1c <_Balloc+0x68>
 800bbec:	2101      	movs	r1, #1
 800bbee:	fa01 f605 	lsl.w	r6, r1, r5
 800bbf2:	1d72      	adds	r2, r6, #5
 800bbf4:	0092      	lsls	r2, r2, #2
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	f000 fc42 	bl	800c480 <_calloc_r>
 800bbfc:	b160      	cbz	r0, 800bc18 <_Balloc+0x64>
 800bbfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc02:	e00e      	b.n	800bc22 <_Balloc+0x6e>
 800bc04:	2221      	movs	r2, #33	; 0x21
 800bc06:	2104      	movs	r1, #4
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f000 fc39 	bl	800c480 <_calloc_r>
 800bc0e:	69e3      	ldr	r3, [r4, #28]
 800bc10:	60f0      	str	r0, [r6, #12]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1e4      	bne.n	800bbe2 <_Balloc+0x2e>
 800bc18:	2000      	movs	r0, #0
 800bc1a:	bd70      	pop	{r4, r5, r6, pc}
 800bc1c:	6802      	ldr	r2, [r0, #0]
 800bc1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc22:	2300      	movs	r3, #0
 800bc24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc28:	e7f7      	b.n	800bc1a <_Balloc+0x66>
 800bc2a:	bf00      	nop
 800bc2c:	0800cb45 	.word	0x0800cb45
 800bc30:	0800cbc5 	.word	0x0800cbc5

0800bc34 <_Bfree>:
 800bc34:	b570      	push	{r4, r5, r6, lr}
 800bc36:	69c6      	ldr	r6, [r0, #28]
 800bc38:	4605      	mov	r5, r0
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	b976      	cbnz	r6, 800bc5c <_Bfree+0x28>
 800bc3e:	2010      	movs	r0, #16
 800bc40:	f7ff ff04 	bl	800ba4c <malloc>
 800bc44:	4602      	mov	r2, r0
 800bc46:	61e8      	str	r0, [r5, #28]
 800bc48:	b920      	cbnz	r0, 800bc54 <_Bfree+0x20>
 800bc4a:	4b09      	ldr	r3, [pc, #36]	; (800bc70 <_Bfree+0x3c>)
 800bc4c:	4809      	ldr	r0, [pc, #36]	; (800bc74 <_Bfree+0x40>)
 800bc4e:	218f      	movs	r1, #143	; 0x8f
 800bc50:	f000 fbf8 	bl	800c444 <__assert_func>
 800bc54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc58:	6006      	str	r6, [r0, #0]
 800bc5a:	60c6      	str	r6, [r0, #12]
 800bc5c:	b13c      	cbz	r4, 800bc6e <_Bfree+0x3a>
 800bc5e:	69eb      	ldr	r3, [r5, #28]
 800bc60:	6862      	ldr	r2, [r4, #4]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc68:	6021      	str	r1, [r4, #0]
 800bc6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	0800cb45 	.word	0x0800cb45
 800bc74:	0800cbc5 	.word	0x0800cbc5

0800bc78 <__multadd>:
 800bc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc7c:	690d      	ldr	r5, [r1, #16]
 800bc7e:	4607      	mov	r7, r0
 800bc80:	460c      	mov	r4, r1
 800bc82:	461e      	mov	r6, r3
 800bc84:	f101 0c14 	add.w	ip, r1, #20
 800bc88:	2000      	movs	r0, #0
 800bc8a:	f8dc 3000 	ldr.w	r3, [ip]
 800bc8e:	b299      	uxth	r1, r3
 800bc90:	fb02 6101 	mla	r1, r2, r1, r6
 800bc94:	0c1e      	lsrs	r6, r3, #16
 800bc96:	0c0b      	lsrs	r3, r1, #16
 800bc98:	fb02 3306 	mla	r3, r2, r6, r3
 800bc9c:	b289      	uxth	r1, r1
 800bc9e:	3001      	adds	r0, #1
 800bca0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bca4:	4285      	cmp	r5, r0
 800bca6:	f84c 1b04 	str.w	r1, [ip], #4
 800bcaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcae:	dcec      	bgt.n	800bc8a <__multadd+0x12>
 800bcb0:	b30e      	cbz	r6, 800bcf6 <__multadd+0x7e>
 800bcb2:	68a3      	ldr	r3, [r4, #8]
 800bcb4:	42ab      	cmp	r3, r5
 800bcb6:	dc19      	bgt.n	800bcec <__multadd+0x74>
 800bcb8:	6861      	ldr	r1, [r4, #4]
 800bcba:	4638      	mov	r0, r7
 800bcbc:	3101      	adds	r1, #1
 800bcbe:	f7ff ff79 	bl	800bbb4 <_Balloc>
 800bcc2:	4680      	mov	r8, r0
 800bcc4:	b928      	cbnz	r0, 800bcd2 <__multadd+0x5a>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	4b0c      	ldr	r3, [pc, #48]	; (800bcfc <__multadd+0x84>)
 800bcca:	480d      	ldr	r0, [pc, #52]	; (800bd00 <__multadd+0x88>)
 800bccc:	21ba      	movs	r1, #186	; 0xba
 800bcce:	f000 fbb9 	bl	800c444 <__assert_func>
 800bcd2:	6922      	ldr	r2, [r4, #16]
 800bcd4:	3202      	adds	r2, #2
 800bcd6:	f104 010c 	add.w	r1, r4, #12
 800bcda:	0092      	lsls	r2, r2, #2
 800bcdc:	300c      	adds	r0, #12
 800bcde:	f000 fba3 	bl	800c428 <memcpy>
 800bce2:	4621      	mov	r1, r4
 800bce4:	4638      	mov	r0, r7
 800bce6:	f7ff ffa5 	bl	800bc34 <_Bfree>
 800bcea:	4644      	mov	r4, r8
 800bcec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bcf0:	3501      	adds	r5, #1
 800bcf2:	615e      	str	r6, [r3, #20]
 800bcf4:	6125      	str	r5, [r4, #16]
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcfc:	0800cbb4 	.word	0x0800cbb4
 800bd00:	0800cbc5 	.word	0x0800cbc5

0800bd04 <__hi0bits>:
 800bd04:	0c03      	lsrs	r3, r0, #16
 800bd06:	041b      	lsls	r3, r3, #16
 800bd08:	b9d3      	cbnz	r3, 800bd40 <__hi0bits+0x3c>
 800bd0a:	0400      	lsls	r0, r0, #16
 800bd0c:	2310      	movs	r3, #16
 800bd0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd12:	bf04      	itt	eq
 800bd14:	0200      	lsleq	r0, r0, #8
 800bd16:	3308      	addeq	r3, #8
 800bd18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bd1c:	bf04      	itt	eq
 800bd1e:	0100      	lsleq	r0, r0, #4
 800bd20:	3304      	addeq	r3, #4
 800bd22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bd26:	bf04      	itt	eq
 800bd28:	0080      	lsleq	r0, r0, #2
 800bd2a:	3302      	addeq	r3, #2
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	db05      	blt.n	800bd3c <__hi0bits+0x38>
 800bd30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bd34:	f103 0301 	add.w	r3, r3, #1
 800bd38:	bf08      	it	eq
 800bd3a:	2320      	moveq	r3, #32
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	4770      	bx	lr
 800bd40:	2300      	movs	r3, #0
 800bd42:	e7e4      	b.n	800bd0e <__hi0bits+0xa>

0800bd44 <__lo0bits>:
 800bd44:	6803      	ldr	r3, [r0, #0]
 800bd46:	f013 0207 	ands.w	r2, r3, #7
 800bd4a:	d00c      	beq.n	800bd66 <__lo0bits+0x22>
 800bd4c:	07d9      	lsls	r1, r3, #31
 800bd4e:	d422      	bmi.n	800bd96 <__lo0bits+0x52>
 800bd50:	079a      	lsls	r2, r3, #30
 800bd52:	bf49      	itett	mi
 800bd54:	085b      	lsrmi	r3, r3, #1
 800bd56:	089b      	lsrpl	r3, r3, #2
 800bd58:	6003      	strmi	r3, [r0, #0]
 800bd5a:	2201      	movmi	r2, #1
 800bd5c:	bf5c      	itt	pl
 800bd5e:	6003      	strpl	r3, [r0, #0]
 800bd60:	2202      	movpl	r2, #2
 800bd62:	4610      	mov	r0, r2
 800bd64:	4770      	bx	lr
 800bd66:	b299      	uxth	r1, r3
 800bd68:	b909      	cbnz	r1, 800bd6e <__lo0bits+0x2a>
 800bd6a:	0c1b      	lsrs	r3, r3, #16
 800bd6c:	2210      	movs	r2, #16
 800bd6e:	b2d9      	uxtb	r1, r3
 800bd70:	b909      	cbnz	r1, 800bd76 <__lo0bits+0x32>
 800bd72:	3208      	adds	r2, #8
 800bd74:	0a1b      	lsrs	r3, r3, #8
 800bd76:	0719      	lsls	r1, r3, #28
 800bd78:	bf04      	itt	eq
 800bd7a:	091b      	lsreq	r3, r3, #4
 800bd7c:	3204      	addeq	r2, #4
 800bd7e:	0799      	lsls	r1, r3, #30
 800bd80:	bf04      	itt	eq
 800bd82:	089b      	lsreq	r3, r3, #2
 800bd84:	3202      	addeq	r2, #2
 800bd86:	07d9      	lsls	r1, r3, #31
 800bd88:	d403      	bmi.n	800bd92 <__lo0bits+0x4e>
 800bd8a:	085b      	lsrs	r3, r3, #1
 800bd8c:	f102 0201 	add.w	r2, r2, #1
 800bd90:	d003      	beq.n	800bd9a <__lo0bits+0x56>
 800bd92:	6003      	str	r3, [r0, #0]
 800bd94:	e7e5      	b.n	800bd62 <__lo0bits+0x1e>
 800bd96:	2200      	movs	r2, #0
 800bd98:	e7e3      	b.n	800bd62 <__lo0bits+0x1e>
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	e7e1      	b.n	800bd62 <__lo0bits+0x1e>
	...

0800bda0 <__i2b>:
 800bda0:	b510      	push	{r4, lr}
 800bda2:	460c      	mov	r4, r1
 800bda4:	2101      	movs	r1, #1
 800bda6:	f7ff ff05 	bl	800bbb4 <_Balloc>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	b928      	cbnz	r0, 800bdba <__i2b+0x1a>
 800bdae:	4b05      	ldr	r3, [pc, #20]	; (800bdc4 <__i2b+0x24>)
 800bdb0:	4805      	ldr	r0, [pc, #20]	; (800bdc8 <__i2b+0x28>)
 800bdb2:	f240 1145 	movw	r1, #325	; 0x145
 800bdb6:	f000 fb45 	bl	800c444 <__assert_func>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	6144      	str	r4, [r0, #20]
 800bdbe:	6103      	str	r3, [r0, #16]
 800bdc0:	bd10      	pop	{r4, pc}
 800bdc2:	bf00      	nop
 800bdc4:	0800cbb4 	.word	0x0800cbb4
 800bdc8:	0800cbc5 	.word	0x0800cbc5

0800bdcc <__multiply>:
 800bdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd0:	4691      	mov	r9, r2
 800bdd2:	690a      	ldr	r2, [r1, #16]
 800bdd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	bfb8      	it	lt
 800bddc:	460b      	movlt	r3, r1
 800bdde:	460c      	mov	r4, r1
 800bde0:	bfbc      	itt	lt
 800bde2:	464c      	movlt	r4, r9
 800bde4:	4699      	movlt	r9, r3
 800bde6:	6927      	ldr	r7, [r4, #16]
 800bde8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bdec:	68a3      	ldr	r3, [r4, #8]
 800bdee:	6861      	ldr	r1, [r4, #4]
 800bdf0:	eb07 060a 	add.w	r6, r7, sl
 800bdf4:	42b3      	cmp	r3, r6
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	bfb8      	it	lt
 800bdfa:	3101      	addlt	r1, #1
 800bdfc:	f7ff feda 	bl	800bbb4 <_Balloc>
 800be00:	b930      	cbnz	r0, 800be10 <__multiply+0x44>
 800be02:	4602      	mov	r2, r0
 800be04:	4b44      	ldr	r3, [pc, #272]	; (800bf18 <__multiply+0x14c>)
 800be06:	4845      	ldr	r0, [pc, #276]	; (800bf1c <__multiply+0x150>)
 800be08:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800be0c:	f000 fb1a 	bl	800c444 <__assert_func>
 800be10:	f100 0514 	add.w	r5, r0, #20
 800be14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be18:	462b      	mov	r3, r5
 800be1a:	2200      	movs	r2, #0
 800be1c:	4543      	cmp	r3, r8
 800be1e:	d321      	bcc.n	800be64 <__multiply+0x98>
 800be20:	f104 0314 	add.w	r3, r4, #20
 800be24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800be28:	f109 0314 	add.w	r3, r9, #20
 800be2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800be30:	9202      	str	r2, [sp, #8]
 800be32:	1b3a      	subs	r2, r7, r4
 800be34:	3a15      	subs	r2, #21
 800be36:	f022 0203 	bic.w	r2, r2, #3
 800be3a:	3204      	adds	r2, #4
 800be3c:	f104 0115 	add.w	r1, r4, #21
 800be40:	428f      	cmp	r7, r1
 800be42:	bf38      	it	cc
 800be44:	2204      	movcc	r2, #4
 800be46:	9201      	str	r2, [sp, #4]
 800be48:	9a02      	ldr	r2, [sp, #8]
 800be4a:	9303      	str	r3, [sp, #12]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d80c      	bhi.n	800be6a <__multiply+0x9e>
 800be50:	2e00      	cmp	r6, #0
 800be52:	dd03      	ble.n	800be5c <__multiply+0x90>
 800be54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d05b      	beq.n	800bf14 <__multiply+0x148>
 800be5c:	6106      	str	r6, [r0, #16]
 800be5e:	b005      	add	sp, #20
 800be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be64:	f843 2b04 	str.w	r2, [r3], #4
 800be68:	e7d8      	b.n	800be1c <__multiply+0x50>
 800be6a:	f8b3 a000 	ldrh.w	sl, [r3]
 800be6e:	f1ba 0f00 	cmp.w	sl, #0
 800be72:	d024      	beq.n	800bebe <__multiply+0xf2>
 800be74:	f104 0e14 	add.w	lr, r4, #20
 800be78:	46a9      	mov	r9, r5
 800be7a:	f04f 0c00 	mov.w	ip, #0
 800be7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800be82:	f8d9 1000 	ldr.w	r1, [r9]
 800be86:	fa1f fb82 	uxth.w	fp, r2
 800be8a:	b289      	uxth	r1, r1
 800be8c:	fb0a 110b 	mla	r1, sl, fp, r1
 800be90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800be94:	f8d9 2000 	ldr.w	r2, [r9]
 800be98:	4461      	add	r1, ip
 800be9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be9e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bea2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bea6:	b289      	uxth	r1, r1
 800bea8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800beac:	4577      	cmp	r7, lr
 800beae:	f849 1b04 	str.w	r1, [r9], #4
 800beb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800beb6:	d8e2      	bhi.n	800be7e <__multiply+0xb2>
 800beb8:	9a01      	ldr	r2, [sp, #4]
 800beba:	f845 c002 	str.w	ip, [r5, r2]
 800bebe:	9a03      	ldr	r2, [sp, #12]
 800bec0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bec4:	3304      	adds	r3, #4
 800bec6:	f1b9 0f00 	cmp.w	r9, #0
 800beca:	d021      	beq.n	800bf10 <__multiply+0x144>
 800becc:	6829      	ldr	r1, [r5, #0]
 800bece:	f104 0c14 	add.w	ip, r4, #20
 800bed2:	46ae      	mov	lr, r5
 800bed4:	f04f 0a00 	mov.w	sl, #0
 800bed8:	f8bc b000 	ldrh.w	fp, [ip]
 800bedc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bee0:	fb09 220b 	mla	r2, r9, fp, r2
 800bee4:	4452      	add	r2, sl
 800bee6:	b289      	uxth	r1, r1
 800bee8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800beec:	f84e 1b04 	str.w	r1, [lr], #4
 800bef0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bef8:	f8be 1000 	ldrh.w	r1, [lr]
 800befc:	fb09 110a 	mla	r1, r9, sl, r1
 800bf00:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bf04:	4567      	cmp	r7, ip
 800bf06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bf0a:	d8e5      	bhi.n	800bed8 <__multiply+0x10c>
 800bf0c:	9a01      	ldr	r2, [sp, #4]
 800bf0e:	50a9      	str	r1, [r5, r2]
 800bf10:	3504      	adds	r5, #4
 800bf12:	e799      	b.n	800be48 <__multiply+0x7c>
 800bf14:	3e01      	subs	r6, #1
 800bf16:	e79b      	b.n	800be50 <__multiply+0x84>
 800bf18:	0800cbb4 	.word	0x0800cbb4
 800bf1c:	0800cbc5 	.word	0x0800cbc5

0800bf20 <__pow5mult>:
 800bf20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf24:	4615      	mov	r5, r2
 800bf26:	f012 0203 	ands.w	r2, r2, #3
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	460f      	mov	r7, r1
 800bf2e:	d007      	beq.n	800bf40 <__pow5mult+0x20>
 800bf30:	4c25      	ldr	r4, [pc, #148]	; (800bfc8 <__pow5mult+0xa8>)
 800bf32:	3a01      	subs	r2, #1
 800bf34:	2300      	movs	r3, #0
 800bf36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf3a:	f7ff fe9d 	bl	800bc78 <__multadd>
 800bf3e:	4607      	mov	r7, r0
 800bf40:	10ad      	asrs	r5, r5, #2
 800bf42:	d03d      	beq.n	800bfc0 <__pow5mult+0xa0>
 800bf44:	69f4      	ldr	r4, [r6, #28]
 800bf46:	b97c      	cbnz	r4, 800bf68 <__pow5mult+0x48>
 800bf48:	2010      	movs	r0, #16
 800bf4a:	f7ff fd7f 	bl	800ba4c <malloc>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	61f0      	str	r0, [r6, #28]
 800bf52:	b928      	cbnz	r0, 800bf60 <__pow5mult+0x40>
 800bf54:	4b1d      	ldr	r3, [pc, #116]	; (800bfcc <__pow5mult+0xac>)
 800bf56:	481e      	ldr	r0, [pc, #120]	; (800bfd0 <__pow5mult+0xb0>)
 800bf58:	f240 11b3 	movw	r1, #435	; 0x1b3
 800bf5c:	f000 fa72 	bl	800c444 <__assert_func>
 800bf60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf64:	6004      	str	r4, [r0, #0]
 800bf66:	60c4      	str	r4, [r0, #12]
 800bf68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bf6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bf70:	b94c      	cbnz	r4, 800bf86 <__pow5mult+0x66>
 800bf72:	f240 2171 	movw	r1, #625	; 0x271
 800bf76:	4630      	mov	r0, r6
 800bf78:	f7ff ff12 	bl	800bda0 <__i2b>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf82:	4604      	mov	r4, r0
 800bf84:	6003      	str	r3, [r0, #0]
 800bf86:	f04f 0900 	mov.w	r9, #0
 800bf8a:	07eb      	lsls	r3, r5, #31
 800bf8c:	d50a      	bpl.n	800bfa4 <__pow5mult+0x84>
 800bf8e:	4639      	mov	r1, r7
 800bf90:	4622      	mov	r2, r4
 800bf92:	4630      	mov	r0, r6
 800bf94:	f7ff ff1a 	bl	800bdcc <__multiply>
 800bf98:	4639      	mov	r1, r7
 800bf9a:	4680      	mov	r8, r0
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	f7ff fe49 	bl	800bc34 <_Bfree>
 800bfa2:	4647      	mov	r7, r8
 800bfa4:	106d      	asrs	r5, r5, #1
 800bfa6:	d00b      	beq.n	800bfc0 <__pow5mult+0xa0>
 800bfa8:	6820      	ldr	r0, [r4, #0]
 800bfaa:	b938      	cbnz	r0, 800bfbc <__pow5mult+0x9c>
 800bfac:	4622      	mov	r2, r4
 800bfae:	4621      	mov	r1, r4
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f7ff ff0b 	bl	800bdcc <__multiply>
 800bfb6:	6020      	str	r0, [r4, #0]
 800bfb8:	f8c0 9000 	str.w	r9, [r0]
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	e7e4      	b.n	800bf8a <__pow5mult+0x6a>
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfc6:	bf00      	nop
 800bfc8:	0800cd10 	.word	0x0800cd10
 800bfcc:	0800cb45 	.word	0x0800cb45
 800bfd0:	0800cbc5 	.word	0x0800cbc5

0800bfd4 <__lshift>:
 800bfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfd8:	460c      	mov	r4, r1
 800bfda:	6849      	ldr	r1, [r1, #4]
 800bfdc:	6923      	ldr	r3, [r4, #16]
 800bfde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	4607      	mov	r7, r0
 800bfe6:	4691      	mov	r9, r2
 800bfe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfec:	f108 0601 	add.w	r6, r8, #1
 800bff0:	42b3      	cmp	r3, r6
 800bff2:	db0b      	blt.n	800c00c <__lshift+0x38>
 800bff4:	4638      	mov	r0, r7
 800bff6:	f7ff fddd 	bl	800bbb4 <_Balloc>
 800bffa:	4605      	mov	r5, r0
 800bffc:	b948      	cbnz	r0, 800c012 <__lshift+0x3e>
 800bffe:	4602      	mov	r2, r0
 800c000:	4b28      	ldr	r3, [pc, #160]	; (800c0a4 <__lshift+0xd0>)
 800c002:	4829      	ldr	r0, [pc, #164]	; (800c0a8 <__lshift+0xd4>)
 800c004:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c008:	f000 fa1c 	bl	800c444 <__assert_func>
 800c00c:	3101      	adds	r1, #1
 800c00e:	005b      	lsls	r3, r3, #1
 800c010:	e7ee      	b.n	800bff0 <__lshift+0x1c>
 800c012:	2300      	movs	r3, #0
 800c014:	f100 0114 	add.w	r1, r0, #20
 800c018:	f100 0210 	add.w	r2, r0, #16
 800c01c:	4618      	mov	r0, r3
 800c01e:	4553      	cmp	r3, sl
 800c020:	db33      	blt.n	800c08a <__lshift+0xb6>
 800c022:	6920      	ldr	r0, [r4, #16]
 800c024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c028:	f104 0314 	add.w	r3, r4, #20
 800c02c:	f019 091f 	ands.w	r9, r9, #31
 800c030:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c034:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c038:	d02b      	beq.n	800c092 <__lshift+0xbe>
 800c03a:	f1c9 0e20 	rsb	lr, r9, #32
 800c03e:	468a      	mov	sl, r1
 800c040:	2200      	movs	r2, #0
 800c042:	6818      	ldr	r0, [r3, #0]
 800c044:	fa00 f009 	lsl.w	r0, r0, r9
 800c048:	4310      	orrs	r0, r2
 800c04a:	f84a 0b04 	str.w	r0, [sl], #4
 800c04e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c052:	459c      	cmp	ip, r3
 800c054:	fa22 f20e 	lsr.w	r2, r2, lr
 800c058:	d8f3      	bhi.n	800c042 <__lshift+0x6e>
 800c05a:	ebac 0304 	sub.w	r3, ip, r4
 800c05e:	3b15      	subs	r3, #21
 800c060:	f023 0303 	bic.w	r3, r3, #3
 800c064:	3304      	adds	r3, #4
 800c066:	f104 0015 	add.w	r0, r4, #21
 800c06a:	4584      	cmp	ip, r0
 800c06c:	bf38      	it	cc
 800c06e:	2304      	movcc	r3, #4
 800c070:	50ca      	str	r2, [r1, r3]
 800c072:	b10a      	cbz	r2, 800c078 <__lshift+0xa4>
 800c074:	f108 0602 	add.w	r6, r8, #2
 800c078:	3e01      	subs	r6, #1
 800c07a:	4638      	mov	r0, r7
 800c07c:	612e      	str	r6, [r5, #16]
 800c07e:	4621      	mov	r1, r4
 800c080:	f7ff fdd8 	bl	800bc34 <_Bfree>
 800c084:	4628      	mov	r0, r5
 800c086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c08a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c08e:	3301      	adds	r3, #1
 800c090:	e7c5      	b.n	800c01e <__lshift+0x4a>
 800c092:	3904      	subs	r1, #4
 800c094:	f853 2b04 	ldr.w	r2, [r3], #4
 800c098:	f841 2f04 	str.w	r2, [r1, #4]!
 800c09c:	459c      	cmp	ip, r3
 800c09e:	d8f9      	bhi.n	800c094 <__lshift+0xc0>
 800c0a0:	e7ea      	b.n	800c078 <__lshift+0xa4>
 800c0a2:	bf00      	nop
 800c0a4:	0800cbb4 	.word	0x0800cbb4
 800c0a8:	0800cbc5 	.word	0x0800cbc5

0800c0ac <__mcmp>:
 800c0ac:	b530      	push	{r4, r5, lr}
 800c0ae:	6902      	ldr	r2, [r0, #16]
 800c0b0:	690c      	ldr	r4, [r1, #16]
 800c0b2:	1b12      	subs	r2, r2, r4
 800c0b4:	d10e      	bne.n	800c0d4 <__mcmp+0x28>
 800c0b6:	f100 0314 	add.w	r3, r0, #20
 800c0ba:	3114      	adds	r1, #20
 800c0bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c0c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c0c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c0c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c0cc:	42a5      	cmp	r5, r4
 800c0ce:	d003      	beq.n	800c0d8 <__mcmp+0x2c>
 800c0d0:	d305      	bcc.n	800c0de <__mcmp+0x32>
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	bd30      	pop	{r4, r5, pc}
 800c0d8:	4283      	cmp	r3, r0
 800c0da:	d3f3      	bcc.n	800c0c4 <__mcmp+0x18>
 800c0dc:	e7fa      	b.n	800c0d4 <__mcmp+0x28>
 800c0de:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e2:	e7f7      	b.n	800c0d4 <__mcmp+0x28>

0800c0e4 <__mdiff>:
 800c0e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	4690      	mov	r8, r2
 800c0f2:	f7ff ffdb 	bl	800c0ac <__mcmp>
 800c0f6:	1e05      	subs	r5, r0, #0
 800c0f8:	d110      	bne.n	800c11c <__mdiff+0x38>
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7ff fd59 	bl	800bbb4 <_Balloc>
 800c102:	b930      	cbnz	r0, 800c112 <__mdiff+0x2e>
 800c104:	4b3a      	ldr	r3, [pc, #232]	; (800c1f0 <__mdiff+0x10c>)
 800c106:	4602      	mov	r2, r0
 800c108:	f240 2137 	movw	r1, #567	; 0x237
 800c10c:	4839      	ldr	r0, [pc, #228]	; (800c1f4 <__mdiff+0x110>)
 800c10e:	f000 f999 	bl	800c444 <__assert_func>
 800c112:	2301      	movs	r3, #1
 800c114:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11c:	bfa4      	itt	ge
 800c11e:	4643      	movge	r3, r8
 800c120:	46a0      	movge	r8, r4
 800c122:	4630      	mov	r0, r6
 800c124:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c128:	bfa6      	itte	ge
 800c12a:	461c      	movge	r4, r3
 800c12c:	2500      	movge	r5, #0
 800c12e:	2501      	movlt	r5, #1
 800c130:	f7ff fd40 	bl	800bbb4 <_Balloc>
 800c134:	b920      	cbnz	r0, 800c140 <__mdiff+0x5c>
 800c136:	4b2e      	ldr	r3, [pc, #184]	; (800c1f0 <__mdiff+0x10c>)
 800c138:	4602      	mov	r2, r0
 800c13a:	f240 2145 	movw	r1, #581	; 0x245
 800c13e:	e7e5      	b.n	800c10c <__mdiff+0x28>
 800c140:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c144:	6926      	ldr	r6, [r4, #16]
 800c146:	60c5      	str	r5, [r0, #12]
 800c148:	f104 0914 	add.w	r9, r4, #20
 800c14c:	f108 0514 	add.w	r5, r8, #20
 800c150:	f100 0e14 	add.w	lr, r0, #20
 800c154:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c158:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c15c:	f108 0210 	add.w	r2, r8, #16
 800c160:	46f2      	mov	sl, lr
 800c162:	2100      	movs	r1, #0
 800c164:	f859 3b04 	ldr.w	r3, [r9], #4
 800c168:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c16c:	fa11 f88b 	uxtah	r8, r1, fp
 800c170:	b299      	uxth	r1, r3
 800c172:	0c1b      	lsrs	r3, r3, #16
 800c174:	eba8 0801 	sub.w	r8, r8, r1
 800c178:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c17c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c180:	fa1f f888 	uxth.w	r8, r8
 800c184:	1419      	asrs	r1, r3, #16
 800c186:	454e      	cmp	r6, r9
 800c188:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c18c:	f84a 3b04 	str.w	r3, [sl], #4
 800c190:	d8e8      	bhi.n	800c164 <__mdiff+0x80>
 800c192:	1b33      	subs	r3, r6, r4
 800c194:	3b15      	subs	r3, #21
 800c196:	f023 0303 	bic.w	r3, r3, #3
 800c19a:	3304      	adds	r3, #4
 800c19c:	3415      	adds	r4, #21
 800c19e:	42a6      	cmp	r6, r4
 800c1a0:	bf38      	it	cc
 800c1a2:	2304      	movcc	r3, #4
 800c1a4:	441d      	add	r5, r3
 800c1a6:	4473      	add	r3, lr
 800c1a8:	469e      	mov	lr, r3
 800c1aa:	462e      	mov	r6, r5
 800c1ac:	4566      	cmp	r6, ip
 800c1ae:	d30e      	bcc.n	800c1ce <__mdiff+0xea>
 800c1b0:	f10c 0203 	add.w	r2, ip, #3
 800c1b4:	1b52      	subs	r2, r2, r5
 800c1b6:	f022 0203 	bic.w	r2, r2, #3
 800c1ba:	3d03      	subs	r5, #3
 800c1bc:	45ac      	cmp	ip, r5
 800c1be:	bf38      	it	cc
 800c1c0:	2200      	movcc	r2, #0
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c1c8:	b17a      	cbz	r2, 800c1ea <__mdiff+0x106>
 800c1ca:	6107      	str	r7, [r0, #16]
 800c1cc:	e7a4      	b.n	800c118 <__mdiff+0x34>
 800c1ce:	f856 8b04 	ldr.w	r8, [r6], #4
 800c1d2:	fa11 f288 	uxtah	r2, r1, r8
 800c1d6:	1414      	asrs	r4, r2, #16
 800c1d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c1dc:	b292      	uxth	r2, r2
 800c1de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c1e2:	f84e 2b04 	str.w	r2, [lr], #4
 800c1e6:	1421      	asrs	r1, r4, #16
 800c1e8:	e7e0      	b.n	800c1ac <__mdiff+0xc8>
 800c1ea:	3f01      	subs	r7, #1
 800c1ec:	e7ea      	b.n	800c1c4 <__mdiff+0xe0>
 800c1ee:	bf00      	nop
 800c1f0:	0800cbb4 	.word	0x0800cbb4
 800c1f4:	0800cbc5 	.word	0x0800cbc5

0800c1f8 <__d2b>:
 800c1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1fc:	460f      	mov	r7, r1
 800c1fe:	2101      	movs	r1, #1
 800c200:	ec59 8b10 	vmov	r8, r9, d0
 800c204:	4616      	mov	r6, r2
 800c206:	f7ff fcd5 	bl	800bbb4 <_Balloc>
 800c20a:	4604      	mov	r4, r0
 800c20c:	b930      	cbnz	r0, 800c21c <__d2b+0x24>
 800c20e:	4602      	mov	r2, r0
 800c210:	4b24      	ldr	r3, [pc, #144]	; (800c2a4 <__d2b+0xac>)
 800c212:	4825      	ldr	r0, [pc, #148]	; (800c2a8 <__d2b+0xb0>)
 800c214:	f240 310f 	movw	r1, #783	; 0x30f
 800c218:	f000 f914 	bl	800c444 <__assert_func>
 800c21c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c224:	bb2d      	cbnz	r5, 800c272 <__d2b+0x7a>
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	f1b8 0300 	subs.w	r3, r8, #0
 800c22c:	d026      	beq.n	800c27c <__d2b+0x84>
 800c22e:	4668      	mov	r0, sp
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	f7ff fd87 	bl	800bd44 <__lo0bits>
 800c236:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c23a:	b1e8      	cbz	r0, 800c278 <__d2b+0x80>
 800c23c:	f1c0 0320 	rsb	r3, r0, #32
 800c240:	fa02 f303 	lsl.w	r3, r2, r3
 800c244:	430b      	orrs	r3, r1
 800c246:	40c2      	lsrs	r2, r0
 800c248:	6163      	str	r3, [r4, #20]
 800c24a:	9201      	str	r2, [sp, #4]
 800c24c:	9b01      	ldr	r3, [sp, #4]
 800c24e:	61a3      	str	r3, [r4, #24]
 800c250:	2b00      	cmp	r3, #0
 800c252:	bf14      	ite	ne
 800c254:	2202      	movne	r2, #2
 800c256:	2201      	moveq	r2, #1
 800c258:	6122      	str	r2, [r4, #16]
 800c25a:	b1bd      	cbz	r5, 800c28c <__d2b+0x94>
 800c25c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c260:	4405      	add	r5, r0
 800c262:	603d      	str	r5, [r7, #0]
 800c264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c268:	6030      	str	r0, [r6, #0]
 800c26a:	4620      	mov	r0, r4
 800c26c:	b003      	add	sp, #12
 800c26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c276:	e7d6      	b.n	800c226 <__d2b+0x2e>
 800c278:	6161      	str	r1, [r4, #20]
 800c27a:	e7e7      	b.n	800c24c <__d2b+0x54>
 800c27c:	a801      	add	r0, sp, #4
 800c27e:	f7ff fd61 	bl	800bd44 <__lo0bits>
 800c282:	9b01      	ldr	r3, [sp, #4]
 800c284:	6163      	str	r3, [r4, #20]
 800c286:	3020      	adds	r0, #32
 800c288:	2201      	movs	r2, #1
 800c28a:	e7e5      	b.n	800c258 <__d2b+0x60>
 800c28c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c290:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c294:	6038      	str	r0, [r7, #0]
 800c296:	6918      	ldr	r0, [r3, #16]
 800c298:	f7ff fd34 	bl	800bd04 <__hi0bits>
 800c29c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2a0:	e7e2      	b.n	800c268 <__d2b+0x70>
 800c2a2:	bf00      	nop
 800c2a4:	0800cbb4 	.word	0x0800cbb4
 800c2a8:	0800cbc5 	.word	0x0800cbc5

0800c2ac <__sflush_r>:
 800c2ac:	898a      	ldrh	r2, [r1, #12]
 800c2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	0710      	lsls	r0, r2, #28
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	d458      	bmi.n	800c36c <__sflush_r+0xc0>
 800c2ba:	684b      	ldr	r3, [r1, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dc05      	bgt.n	800c2cc <__sflush_r+0x20>
 800c2c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dc02      	bgt.n	800c2cc <__sflush_r+0x20>
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2ce:	2e00      	cmp	r6, #0
 800c2d0:	d0f9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2d8:	682f      	ldr	r7, [r5, #0]
 800c2da:	6a21      	ldr	r1, [r4, #32]
 800c2dc:	602b      	str	r3, [r5, #0]
 800c2de:	d032      	beq.n	800c346 <__sflush_r+0x9a>
 800c2e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	075a      	lsls	r2, r3, #29
 800c2e6:	d505      	bpl.n	800c2f4 <__sflush_r+0x48>
 800c2e8:	6863      	ldr	r3, [r4, #4]
 800c2ea:	1ac0      	subs	r0, r0, r3
 800c2ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2ee:	b10b      	cbz	r3, 800c2f4 <__sflush_r+0x48>
 800c2f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2f2:	1ac0      	subs	r0, r0, r3
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2fa:	6a21      	ldr	r1, [r4, #32]
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	47b0      	blx	r6
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	d106      	bne.n	800c314 <__sflush_r+0x68>
 800c306:	6829      	ldr	r1, [r5, #0]
 800c308:	291d      	cmp	r1, #29
 800c30a:	d82b      	bhi.n	800c364 <__sflush_r+0xb8>
 800c30c:	4a29      	ldr	r2, [pc, #164]	; (800c3b4 <__sflush_r+0x108>)
 800c30e:	410a      	asrs	r2, r1
 800c310:	07d6      	lsls	r6, r2, #31
 800c312:	d427      	bmi.n	800c364 <__sflush_r+0xb8>
 800c314:	2200      	movs	r2, #0
 800c316:	6062      	str	r2, [r4, #4]
 800c318:	04d9      	lsls	r1, r3, #19
 800c31a:	6922      	ldr	r2, [r4, #16]
 800c31c:	6022      	str	r2, [r4, #0]
 800c31e:	d504      	bpl.n	800c32a <__sflush_r+0x7e>
 800c320:	1c42      	adds	r2, r0, #1
 800c322:	d101      	bne.n	800c328 <__sflush_r+0x7c>
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	b903      	cbnz	r3, 800c32a <__sflush_r+0x7e>
 800c328:	6560      	str	r0, [r4, #84]	; 0x54
 800c32a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c32c:	602f      	str	r7, [r5, #0]
 800c32e:	2900      	cmp	r1, #0
 800c330:	d0c9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c336:	4299      	cmp	r1, r3
 800c338:	d002      	beq.n	800c340 <__sflush_r+0x94>
 800c33a:	4628      	mov	r0, r5
 800c33c:	f7ff fb3a 	bl	800b9b4 <_free_r>
 800c340:	2000      	movs	r0, #0
 800c342:	6360      	str	r0, [r4, #52]	; 0x34
 800c344:	e7c0      	b.n	800c2c8 <__sflush_r+0x1c>
 800c346:	2301      	movs	r3, #1
 800c348:	4628      	mov	r0, r5
 800c34a:	47b0      	blx	r6
 800c34c:	1c41      	adds	r1, r0, #1
 800c34e:	d1c8      	bne.n	800c2e2 <__sflush_r+0x36>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0c5      	beq.n	800c2e2 <__sflush_r+0x36>
 800c356:	2b1d      	cmp	r3, #29
 800c358:	d001      	beq.n	800c35e <__sflush_r+0xb2>
 800c35a:	2b16      	cmp	r3, #22
 800c35c:	d101      	bne.n	800c362 <__sflush_r+0xb6>
 800c35e:	602f      	str	r7, [r5, #0]
 800c360:	e7b1      	b.n	800c2c6 <__sflush_r+0x1a>
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c368:	81a3      	strh	r3, [r4, #12]
 800c36a:	e7ad      	b.n	800c2c8 <__sflush_r+0x1c>
 800c36c:	690f      	ldr	r7, [r1, #16]
 800c36e:	2f00      	cmp	r7, #0
 800c370:	d0a9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c372:	0793      	lsls	r3, r2, #30
 800c374:	680e      	ldr	r6, [r1, #0]
 800c376:	bf08      	it	eq
 800c378:	694b      	ldreq	r3, [r1, #20]
 800c37a:	600f      	str	r7, [r1, #0]
 800c37c:	bf18      	it	ne
 800c37e:	2300      	movne	r3, #0
 800c380:	eba6 0807 	sub.w	r8, r6, r7
 800c384:	608b      	str	r3, [r1, #8]
 800c386:	f1b8 0f00 	cmp.w	r8, #0
 800c38a:	dd9c      	ble.n	800c2c6 <__sflush_r+0x1a>
 800c38c:	6a21      	ldr	r1, [r4, #32]
 800c38e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c390:	4643      	mov	r3, r8
 800c392:	463a      	mov	r2, r7
 800c394:	4628      	mov	r0, r5
 800c396:	47b0      	blx	r6
 800c398:	2800      	cmp	r0, #0
 800c39a:	dc06      	bgt.n	800c3aa <__sflush_r+0xfe>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a8:	e78e      	b.n	800c2c8 <__sflush_r+0x1c>
 800c3aa:	4407      	add	r7, r0
 800c3ac:	eba8 0800 	sub.w	r8, r8, r0
 800c3b0:	e7e9      	b.n	800c386 <__sflush_r+0xda>
 800c3b2:	bf00      	nop
 800c3b4:	dfbffffe 	.word	0xdfbffffe

0800c3b8 <_fflush_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	690b      	ldr	r3, [r1, #16]
 800c3bc:	4605      	mov	r5, r0
 800c3be:	460c      	mov	r4, r1
 800c3c0:	b913      	cbnz	r3, 800c3c8 <_fflush_r+0x10>
 800c3c2:	2500      	movs	r5, #0
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	b118      	cbz	r0, 800c3d2 <_fflush_r+0x1a>
 800c3ca:	6a03      	ldr	r3, [r0, #32]
 800c3cc:	b90b      	cbnz	r3, 800c3d2 <_fflush_r+0x1a>
 800c3ce:	f7fe fb7b 	bl	800aac8 <__sinit>
 800c3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0f3      	beq.n	800c3c2 <_fflush_r+0xa>
 800c3da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3dc:	07d0      	lsls	r0, r2, #31
 800c3de:	d404      	bmi.n	800c3ea <_fflush_r+0x32>
 800c3e0:	0599      	lsls	r1, r3, #22
 800c3e2:	d402      	bmi.n	800c3ea <_fflush_r+0x32>
 800c3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e6:	f7fe fc66 	bl	800acb6 <__retarget_lock_acquire_recursive>
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	f7ff ff5d 	bl	800c2ac <__sflush_r>
 800c3f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3f4:	07da      	lsls	r2, r3, #31
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	d4e4      	bmi.n	800c3c4 <_fflush_r+0xc>
 800c3fa:	89a3      	ldrh	r3, [r4, #12]
 800c3fc:	059b      	lsls	r3, r3, #22
 800c3fe:	d4e1      	bmi.n	800c3c4 <_fflush_r+0xc>
 800c400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c402:	f7fe fc59 	bl	800acb8 <__retarget_lock_release_recursive>
 800c406:	e7dd      	b.n	800c3c4 <_fflush_r+0xc>

0800c408 <_sbrk_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d06      	ldr	r5, [pc, #24]	; (800c424 <_sbrk_r+0x1c>)
 800c40c:	2300      	movs	r3, #0
 800c40e:	4604      	mov	r4, r0
 800c410:	4608      	mov	r0, r1
 800c412:	602b      	str	r3, [r5, #0]
 800c414:	f7f5 fc5e 	bl	8001cd4 <_sbrk>
 800c418:	1c43      	adds	r3, r0, #1
 800c41a:	d102      	bne.n	800c422 <_sbrk_r+0x1a>
 800c41c:	682b      	ldr	r3, [r5, #0]
 800c41e:	b103      	cbz	r3, 800c422 <_sbrk_r+0x1a>
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	bd38      	pop	{r3, r4, r5, pc}
 800c424:	20002230 	.word	0x20002230

0800c428 <memcpy>:
 800c428:	440a      	add	r2, r1
 800c42a:	4291      	cmp	r1, r2
 800c42c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c430:	d100      	bne.n	800c434 <memcpy+0xc>
 800c432:	4770      	bx	lr
 800c434:	b510      	push	{r4, lr}
 800c436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c43a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c43e:	4291      	cmp	r1, r2
 800c440:	d1f9      	bne.n	800c436 <memcpy+0xe>
 800c442:	bd10      	pop	{r4, pc}

0800c444 <__assert_func>:
 800c444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c446:	4614      	mov	r4, r2
 800c448:	461a      	mov	r2, r3
 800c44a:	4b09      	ldr	r3, [pc, #36]	; (800c470 <__assert_func+0x2c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4605      	mov	r5, r0
 800c450:	68d8      	ldr	r0, [r3, #12]
 800c452:	b14c      	cbz	r4, 800c468 <__assert_func+0x24>
 800c454:	4b07      	ldr	r3, [pc, #28]	; (800c474 <__assert_func+0x30>)
 800c456:	9100      	str	r1, [sp, #0]
 800c458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c45c:	4906      	ldr	r1, [pc, #24]	; (800c478 <__assert_func+0x34>)
 800c45e:	462b      	mov	r3, r5
 800c460:	f000 f844 	bl	800c4ec <fiprintf>
 800c464:	f000 f854 	bl	800c510 <abort>
 800c468:	4b04      	ldr	r3, [pc, #16]	; (800c47c <__assert_func+0x38>)
 800c46a:	461c      	mov	r4, r3
 800c46c:	e7f3      	b.n	800c456 <__assert_func+0x12>
 800c46e:	bf00      	nop
 800c470:	20000154 	.word	0x20000154
 800c474:	0800cd26 	.word	0x0800cd26
 800c478:	0800cd33 	.word	0x0800cd33
 800c47c:	0800cd61 	.word	0x0800cd61

0800c480 <_calloc_r>:
 800c480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c482:	fba1 2402 	umull	r2, r4, r1, r2
 800c486:	b94c      	cbnz	r4, 800c49c <_calloc_r+0x1c>
 800c488:	4611      	mov	r1, r2
 800c48a:	9201      	str	r2, [sp, #4]
 800c48c:	f7ff fb06 	bl	800ba9c <_malloc_r>
 800c490:	9a01      	ldr	r2, [sp, #4]
 800c492:	4605      	mov	r5, r0
 800c494:	b930      	cbnz	r0, 800c4a4 <_calloc_r+0x24>
 800c496:	4628      	mov	r0, r5
 800c498:	b003      	add	sp, #12
 800c49a:	bd30      	pop	{r4, r5, pc}
 800c49c:	220c      	movs	r2, #12
 800c49e:	6002      	str	r2, [r0, #0]
 800c4a0:	2500      	movs	r5, #0
 800c4a2:	e7f8      	b.n	800c496 <_calloc_r+0x16>
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	f7fe fb88 	bl	800abba <memset>
 800c4aa:	e7f4      	b.n	800c496 <_calloc_r+0x16>

0800c4ac <__ascii_mbtowc>:
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	b901      	cbnz	r1, 800c4b2 <__ascii_mbtowc+0x6>
 800c4b0:	a901      	add	r1, sp, #4
 800c4b2:	b142      	cbz	r2, 800c4c6 <__ascii_mbtowc+0x1a>
 800c4b4:	b14b      	cbz	r3, 800c4ca <__ascii_mbtowc+0x1e>
 800c4b6:	7813      	ldrb	r3, [r2, #0]
 800c4b8:	600b      	str	r3, [r1, #0]
 800c4ba:	7812      	ldrb	r2, [r2, #0]
 800c4bc:	1e10      	subs	r0, r2, #0
 800c4be:	bf18      	it	ne
 800c4c0:	2001      	movne	r0, #1
 800c4c2:	b002      	add	sp, #8
 800c4c4:	4770      	bx	lr
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	e7fb      	b.n	800c4c2 <__ascii_mbtowc+0x16>
 800c4ca:	f06f 0001 	mvn.w	r0, #1
 800c4ce:	e7f8      	b.n	800c4c2 <__ascii_mbtowc+0x16>

0800c4d0 <__ascii_wctomb>:
 800c4d0:	b149      	cbz	r1, 800c4e6 <__ascii_wctomb+0x16>
 800c4d2:	2aff      	cmp	r2, #255	; 0xff
 800c4d4:	bf85      	ittet	hi
 800c4d6:	238a      	movhi	r3, #138	; 0x8a
 800c4d8:	6003      	strhi	r3, [r0, #0]
 800c4da:	700a      	strbls	r2, [r1, #0]
 800c4dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800c4e0:	bf98      	it	ls
 800c4e2:	2001      	movls	r0, #1
 800c4e4:	4770      	bx	lr
 800c4e6:	4608      	mov	r0, r1
 800c4e8:	4770      	bx	lr
	...

0800c4ec <fiprintf>:
 800c4ec:	b40e      	push	{r1, r2, r3}
 800c4ee:	b503      	push	{r0, r1, lr}
 800c4f0:	4601      	mov	r1, r0
 800c4f2:	ab03      	add	r3, sp, #12
 800c4f4:	4805      	ldr	r0, [pc, #20]	; (800c50c <fiprintf+0x20>)
 800c4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4fa:	6800      	ldr	r0, [r0, #0]
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	f000 f837 	bl	800c570 <_vfiprintf_r>
 800c502:	b002      	add	sp, #8
 800c504:	f85d eb04 	ldr.w	lr, [sp], #4
 800c508:	b003      	add	sp, #12
 800c50a:	4770      	bx	lr
 800c50c:	20000154 	.word	0x20000154

0800c510 <abort>:
 800c510:	b508      	push	{r3, lr}
 800c512:	2006      	movs	r0, #6
 800c514:	f000 fa04 	bl	800c920 <raise>
 800c518:	2001      	movs	r0, #1
 800c51a:	f7f5 fb63 	bl	8001be4 <_exit>

0800c51e <__sfputc_r>:
 800c51e:	6893      	ldr	r3, [r2, #8]
 800c520:	3b01      	subs	r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	b410      	push	{r4}
 800c526:	6093      	str	r3, [r2, #8]
 800c528:	da08      	bge.n	800c53c <__sfputc_r+0x1e>
 800c52a:	6994      	ldr	r4, [r2, #24]
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	db01      	blt.n	800c534 <__sfputc_r+0x16>
 800c530:	290a      	cmp	r1, #10
 800c532:	d103      	bne.n	800c53c <__sfputc_r+0x1e>
 800c534:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c538:	f000 b934 	b.w	800c7a4 <__swbuf_r>
 800c53c:	6813      	ldr	r3, [r2, #0]
 800c53e:	1c58      	adds	r0, r3, #1
 800c540:	6010      	str	r0, [r2, #0]
 800c542:	7019      	strb	r1, [r3, #0]
 800c544:	4608      	mov	r0, r1
 800c546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <__sfputs_r>:
 800c54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	4614      	mov	r4, r2
 800c554:	18d5      	adds	r5, r2, r3
 800c556:	42ac      	cmp	r4, r5
 800c558:	d101      	bne.n	800c55e <__sfputs_r+0x12>
 800c55a:	2000      	movs	r0, #0
 800c55c:	e007      	b.n	800c56e <__sfputs_r+0x22>
 800c55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c562:	463a      	mov	r2, r7
 800c564:	4630      	mov	r0, r6
 800c566:	f7ff ffda 	bl	800c51e <__sfputc_r>
 800c56a:	1c43      	adds	r3, r0, #1
 800c56c:	d1f3      	bne.n	800c556 <__sfputs_r+0xa>
 800c56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c570 <_vfiprintf_r>:
 800c570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c574:	460d      	mov	r5, r1
 800c576:	b09d      	sub	sp, #116	; 0x74
 800c578:	4614      	mov	r4, r2
 800c57a:	4698      	mov	r8, r3
 800c57c:	4606      	mov	r6, r0
 800c57e:	b118      	cbz	r0, 800c588 <_vfiprintf_r+0x18>
 800c580:	6a03      	ldr	r3, [r0, #32]
 800c582:	b90b      	cbnz	r3, 800c588 <_vfiprintf_r+0x18>
 800c584:	f7fe faa0 	bl	800aac8 <__sinit>
 800c588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c58a:	07d9      	lsls	r1, r3, #31
 800c58c:	d405      	bmi.n	800c59a <_vfiprintf_r+0x2a>
 800c58e:	89ab      	ldrh	r3, [r5, #12]
 800c590:	059a      	lsls	r2, r3, #22
 800c592:	d402      	bmi.n	800c59a <_vfiprintf_r+0x2a>
 800c594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c596:	f7fe fb8e 	bl	800acb6 <__retarget_lock_acquire_recursive>
 800c59a:	89ab      	ldrh	r3, [r5, #12]
 800c59c:	071b      	lsls	r3, r3, #28
 800c59e:	d501      	bpl.n	800c5a4 <_vfiprintf_r+0x34>
 800c5a0:	692b      	ldr	r3, [r5, #16]
 800c5a2:	b99b      	cbnz	r3, 800c5cc <_vfiprintf_r+0x5c>
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f000 f93a 	bl	800c820 <__swsetup_r>
 800c5ac:	b170      	cbz	r0, 800c5cc <_vfiprintf_r+0x5c>
 800c5ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5b0:	07dc      	lsls	r4, r3, #31
 800c5b2:	d504      	bpl.n	800c5be <_vfiprintf_r+0x4e>
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b8:	b01d      	add	sp, #116	; 0x74
 800c5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5be:	89ab      	ldrh	r3, [r5, #12]
 800c5c0:	0598      	lsls	r0, r3, #22
 800c5c2:	d4f7      	bmi.n	800c5b4 <_vfiprintf_r+0x44>
 800c5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5c6:	f7fe fb77 	bl	800acb8 <__retarget_lock_release_recursive>
 800c5ca:	e7f3      	b.n	800c5b4 <_vfiprintf_r+0x44>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d0:	2320      	movs	r3, #32
 800c5d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5da:	2330      	movs	r3, #48	; 0x30
 800c5dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c790 <_vfiprintf_r+0x220>
 800c5e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5e4:	f04f 0901 	mov.w	r9, #1
 800c5e8:	4623      	mov	r3, r4
 800c5ea:	469a      	mov	sl, r3
 800c5ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5f0:	b10a      	cbz	r2, 800c5f6 <_vfiprintf_r+0x86>
 800c5f2:	2a25      	cmp	r2, #37	; 0x25
 800c5f4:	d1f9      	bne.n	800c5ea <_vfiprintf_r+0x7a>
 800c5f6:	ebba 0b04 	subs.w	fp, sl, r4
 800c5fa:	d00b      	beq.n	800c614 <_vfiprintf_r+0xa4>
 800c5fc:	465b      	mov	r3, fp
 800c5fe:	4622      	mov	r2, r4
 800c600:	4629      	mov	r1, r5
 800c602:	4630      	mov	r0, r6
 800c604:	f7ff ffa2 	bl	800c54c <__sfputs_r>
 800c608:	3001      	adds	r0, #1
 800c60a:	f000 80a9 	beq.w	800c760 <_vfiprintf_r+0x1f0>
 800c60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c610:	445a      	add	r2, fp
 800c612:	9209      	str	r2, [sp, #36]	; 0x24
 800c614:	f89a 3000 	ldrb.w	r3, [sl]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 80a1 	beq.w	800c760 <_vfiprintf_r+0x1f0>
 800c61e:	2300      	movs	r3, #0
 800c620:	f04f 32ff 	mov.w	r2, #4294967295
 800c624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c628:	f10a 0a01 	add.w	sl, sl, #1
 800c62c:	9304      	str	r3, [sp, #16]
 800c62e:	9307      	str	r3, [sp, #28]
 800c630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c634:	931a      	str	r3, [sp, #104]	; 0x68
 800c636:	4654      	mov	r4, sl
 800c638:	2205      	movs	r2, #5
 800c63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c63e:	4854      	ldr	r0, [pc, #336]	; (800c790 <_vfiprintf_r+0x220>)
 800c640:	f7f3 fdce 	bl	80001e0 <memchr>
 800c644:	9a04      	ldr	r2, [sp, #16]
 800c646:	b9d8      	cbnz	r0, 800c680 <_vfiprintf_r+0x110>
 800c648:	06d1      	lsls	r1, r2, #27
 800c64a:	bf44      	itt	mi
 800c64c:	2320      	movmi	r3, #32
 800c64e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c652:	0713      	lsls	r3, r2, #28
 800c654:	bf44      	itt	mi
 800c656:	232b      	movmi	r3, #43	; 0x2b
 800c658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c65c:	f89a 3000 	ldrb.w	r3, [sl]
 800c660:	2b2a      	cmp	r3, #42	; 0x2a
 800c662:	d015      	beq.n	800c690 <_vfiprintf_r+0x120>
 800c664:	9a07      	ldr	r2, [sp, #28]
 800c666:	4654      	mov	r4, sl
 800c668:	2000      	movs	r0, #0
 800c66a:	f04f 0c0a 	mov.w	ip, #10
 800c66e:	4621      	mov	r1, r4
 800c670:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c674:	3b30      	subs	r3, #48	; 0x30
 800c676:	2b09      	cmp	r3, #9
 800c678:	d94d      	bls.n	800c716 <_vfiprintf_r+0x1a6>
 800c67a:	b1b0      	cbz	r0, 800c6aa <_vfiprintf_r+0x13a>
 800c67c:	9207      	str	r2, [sp, #28]
 800c67e:	e014      	b.n	800c6aa <_vfiprintf_r+0x13a>
 800c680:	eba0 0308 	sub.w	r3, r0, r8
 800c684:	fa09 f303 	lsl.w	r3, r9, r3
 800c688:	4313      	orrs	r3, r2
 800c68a:	9304      	str	r3, [sp, #16]
 800c68c:	46a2      	mov	sl, r4
 800c68e:	e7d2      	b.n	800c636 <_vfiprintf_r+0xc6>
 800c690:	9b03      	ldr	r3, [sp, #12]
 800c692:	1d19      	adds	r1, r3, #4
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	9103      	str	r1, [sp, #12]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	bfbb      	ittet	lt
 800c69c:	425b      	neglt	r3, r3
 800c69e:	f042 0202 	orrlt.w	r2, r2, #2
 800c6a2:	9307      	strge	r3, [sp, #28]
 800c6a4:	9307      	strlt	r3, [sp, #28]
 800c6a6:	bfb8      	it	lt
 800c6a8:	9204      	strlt	r2, [sp, #16]
 800c6aa:	7823      	ldrb	r3, [r4, #0]
 800c6ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ae:	d10c      	bne.n	800c6ca <_vfiprintf_r+0x15a>
 800c6b0:	7863      	ldrb	r3, [r4, #1]
 800c6b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6b4:	d134      	bne.n	800c720 <_vfiprintf_r+0x1b0>
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	1d1a      	adds	r2, r3, #4
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	9203      	str	r2, [sp, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	bfb8      	it	lt
 800c6c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6c6:	3402      	adds	r4, #2
 800c6c8:	9305      	str	r3, [sp, #20]
 800c6ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c7a0 <_vfiprintf_r+0x230>
 800c6ce:	7821      	ldrb	r1, [r4, #0]
 800c6d0:	2203      	movs	r2, #3
 800c6d2:	4650      	mov	r0, sl
 800c6d4:	f7f3 fd84 	bl	80001e0 <memchr>
 800c6d8:	b138      	cbz	r0, 800c6ea <_vfiprintf_r+0x17a>
 800c6da:	9b04      	ldr	r3, [sp, #16]
 800c6dc:	eba0 000a 	sub.w	r0, r0, sl
 800c6e0:	2240      	movs	r2, #64	; 0x40
 800c6e2:	4082      	lsls	r2, r0
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	3401      	adds	r4, #1
 800c6e8:	9304      	str	r3, [sp, #16]
 800c6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ee:	4829      	ldr	r0, [pc, #164]	; (800c794 <_vfiprintf_r+0x224>)
 800c6f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6f4:	2206      	movs	r2, #6
 800c6f6:	f7f3 fd73 	bl	80001e0 <memchr>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d03f      	beq.n	800c77e <_vfiprintf_r+0x20e>
 800c6fe:	4b26      	ldr	r3, [pc, #152]	; (800c798 <_vfiprintf_r+0x228>)
 800c700:	bb1b      	cbnz	r3, 800c74a <_vfiprintf_r+0x1da>
 800c702:	9b03      	ldr	r3, [sp, #12]
 800c704:	3307      	adds	r3, #7
 800c706:	f023 0307 	bic.w	r3, r3, #7
 800c70a:	3308      	adds	r3, #8
 800c70c:	9303      	str	r3, [sp, #12]
 800c70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c710:	443b      	add	r3, r7
 800c712:	9309      	str	r3, [sp, #36]	; 0x24
 800c714:	e768      	b.n	800c5e8 <_vfiprintf_r+0x78>
 800c716:	fb0c 3202 	mla	r2, ip, r2, r3
 800c71a:	460c      	mov	r4, r1
 800c71c:	2001      	movs	r0, #1
 800c71e:	e7a6      	b.n	800c66e <_vfiprintf_r+0xfe>
 800c720:	2300      	movs	r3, #0
 800c722:	3401      	adds	r4, #1
 800c724:	9305      	str	r3, [sp, #20]
 800c726:	4619      	mov	r1, r3
 800c728:	f04f 0c0a 	mov.w	ip, #10
 800c72c:	4620      	mov	r0, r4
 800c72e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c732:	3a30      	subs	r2, #48	; 0x30
 800c734:	2a09      	cmp	r2, #9
 800c736:	d903      	bls.n	800c740 <_vfiprintf_r+0x1d0>
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d0c6      	beq.n	800c6ca <_vfiprintf_r+0x15a>
 800c73c:	9105      	str	r1, [sp, #20]
 800c73e:	e7c4      	b.n	800c6ca <_vfiprintf_r+0x15a>
 800c740:	fb0c 2101 	mla	r1, ip, r1, r2
 800c744:	4604      	mov	r4, r0
 800c746:	2301      	movs	r3, #1
 800c748:	e7f0      	b.n	800c72c <_vfiprintf_r+0x1bc>
 800c74a:	ab03      	add	r3, sp, #12
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	462a      	mov	r2, r5
 800c750:	4b12      	ldr	r3, [pc, #72]	; (800c79c <_vfiprintf_r+0x22c>)
 800c752:	a904      	add	r1, sp, #16
 800c754:	4630      	mov	r0, r6
 800c756:	f7fd fd65 	bl	800a224 <_printf_float>
 800c75a:	4607      	mov	r7, r0
 800c75c:	1c78      	adds	r0, r7, #1
 800c75e:	d1d6      	bne.n	800c70e <_vfiprintf_r+0x19e>
 800c760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c762:	07d9      	lsls	r1, r3, #31
 800c764:	d405      	bmi.n	800c772 <_vfiprintf_r+0x202>
 800c766:	89ab      	ldrh	r3, [r5, #12]
 800c768:	059a      	lsls	r2, r3, #22
 800c76a:	d402      	bmi.n	800c772 <_vfiprintf_r+0x202>
 800c76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c76e:	f7fe faa3 	bl	800acb8 <__retarget_lock_release_recursive>
 800c772:	89ab      	ldrh	r3, [r5, #12]
 800c774:	065b      	lsls	r3, r3, #25
 800c776:	f53f af1d 	bmi.w	800c5b4 <_vfiprintf_r+0x44>
 800c77a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c77c:	e71c      	b.n	800c5b8 <_vfiprintf_r+0x48>
 800c77e:	ab03      	add	r3, sp, #12
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	462a      	mov	r2, r5
 800c784:	4b05      	ldr	r3, [pc, #20]	; (800c79c <_vfiprintf_r+0x22c>)
 800c786:	a904      	add	r1, sp, #16
 800c788:	4630      	mov	r0, r6
 800c78a:	f7fd ffef 	bl	800a76c <_printf_i>
 800c78e:	e7e4      	b.n	800c75a <_vfiprintf_r+0x1ea>
 800c790:	0800ce63 	.word	0x0800ce63
 800c794:	0800ce6d 	.word	0x0800ce6d
 800c798:	0800a225 	.word	0x0800a225
 800c79c:	0800c54d 	.word	0x0800c54d
 800c7a0:	0800ce69 	.word	0x0800ce69

0800c7a4 <__swbuf_r>:
 800c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a6:	460e      	mov	r6, r1
 800c7a8:	4614      	mov	r4, r2
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	b118      	cbz	r0, 800c7b6 <__swbuf_r+0x12>
 800c7ae:	6a03      	ldr	r3, [r0, #32]
 800c7b0:	b90b      	cbnz	r3, 800c7b6 <__swbuf_r+0x12>
 800c7b2:	f7fe f989 	bl	800aac8 <__sinit>
 800c7b6:	69a3      	ldr	r3, [r4, #24]
 800c7b8:	60a3      	str	r3, [r4, #8]
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	071a      	lsls	r2, r3, #28
 800c7be:	d525      	bpl.n	800c80c <__swbuf_r+0x68>
 800c7c0:	6923      	ldr	r3, [r4, #16]
 800c7c2:	b31b      	cbz	r3, 800c80c <__swbuf_r+0x68>
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	6922      	ldr	r2, [r4, #16]
 800c7c8:	1a98      	subs	r0, r3, r2
 800c7ca:	6963      	ldr	r3, [r4, #20]
 800c7cc:	b2f6      	uxtb	r6, r6
 800c7ce:	4283      	cmp	r3, r0
 800c7d0:	4637      	mov	r7, r6
 800c7d2:	dc04      	bgt.n	800c7de <__swbuf_r+0x3a>
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	f7ff fdee 	bl	800c3b8 <_fflush_r>
 800c7dc:	b9e0      	cbnz	r0, 800c818 <__swbuf_r+0x74>
 800c7de:	68a3      	ldr	r3, [r4, #8]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	60a3      	str	r3, [r4, #8]
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	1c5a      	adds	r2, r3, #1
 800c7e8:	6022      	str	r2, [r4, #0]
 800c7ea:	701e      	strb	r6, [r3, #0]
 800c7ec:	6962      	ldr	r2, [r4, #20]
 800c7ee:	1c43      	adds	r3, r0, #1
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d004      	beq.n	800c7fe <__swbuf_r+0x5a>
 800c7f4:	89a3      	ldrh	r3, [r4, #12]
 800c7f6:	07db      	lsls	r3, r3, #31
 800c7f8:	d506      	bpl.n	800c808 <__swbuf_r+0x64>
 800c7fa:	2e0a      	cmp	r6, #10
 800c7fc:	d104      	bne.n	800c808 <__swbuf_r+0x64>
 800c7fe:	4621      	mov	r1, r4
 800c800:	4628      	mov	r0, r5
 800c802:	f7ff fdd9 	bl	800c3b8 <_fflush_r>
 800c806:	b938      	cbnz	r0, 800c818 <__swbuf_r+0x74>
 800c808:	4638      	mov	r0, r7
 800c80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c80c:	4621      	mov	r1, r4
 800c80e:	4628      	mov	r0, r5
 800c810:	f000 f806 	bl	800c820 <__swsetup_r>
 800c814:	2800      	cmp	r0, #0
 800c816:	d0d5      	beq.n	800c7c4 <__swbuf_r+0x20>
 800c818:	f04f 37ff 	mov.w	r7, #4294967295
 800c81c:	e7f4      	b.n	800c808 <__swbuf_r+0x64>
	...

0800c820 <__swsetup_r>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	4b2a      	ldr	r3, [pc, #168]	; (800c8cc <__swsetup_r+0xac>)
 800c824:	4605      	mov	r5, r0
 800c826:	6818      	ldr	r0, [r3, #0]
 800c828:	460c      	mov	r4, r1
 800c82a:	b118      	cbz	r0, 800c834 <__swsetup_r+0x14>
 800c82c:	6a03      	ldr	r3, [r0, #32]
 800c82e:	b90b      	cbnz	r3, 800c834 <__swsetup_r+0x14>
 800c830:	f7fe f94a 	bl	800aac8 <__sinit>
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c83a:	0718      	lsls	r0, r3, #28
 800c83c:	d422      	bmi.n	800c884 <__swsetup_r+0x64>
 800c83e:	06d9      	lsls	r1, r3, #27
 800c840:	d407      	bmi.n	800c852 <__swsetup_r+0x32>
 800c842:	2309      	movs	r3, #9
 800c844:	602b      	str	r3, [r5, #0]
 800c846:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c84a:	81a3      	strh	r3, [r4, #12]
 800c84c:	f04f 30ff 	mov.w	r0, #4294967295
 800c850:	e034      	b.n	800c8bc <__swsetup_r+0x9c>
 800c852:	0758      	lsls	r0, r3, #29
 800c854:	d512      	bpl.n	800c87c <__swsetup_r+0x5c>
 800c856:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c858:	b141      	cbz	r1, 800c86c <__swsetup_r+0x4c>
 800c85a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c85e:	4299      	cmp	r1, r3
 800c860:	d002      	beq.n	800c868 <__swsetup_r+0x48>
 800c862:	4628      	mov	r0, r5
 800c864:	f7ff f8a6 	bl	800b9b4 <_free_r>
 800c868:	2300      	movs	r3, #0
 800c86a:	6363      	str	r3, [r4, #52]	; 0x34
 800c86c:	89a3      	ldrh	r3, [r4, #12]
 800c86e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c872:	81a3      	strh	r3, [r4, #12]
 800c874:	2300      	movs	r3, #0
 800c876:	6063      	str	r3, [r4, #4]
 800c878:	6923      	ldr	r3, [r4, #16]
 800c87a:	6023      	str	r3, [r4, #0]
 800c87c:	89a3      	ldrh	r3, [r4, #12]
 800c87e:	f043 0308 	orr.w	r3, r3, #8
 800c882:	81a3      	strh	r3, [r4, #12]
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	b94b      	cbnz	r3, 800c89c <__swsetup_r+0x7c>
 800c888:	89a3      	ldrh	r3, [r4, #12]
 800c88a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c88e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c892:	d003      	beq.n	800c89c <__swsetup_r+0x7c>
 800c894:	4621      	mov	r1, r4
 800c896:	4628      	mov	r0, r5
 800c898:	f000 f884 	bl	800c9a4 <__smakebuf_r>
 800c89c:	89a0      	ldrh	r0, [r4, #12]
 800c89e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8a2:	f010 0301 	ands.w	r3, r0, #1
 800c8a6:	d00a      	beq.n	800c8be <__swsetup_r+0x9e>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	60a3      	str	r3, [r4, #8]
 800c8ac:	6963      	ldr	r3, [r4, #20]
 800c8ae:	425b      	negs	r3, r3
 800c8b0:	61a3      	str	r3, [r4, #24]
 800c8b2:	6923      	ldr	r3, [r4, #16]
 800c8b4:	b943      	cbnz	r3, 800c8c8 <__swsetup_r+0xa8>
 800c8b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8ba:	d1c4      	bne.n	800c846 <__swsetup_r+0x26>
 800c8bc:	bd38      	pop	{r3, r4, r5, pc}
 800c8be:	0781      	lsls	r1, r0, #30
 800c8c0:	bf58      	it	pl
 800c8c2:	6963      	ldrpl	r3, [r4, #20]
 800c8c4:	60a3      	str	r3, [r4, #8]
 800c8c6:	e7f4      	b.n	800c8b2 <__swsetup_r+0x92>
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	e7f7      	b.n	800c8bc <__swsetup_r+0x9c>
 800c8cc:	20000154 	.word	0x20000154

0800c8d0 <_raise_r>:
 800c8d0:	291f      	cmp	r1, #31
 800c8d2:	b538      	push	{r3, r4, r5, lr}
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	460d      	mov	r5, r1
 800c8d8:	d904      	bls.n	800c8e4 <_raise_r+0x14>
 800c8da:	2316      	movs	r3, #22
 800c8dc:	6003      	str	r3, [r0, #0]
 800c8de:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e2:	bd38      	pop	{r3, r4, r5, pc}
 800c8e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c8e6:	b112      	cbz	r2, 800c8ee <_raise_r+0x1e>
 800c8e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8ec:	b94b      	cbnz	r3, 800c902 <_raise_r+0x32>
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f000 f830 	bl	800c954 <_getpid_r>
 800c8f4:	462a      	mov	r2, r5
 800c8f6:	4601      	mov	r1, r0
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8fe:	f000 b817 	b.w	800c930 <_kill_r>
 800c902:	2b01      	cmp	r3, #1
 800c904:	d00a      	beq.n	800c91c <_raise_r+0x4c>
 800c906:	1c59      	adds	r1, r3, #1
 800c908:	d103      	bne.n	800c912 <_raise_r+0x42>
 800c90a:	2316      	movs	r3, #22
 800c90c:	6003      	str	r3, [r0, #0]
 800c90e:	2001      	movs	r0, #1
 800c910:	e7e7      	b.n	800c8e2 <_raise_r+0x12>
 800c912:	2400      	movs	r4, #0
 800c914:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c918:	4628      	mov	r0, r5
 800c91a:	4798      	blx	r3
 800c91c:	2000      	movs	r0, #0
 800c91e:	e7e0      	b.n	800c8e2 <_raise_r+0x12>

0800c920 <raise>:
 800c920:	4b02      	ldr	r3, [pc, #8]	; (800c92c <raise+0xc>)
 800c922:	4601      	mov	r1, r0
 800c924:	6818      	ldr	r0, [r3, #0]
 800c926:	f7ff bfd3 	b.w	800c8d0 <_raise_r>
 800c92a:	bf00      	nop
 800c92c:	20000154 	.word	0x20000154

0800c930 <_kill_r>:
 800c930:	b538      	push	{r3, r4, r5, lr}
 800c932:	4d07      	ldr	r5, [pc, #28]	; (800c950 <_kill_r+0x20>)
 800c934:	2300      	movs	r3, #0
 800c936:	4604      	mov	r4, r0
 800c938:	4608      	mov	r0, r1
 800c93a:	4611      	mov	r1, r2
 800c93c:	602b      	str	r3, [r5, #0]
 800c93e:	f7f5 f941 	bl	8001bc4 <_kill>
 800c942:	1c43      	adds	r3, r0, #1
 800c944:	d102      	bne.n	800c94c <_kill_r+0x1c>
 800c946:	682b      	ldr	r3, [r5, #0]
 800c948:	b103      	cbz	r3, 800c94c <_kill_r+0x1c>
 800c94a:	6023      	str	r3, [r4, #0]
 800c94c:	bd38      	pop	{r3, r4, r5, pc}
 800c94e:	bf00      	nop
 800c950:	20002230 	.word	0x20002230

0800c954 <_getpid_r>:
 800c954:	f7f5 b92e 	b.w	8001bb4 <_getpid>

0800c958 <__swhatbuf_r>:
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	460c      	mov	r4, r1
 800c95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c960:	2900      	cmp	r1, #0
 800c962:	b096      	sub	sp, #88	; 0x58
 800c964:	4615      	mov	r5, r2
 800c966:	461e      	mov	r6, r3
 800c968:	da0d      	bge.n	800c986 <__swhatbuf_r+0x2e>
 800c96a:	89a3      	ldrh	r3, [r4, #12]
 800c96c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c970:	f04f 0100 	mov.w	r1, #0
 800c974:	bf0c      	ite	eq
 800c976:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c97a:	2340      	movne	r3, #64	; 0x40
 800c97c:	2000      	movs	r0, #0
 800c97e:	6031      	str	r1, [r6, #0]
 800c980:	602b      	str	r3, [r5, #0]
 800c982:	b016      	add	sp, #88	; 0x58
 800c984:	bd70      	pop	{r4, r5, r6, pc}
 800c986:	466a      	mov	r2, sp
 800c988:	f000 f848 	bl	800ca1c <_fstat_r>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	dbec      	blt.n	800c96a <__swhatbuf_r+0x12>
 800c990:	9901      	ldr	r1, [sp, #4]
 800c992:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c996:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c99a:	4259      	negs	r1, r3
 800c99c:	4159      	adcs	r1, r3
 800c99e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9a2:	e7eb      	b.n	800c97c <__swhatbuf_r+0x24>

0800c9a4 <__smakebuf_r>:
 800c9a4:	898b      	ldrh	r3, [r1, #12]
 800c9a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9a8:	079d      	lsls	r5, r3, #30
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	460c      	mov	r4, r1
 800c9ae:	d507      	bpl.n	800c9c0 <__smakebuf_r+0x1c>
 800c9b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9b4:	6023      	str	r3, [r4, #0]
 800c9b6:	6123      	str	r3, [r4, #16]
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	6163      	str	r3, [r4, #20]
 800c9bc:	b002      	add	sp, #8
 800c9be:	bd70      	pop	{r4, r5, r6, pc}
 800c9c0:	ab01      	add	r3, sp, #4
 800c9c2:	466a      	mov	r2, sp
 800c9c4:	f7ff ffc8 	bl	800c958 <__swhatbuf_r>
 800c9c8:	9900      	ldr	r1, [sp, #0]
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f7ff f865 	bl	800ba9c <_malloc_r>
 800c9d2:	b948      	cbnz	r0, 800c9e8 <__smakebuf_r+0x44>
 800c9d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9d8:	059a      	lsls	r2, r3, #22
 800c9da:	d4ef      	bmi.n	800c9bc <__smakebuf_r+0x18>
 800c9dc:	f023 0303 	bic.w	r3, r3, #3
 800c9e0:	f043 0302 	orr.w	r3, r3, #2
 800c9e4:	81a3      	strh	r3, [r4, #12]
 800c9e6:	e7e3      	b.n	800c9b0 <__smakebuf_r+0xc>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	6020      	str	r0, [r4, #0]
 800c9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f0:	81a3      	strh	r3, [r4, #12]
 800c9f2:	9b00      	ldr	r3, [sp, #0]
 800c9f4:	6163      	str	r3, [r4, #20]
 800c9f6:	9b01      	ldr	r3, [sp, #4]
 800c9f8:	6120      	str	r0, [r4, #16]
 800c9fa:	b15b      	cbz	r3, 800ca14 <__smakebuf_r+0x70>
 800c9fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca00:	4630      	mov	r0, r6
 800ca02:	f000 f81d 	bl	800ca40 <_isatty_r>
 800ca06:	b128      	cbz	r0, 800ca14 <__smakebuf_r+0x70>
 800ca08:	89a3      	ldrh	r3, [r4, #12]
 800ca0a:	f023 0303 	bic.w	r3, r3, #3
 800ca0e:	f043 0301 	orr.w	r3, r3, #1
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	89a3      	ldrh	r3, [r4, #12]
 800ca16:	431d      	orrs	r5, r3
 800ca18:	81a5      	strh	r5, [r4, #12]
 800ca1a:	e7cf      	b.n	800c9bc <__smakebuf_r+0x18>

0800ca1c <_fstat_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4d07      	ldr	r5, [pc, #28]	; (800ca3c <_fstat_r+0x20>)
 800ca20:	2300      	movs	r3, #0
 800ca22:	4604      	mov	r4, r0
 800ca24:	4608      	mov	r0, r1
 800ca26:	4611      	mov	r1, r2
 800ca28:	602b      	str	r3, [r5, #0]
 800ca2a:	f7f5 f92a 	bl	8001c82 <_fstat>
 800ca2e:	1c43      	adds	r3, r0, #1
 800ca30:	d102      	bne.n	800ca38 <_fstat_r+0x1c>
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	b103      	cbz	r3, 800ca38 <_fstat_r+0x1c>
 800ca36:	6023      	str	r3, [r4, #0]
 800ca38:	bd38      	pop	{r3, r4, r5, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20002230 	.word	0x20002230

0800ca40 <_isatty_r>:
 800ca40:	b538      	push	{r3, r4, r5, lr}
 800ca42:	4d06      	ldr	r5, [pc, #24]	; (800ca5c <_isatty_r+0x1c>)
 800ca44:	2300      	movs	r3, #0
 800ca46:	4604      	mov	r4, r0
 800ca48:	4608      	mov	r0, r1
 800ca4a:	602b      	str	r3, [r5, #0]
 800ca4c:	f7f5 f929 	bl	8001ca2 <_isatty>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_isatty_r+0x1a>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_isatty_r+0x1a>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	20002230 	.word	0x20002230

0800ca60 <_init>:
 800ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca62:	bf00      	nop
 800ca64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca66:	bc08      	pop	{r3}
 800ca68:	469e      	mov	lr, r3
 800ca6a:	4770      	bx	lr

0800ca6c <_fini>:
 800ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6e:	bf00      	nop
 800ca70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca72:	bc08      	pop	{r3}
 800ca74:	469e      	mov	lr, r3
 800ca76:	4770      	bx	lr
